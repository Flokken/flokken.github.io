(window.webpackJsonp=window.webpackJsonp||[]).push([[187],{517:function(s,a,t){"use strict";t.r(a);var n=t(4),e=Object(n.a)({},(function(){var s=this,a=s._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("p",[a("strong",[s._v("执行引擎是Java虚拟机核心的组成部分之一")]),s._v("，它负责执行Java程序编译后生成的字节码指令。“虚拟机”是一个相对于“物理机”的概念，这两种机 器都有代码执行能力，其区别是")]),s._v(" "),a("ul",[a("li",[s._v("物理机的执行引擎是直接建立在处理器、缓存、指令集和操作系统层 面上的，")]),s._v(" "),a("li",[s._v("虚拟机的执行引擎则是由软件自行实现的，因此可以不受物理条件制约地定制指令集与执 行引擎的结构体系，能够执行那些不被硬件直接支持的指令集格式。")])]),s._v(" "),a("blockquote",[a("p",[s._v("在《Java虚拟机规范》中制定了Java虚拟机字节码执行引擎的概念模型。")]),s._v(" "),a("p",[s._v("执行引擎在执行字节码的 时候，**通常会有解释执行（通过解释器执行）和编译执行（通过即时编译器产生本地代码执行）两种 选择，**也可能两者兼备，还可能会有同时包含几个不同级别的即时编译器一起工作的执行引擎")])]),s._v(" "),a("p",[s._v("总结一下："),a("strong",[s._v("字节码执行引擎（Bytecode Execution Engine）：负责执行Java程序编译后生成的字节码指令。它可以通过解释执行字节码或者使用即时编译器将字节码转换为本地机器代码执行。")])]),s._v(" "),a("h2",{attrs:{id:"运行时栈帧结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#运行时栈帧结构"}},[s._v("#")]),s._v(" 运行时栈帧结构")]),s._v(" "),a("p",[s._v("Java虚拟机以方法作为最基本的执行单元，"),a("strong",[s._v("“栈帧”（Stack Frame）则是用于支持虚拟机进行方法 调用和方法执行背后的数据结构")]),s._v("，它也是虚拟机运行时数据区中的虚拟机栈（Virtual Machine Stack）的栈元素")]),s._v(" "),a("p",[a("strong",[s._v("栈帧存储了方法的局部变量表、操作数栈、动态连接和方法返回地址等信息，每 一个方法从调用开始至执行结束的过程，都对应着一个栈帧在虚拟机栈里面从入栈到出栈的过程。")])]),s._v(" "),a("blockquote",[a("p",[s._v("在编译Java程序源码的时候，"),a("strong",[s._v("栈帧中需要多大的局部变量表，需要多深的操作数栈就已经被分析计算 出来，并且写入到方法表的Code属性之中")])])]),s._v(" "),a("p",[s._v("对于执行引擎来讲，在活动线程中，"),a("strong",[s._v("只有位于栈顶的方 法才是在运行的")]),s._v("，只有位于栈顶的栈帧才是生效的，"),a("strong",[s._v("其被称为“当前栈帧”（Current Stack Frame）")]),s._v("，与 这个栈帧所关联的方法被称为**“当前方法”（Current Method）**。"),a("strong",[s._v("执行引擎所运行的所有字节码指令都只 针对当前栈帧进行操作")])]),s._v(" "),a("img",{staticStyle:{zoom:"90%"},attrs:{src:"https://typora-1309665611.cos.ap-nanjing.myqcloud.com/typora/image-20230723112022460.png"}}),s._v(" "),a("center",[s._v("栈帧结构 ")]),s._v(" "),a("h3",{attrs:{id:"局部变量表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#局部变量表"}},[s._v("#")]),s._v(" 局部变量表")]),s._v(" "),a("p",[a("strong",[s._v("局部变量表（Local Variables Table）是一组变量值的存储空间，用于存放方法参数和方法内部定义 的局部变量。")])]),s._v(" "),a("blockquote",[a("p",[s._v("在Java程序被编译为Class文件时，就在方法的Code属性的max_locals数据项中确定了该方 法所需分配的局部变量表的最大容量")])]),s._v(" "),a("h4",{attrs:{id:"变量槽-最小单位"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#变量槽-最小单位"}},[s._v("#")]),s._v(" 变量槽(最小单位)")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("局部变量表的容量以变量槽（Variable Slot）为最小单位，槽可以存放一个 32位以内的数据类型，一个 Slot 中可以存放：boolean，byte，char，short，int，float，reference，returnAddress (少见)；")])]),s._v(" "),a("li",[a("p",[s._v("虚拟机可通过局部变量表中的 reference 做到：")]),s._v(" "),a("ul",[a("li",[s._v("查找 Java 堆中的实例对象的起始地址；")]),s._v(" "),a("li",[s._v("查找方法区中的 Class 对象。")])])]),s._v(" "),a("li",[a("p",[s._v("Java虚拟机通过索引定位的方式使用局部变量表，索引值的范围是从0开始至局部变量表最大的变 量槽数量。如果访问的是32位数据类型的变量，索引N就代表了使用第N个变量槽。")])]),s._v(" "),a("li",[a("p",[s._v("为了尽可能节省栈帧耗用的内存空间，"),a("strong",[s._v("局部变量表中的变量槽是可以重用的")])])]),s._v(" "),a("li",[a("p",[s._v("如果一个局部变量定义了但没有赋初始值，那它是完全不能使用的。所以不要认为 Java中任何情况下都存在诸如整型变量默认为0、布尔型变量默认为false等这样的默认值规则")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("当然，像局部变量没赋值，是会直接抛出异常的")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\t\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])])])]),s._v(" "),a("blockquote",[a("p",[s._v("不过类的字段变量就可以不赋初始值：")]),s._v(" "),a("p",[s._v("类的字段变量有两次赋初始值的过程，一次在准 备阶段，赋予系统初始值；另外一次在初始化阶段，赋予程序员定义的初始值。因此即使在初始化阶 段程序员没有为类变量赋值也没有关系，类变量仍然具有一个确定的初始值，不会产生歧义。")])])])]),s._v(" "),a("h3",{attrs:{id:"操作数栈"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#操作数栈"}},[s._v("#")]),s._v(" 操作数栈")]),s._v(" "),a("p",[s._v("操作数栈（Operand Stack）也常被称为操作栈，它是一个后入先出（Last In First Out，LIFO） 栈。")]),s._v(" "),a("blockquote",[a("p",[s._v("同局部变量表一样，操作数栈的最大深度也在编译的时候被写入到Code属性的max_stacks数据项 之中。")]),s._v(" "),a("p",[a("strong",[s._v("Java 虚拟机的解释执行称为：基于栈的执行引擎，其中 “栈” 指的就是操作数栈；")])])]),s._v(" "),a("p",[s._v("当一个方法刚刚开始执行的时候，这个方法的操作数栈是空的，在方法的执行过程中，会有各种 字节码指令往操作数栈中写入和提取内容，也就是出栈和入栈操作。譬如在做算术运算的时候是通过 将运算涉及的操作数栈压入栈顶后调用运算指令来进行的，又譬如在调用其他方法的时候是通过操作 数栈来进行方法参数的传递。")]),s._v(" "),a("p",[s._v("另外在概念模型中，两个不同栈帧作为不同方法的虚拟机栈的元素，是完全相互独立的。但是在 大多虚拟机的实现里都会进行一些优化处理，令两个栈帧出现一部分重叠，节约空间并且避免了这部分参数的传递。")]),s._v(" "),a("img",{staticStyle:{zoom:"80%"},attrs:{src:"https://typora-1309665611.cos.ap-nanjing.myqcloud.com/typora/image-20230723203641160.png"}}),s._v(" "),a("center",[s._v(" 两个栈帧之间的数据共享")]),s._v(" "),a("h3",{attrs:{id:"动态连接"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#动态连接"}},[s._v("#")]),s._v(" 动态连接")]),s._v(" "),a("p",[s._v("**每个栈帧都包含一个指向运行时常量池中该栈帧所属方法的引用，**持有这个引用是为了支持方法调用过程中的动态连接（Dynamic Linking）。")]),s._v(" "),a("ul",[a("li",[s._v("静态连接：Class文件的常量池中存有大量的符号引用，字节码中的方法调用指令就以常量池里指向方法的符号引用作为参数。"),a("strong",[s._v("这些符号 引用一部分会在类加载阶段或者第一次使用的时候就被转化为直接引用，这种转化被称为静态解析")])]),s._v(" "),a("li",[s._v("另外一部分将在"),a("strong",[s._v("每一次运行期间都转化为直接引用，这部分就称为动态连接")])])]),s._v(" "),a("h3",{attrs:{id:"方法返回地址"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#方法返回地址"}},[s._v("#")]),s._v(" 方法返回地址")]),s._v(" "),a("ul",[a("li",[s._v("当一个方法开始执行后，只有两种方式退出这个方法\n"),a("ul",[a("li",[s._v("第一种方式是执行引擎遇到任意一个方法 返回的字节码指令(遇到 return)")]),s._v(" "),a("li",[s._v("第二种是在方法执行的过程中遇到了异常")])])])]),s._v(" "),a("p",[s._v("无论采用何种退出方式，"),a("strong",[s._v("在方法退出之后，都必须返回到最初方法被调用时的位置，程序才能继 续执行，方法返回时可能需要在栈帧中保存一些信息，用来帮助恢复它的上层主调方法的执行状态")])]),s._v(" "),a("ul",[a("li",[s._v("恢复上层方法的局部变量表和操作数栈；")]),s._v(" "),a("li",[s._v("把返回值压入调用者栈帧的操作数栈；")]),s._v(" "),a("li",[s._v("调整 PC 计数器指向方法调用后面的指令。")])]),s._v(" "),a("h3",{attrs:{id:"附加信息"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#附加信息"}},[s._v("#")]),s._v(" 附加信息")]),s._v(" "),a("p",[s._v("《Java虚拟机规范》允许虚拟机实现增加一些规范里没有描述的信息到栈帧之中，例如与调试、 性能收集相关的信息，这部分信息完全取决于具体的虚拟机实现")]),s._v(" "),a("h2",{attrs:{id:"方法调用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#方法调用"}},[s._v("#")]),s._v(" 方法调用")]),s._v(" "),a("p",[s._v("方法调用并不等同于方法中的代码被执行，"),a("strong",[s._v("方法调用阶段唯一的任务就是确定被调用方法的版本 （即调用哪一个方法，比如父类和子类都有，用哪个类的），暂时还未涉及方法内部的具体运行过程。")])]),s._v(" "),a("blockquote",[a("p",[s._v("注意理解版本")])]),s._v(" "),a("p",[s._v("在程序运行时，进行方法调用是最 普遍、最频繁的操作之一。")]),s._v(" "),a("p",[s._v("原因：")]),s._v(" "),a("p",[s._v("Class文件的编译过程中不包含传统程序语言编译的 连接步骤，"),a("strong",[s._v("一切方法调用在Class文件里面存储的都只是符号引用，而不是方法在实际运行时内存布局 中的入口地址（也就是之前说的直接引用）")])]),s._v(" "),a("blockquote",[a("p",[s._v("这个特性给Java带来了"),a("strong",[s._v("更强大的动态扩展能力")]),s._v("，但也使 得Java方法调用过程变得相对复杂，"),a("strong",[s._v("某些调用需要在类加载期间，甚至到运行期间才能确定目标方法 的直接引用。")])])]),s._v(" "),a("h3",{attrs:{id:"_5条方法调用指令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5条方法调用指令"}},[s._v("#")]),s._v(" 5条方法调用指令")]),s._v(" "),a("p",[s._v("调用不同类型的方法，字节码指令集里设计了不同的指令。在Java虚拟机支持以下5条方法调用字 节码指令，分别是：")]),s._v(" "),a("ul",[a("li",[s._v("invokestatic。用于调用静态方法。")]),s._v(" "),a("li",[s._v("invokespecial。用于调用实例构造器()方法、私有方法和父类中的方法。")]),s._v(" "),a("li",[s._v("invokevirtual。用于调用所有的虚方法。")]),s._v(" "),a("li",[s._v("invokeinterface。用于调用接口方法，会在运行时再确定一个实现该接口的对象。")]),s._v(" "),a("li",[s._v("invokedynamic。先在运行时动态解析出调用点限定符所引用的方法，然后再执行该方法。前面4 条调用指令，分派逻辑都固化在Java虚拟机内部,invokedynamic指令的分派逻辑是由用户设定的引 导方法来决定的。")])]),s._v(" "),a("h3",{attrs:{id:"解析-调用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#解析-调用"}},[s._v("#")]),s._v(" 解析(调用)")]),s._v(" "),a("p",[s._v("解析调用，正如其名，就是 "),a("strong",[s._v("在类加载的解析阶段，就确定了方法的调用版本")]),s._v(" 。我们知道类加载的解析阶段会将一部分符号引用转化为直接引用，这一过程就叫做解析调用。因为是在程序真正运行前就确定了要调用哪一个方法，所以 "),a("strong",[s._v("解析调用能成立的前提就是：方法在程序真正运行前就有一个明确的调用版本了，并且这个调用版本不会在运行期发生改变。")])]),s._v(" "),a("p",[s._v("符合这两个要求的只有以下两类方法：")]),s._v(" "),a("ul",[a("li",[s._v("通过 "),a("code",[s._v("invokestatic")]),s._v(" 调用的方法：静态方法；")]),s._v(" "),a("li",[s._v("通过 "),a("code",[s._v("invokespecial")]),s._v(" 调用的方法：私有方法、构造器方法、父类方法；")])]),s._v(" "),a("p",[a("strong",[s._v("这两类方法根本不可能通过继承或者别的方式重写出来其他版本，也就是说，在运行前就可以确定调用版本了，十分适合在类加载阶段就解析好")]),s._v("。它们会在类加载的解析阶被解析为直接引用，即确定调用版本。")]),s._v(" "),a("h3",{attrs:{id:"分派-调用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分派-调用"}},[s._v("#")]),s._v(" 分派(调用)")]),s._v(" "),a("p",[s._v("Java是一门面向对象的程序语言，"),a("strong",[s._v("因为Java具备面向对象的3个基本特征：继承、封装 和多态")])]),s._v(" "),a("blockquote",[a("p",[a("strong",[s._v("分派调用过程将会揭示多态性特征的一些最基本的体现")]),s._v("，如“重载”和“重写”在 Java虚拟机之中是如何实现的")])]),s._v(" "),a("h4",{attrs:{id:"静态分派"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#静态分派"}},[s._v("#")]),s._v(" 静态分派")]),s._v(" "),a("blockquote",[a("p",[s._v("者先声明一点，“分派”（Dispatch）这个词本身就具有动态性，一 般不应用在静态语境之中，因此这个地方有时也被归为解析")])]),s._v(" "),a("p",[s._v("为了解释静态分派和重载（Overload），引例：")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("StaticDispatch")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("abstract")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Human")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Man")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extends")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Human")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Woman")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extends")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Human")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sayHello")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Human")]),s._v(" guy"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    \t"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Hello guy!"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sayHello")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Man")]),s._v(" man"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    \t"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Hello man!"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sayHello")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Woman")]),s._v(" woman"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    \t"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Hello woman!"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Human")]),s._v(" man "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Man")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Human")]),s._v(" woman "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Woman")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("StaticDispatch")]),s._v(" sr "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("StaticDispatch")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        sr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sayHello")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("man"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        sr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sayHello")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("woman"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* 输出：\n        Hello guy!\n        Hello guy!\n        因为是根据变量的静态类型，也就是左面的类型：Human 来判断调用哪个方法，\n        所以调用的都是 public void sayHello(Human guy)\n        */")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br")])]),a("p",[s._v("输出")]),s._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[s._v("hello,guy"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),s._v("\nhello,guy"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("代码实际上是在考验阅读者对重载的理解程度。")]),s._v(" "),a("p",[a("strong",[s._v("把上面代码中的“Human”称为变量的“静态类型”（Static Type）")]),s._v("，或者叫“外观类 型”（Apparent Type），")]),s._v(" "),a("p",[a("strong",[s._v("后面的“Man”则被称为变量的“实际类型”")]),s._v("（Actual Type）或者叫“运行时类 型”（Runtime Type）。")]),s._v(" "),a("p",[s._v("！！！这里要注意，静态类型和实际类型在程序中都可能会发生变化，")]),s._v(" "),a("p",[s._v("区别是静态类型的变化仅仅在使用时发生，变量本身的静态类型不会被改变，"),a("strong",[s._v("并且最终的静态类型是在编译期可知的")]),s._v("；"),a("strong",[s._v("而实际类 型变化的结果在运行期才可确定，编译器在编译程序的时候并不知道一个对象的实际类型是什么。")])]),s._v(" "),a("blockquote",[a("p",[s._v("举例，")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 实际类型变化")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Human")]),s._v(" human "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Random")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("nextBoolean")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Man")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Woman")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 静态类型变化")]),s._v("\nsr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sayHello")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Man")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" human"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\nsr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sayHello")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Woman")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" human"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("**对象human的实际类型是可变的，**编译期间它完全是个“薛定谔的人”，到底是Man还是Woman，必 须等到程序运行到这行的时候才能确定。")]),s._v(" "),a("p",[a("strong",[s._v("而human的静态类型是Human，"),a("strong",[s._v("也可以在使用时（如 sayHello()方法中的强制转型）临时改变这个类型")]),s._v("，但这个改变仍是在编译期是可知的")]),s._v("，两次sayHello() 方法的调用，在编译期完全可以明确转型的是Man还是Woman。")])]),s._v(" "),a("p",[s._v("根据静态类型和实际类型的概念，再回去看代码，main()里面的两次sayHello()方法调用，在方法接收者已经确定是对象“sr”的前提下，"),a("strong",[s._v("使用哪个重载版 本，就完全取决于传入参数的数量和数据类型")])]),s._v(" "),a("p",[s._v("代码中故意定义了两个静态类型相同，而实际类型 同的变量，"),a("strong",[s._v("但虚拟机（或者准确地说是编译器）在重载时是通过参数的静态类型而不是实际类型作为 判定依据的。")])]),s._v(" "),a("blockquote",[a("p",[s._v("由于静态类型在编译期可知，"),a("strong",[s._v("所以在编译阶段，Javac编译器就根据参数的静态类型决定 了会使用哪个重载版本，因此选择了sayHello(Human)作为调用目标")]),s._v("，"),a("strong",[s._v("并把这个方法的符号引用写到 main()方法里的两条invokevirtual指令的参数中")])])]),s._v(" "),a("p",[s._v("！！！"),a("strong",[s._v("所有依赖静态类型来决定方法执行版本的分派动作，都称为静态分派。静态分派的最典型应用表 现就是方法重载")]),s._v("。")]),s._v(" "),a("blockquote",[a("p",[s._v("这里很重要，记住方法重载时静态分布，"),a("strong",[s._v("也就是根据变量的静态类型决定重载的方法")])])]),s._v(" "),a("h4",{attrs:{id:"动态分派"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#动态分派"}},[s._v("#")]),s._v(" 动态分派")]),s._v(" "),a("p",[s._v("静态分派与重载(Overload)有关，动态分配则与java多态性的另外一个体现——重写(Override)有关")]),s._v(" "),a("p",[s._v("引例：")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("DynamicDispatch")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("abstract")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Human")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  \t  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("protected")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("abstract")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sayHello")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Man")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extends")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Human")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("protected")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sayHello")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        \t"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Hello man"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Woman")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extends")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Human")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("protected")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sayHello")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        \t"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Hello woman"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Human")]),s._v(" man "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Man")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Human")]),s._v(" woman "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Woman")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        man"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sayHello")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        woman"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sayHello")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        man "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" woman"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        man"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sayHello")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* 输出\n        Hello man\n        Hello woman\n        Hello woman\n        */")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br")])]),a("p",[s._v("这个输出是显然的，"),a("strong",[s._v("不过重点是，java虚拟机如何判断调用哪个方法？")])]),s._v(" "),a("p",[s._v("变量man在两次调用中还执行 了两个不同的方法。导致这个现象的原因很明显，"),a("strong",[s._v("是因为这两个变量的实际类型不同，Java虚拟机是 如何根据实际类型来分派方法执行版本的呢？")])]),s._v(" "),a("blockquote",[a("p",[s._v("使用javap命令输出这段代码的字节码")])]),s._v(" "),a("p",[s._v("分析字节码")]),s._v(" "),a("div",{staticClass:"language-txt line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-txt"}},[a("code",[s._v('public static void main(java.lang.String[]);\n    descriptor: ([Ljava/lang/String;)V\n    flags: ACC_PUBLIC, ACC_STATIC\n    Code:\n        stack=2, locals=3, args_size=1\n        0: new           #2      // class com/jvm/ch8/DynamicDispatch$Man\n        3: dup\n        4: invokespecial #3      // Method com/jvm/ch8/DynamicDispatch$Man."<init>":()V\n        7: astore_1\n        8: new           #4      // class com/jvm/ch8/DynamicDispatch$Woman\n        11: dup\n        12: invokespecial #5     // Method com/jvm/ch8/DynamicDispatch$Woman."<init>":()V\n        15: astore_2\n        16: aload_1\t\t        // 把刚创建的对象的引用压到操作数栈顶，\n        \t\t\t\t\t   // 供之后执行sayHello时确定是执行哪个对象的sayHello\n        17: invokevirtual #6    // 方法调用\n        20: aload_2             // 把刚创建的对象的引用压到操作数栈顶，\n                                // 供之后执行sayHello时确定是执行哪个对象的sayHello\n        21: invokevirtual #6    // 方法调用\n        24: aload_2\n        25: astore_1\n        26: aload_1\n        27: invokevirtual #6    // Method com/jvm/ch8/DynamicDispatch$Human.sayHello:()V\n        30: return\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br")])]),a("p",[s._v("0～15行的字节码是准备动作，"),a("strong",[s._v("作用是建立man和woman的内存空间、调用Man和Woman类型的实 例构造器，将这两个实例的引用存放在第1、2个局部变量表的变量槽中")]),s._v("，这些动作实际对应了Java源 码中的这两行：")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Human")]),s._v(" man "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Man")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Human")]),s._v(" woman "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Woman")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("16和20行的aload指令分别把刚刚创建的两个对象的引用压到栈 顶，"),a("strong",[s._v("这两个对象是将要执行的sayHello()方法的所有者，称为接收者（Receiver）；17和21行是方法调 用指令")])]),s._v(" "),a("p",[s._v("这两条指令一模一样，"),a("strong",[s._v("看来解决问题的关键还必须从invokevirtual指令本身入手")])]),s._v(" "),a("p",[s._v("根据《Java虚拟机规范》，"),a("code",[s._v("invokevirtual")]),s._v(" 指令的运行过程大致为：")]),s._v(" "),a("ul",[a("li",[s._v("去操作数栈顶取出将要执行的方法的所有者，记作 C；")]),s._v(" "),a("li",[s._v("查找此方法：\n"),a("ul",[a("li",[s._v("在 C 中查找此方法；")]),s._v(" "),a("li",[s._v("在 C 的各个父类中查找；")]),s._v(" "),a("li",[s._v("查找过程：\n"),a("ul",[a("li",[s._v("查找与常量的描述符和简单名称都相同的方法；")]),s._v(" "),a("li",[s._v("进行访问权限验证，不通过抛出：IllegalAccessError 异常；")]),s._v(" "),a("li",[s._v("通过访问权限验证则返回直接引用；")])])])])]),s._v(" "),a("li",[s._v("没找到则抛出：AbstractMethodError 异常，即该方法没被实现。")])]),s._v(" "),a("p",[s._v("正是"),a("strong",[s._v("因为invokevirtual指令执行的第一步就是在运行期确定接收者的实际类型")]),s._v("，所以两次调用中的 invokevirtual指令并不是把常量池中方法的符号引用解析到直接引用上就结束了，"),a("strong",[s._v("还会根据方法接收者 的实际类型来选择方法版本")]),s._v("，"),a("strong",[s._v("这个过程就是Java语言中方法重写的本质。")])]),s._v(" "),a("blockquote",[a("p",[s._v("我们把这种在运行期根据实 际类型确定方法执行版本的分派过程称为动态分派。")])]),s._v(" "),a("p",[s._v("注意，既然这种多态性（重写）的根源在于虚方法调用指令invokevirtual的执行逻辑,"),a("strong",[s._v("那自然我们得出的结论就只 会对方法有效，对字段是无效的，因为字段不使用这条指令。")])]),s._v(" "),a("blockquote",[a("p",[s._v("事实上，在Java里面只有虚方法存在， 字段永远不可能是虚的，换句话说，字段永远不参与多态，")])]),s._v(" "),a("p",[s._v("**哪个类的方法访问某个名字的字段时，该 名字指的就是这个类能看到的那个字段。**当子类声明了与父类同名的字段时，虽然在子类的内存中两 个字段都会存在，"),a("strong",[s._v("但是子类的字段会遮蔽父类的同名字段。")])]),s._v(" "),a("p",[s._v("举例：")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("package")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("org"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("fenixsoft"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("polymorphic")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/**\n* 字段不参与多态\n* @author zzm\n*/")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("FieldHasNoPolymorphic")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Father")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" money "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Father")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        money "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("showMeTheMoney")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("showMeTheMoney")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"I am Father, i have $"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" money"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Son")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extends")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Father")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" money "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Son")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        money "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("showMeTheMoney")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("showMeTheMoney")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"I am Son, i have $"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" money"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Father")]),s._v(" gay "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Son")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"This gay has $"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" gay"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("money"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/**\nI am Son, i have $0\nI am Son, i have $4\nThis gay has $2\n**/")]),s._v("\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br")])]),a("p",[s._v("输出两句都是“I am Son”，这是因为Son类在创建的时候，首先首先隐式调用了Father的构造函数。")]),s._v(" "),a("p",[s._v("这里主要是第一次输出比较难懂，")]),s._v(" "),a("p",[s._v("Son类在创建的时候，"),a("strong",[s._v("首先首先隐式调用了Father的构造函数")]),s._v("。Father构造函数中对showMeTheMoney()的调用是一次虚方法调用，"),a("strong",[s._v("实际执行的版本是 Son::showMeTheMoney()方法，")])]),s._v(" "),a("blockquote",[a("p",[s._v("这里是因为，我这个时候创建的对象是son这个类的实例，因此动态绑定时，绑定的是子类的方法，")])]),s._v(" "),a("p",[s._v("而这时候虽然父类的money字段已经被初始化成2了，"),a("strong",[s._v("但Son::showMeTheMoney()方法中访问的却 是子类的money字段，这时候结果自然还是0")]),s._v("，因为它要到子类的构造函数执行时才会被初始化。")]),s._v(" "),a("h4",{attrs:{id:"单分派和多分派"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#单分派和多分派"}},[s._v("#")]),s._v(" 单分派和多分派")]),s._v(" "),a("p",[s._v("除了静态分派和动态分派这种分派分类方式，还有一种根据宗量分类的方式，可以将方法分派分为单分派和多分派。")]),s._v(" "),a("blockquote",[a("p",[s._v("宗量：方法的接收者 & 方法的参数。")])]),s._v(" "),a("p",[s._v("Java 语言的静态分派属于多分派，根据 "),a("strong",[s._v("方法接收者的静态类型")]),s._v(" 和 "),a("strong",[s._v("方法参数类型")]),s._v(" 两个宗量进行选择。")]),s._v(" "),a("p",[s._v("Java 语言的动态分派属于单分派，只根据 "),a("strong",[s._v("方法接收者的实际类型")]),s._v(" 一个宗量进行选择。")]),s._v(" "),a("h3",{attrs:{id:"虚拟机动态分派的实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#虚拟机动态分派的实现"}},[s._v("#")]),s._v(" 虚拟机动态分派的实现")]),s._v(" "),a("p",[s._v("动态分派是执行非常频繁的动作，而且动态分派的方法版本选择过程需要运行时在接收者类型的 方法元数据中搜索合适的目标方法，因此，Java虚拟机实现基于执行性能的考虑，"),a("strong",[s._v("真正运行时一般不 会如此频繁地去反复搜索类型元数据。")])]),s._v(" "),a("p",[s._v("面对这种情况，"),a("strong",[s._v("一种基础而且常见的优化手段是为类型在方法 区中建立一个虚方法表（Virtual Method Table，也称为vtable，与此对应的，在invokeinterface执行时也 会用到接口方法表——Interface Method Table，简称itable）")]),s._v("，使用虚方法表索引来代替元数据查找以 提高性能[8]")]),s._v(" "),a("img",{staticStyle:{zoom:"80%"},attrs:{src:"https://typora-1309665611.cos.ap-nanjing.myqcloud.com/typora/image-20230723222029714.png"}}),s._v(" "),a("p",[s._v("！！！虚方法表中存放着各个方法的实际入口地址。"),a("strong",[s._v("如果某个方法在子类中没有被重写，那子类的虚方 法表中的地址入口和父类相同方法的地址入口是一致的，都指向父类的实现入口。如果子类中重写了 这个方法，子类虚方法表中的地址也会被替换为指向子类实现版本的入口地址。")])]),s._v(" "),a("blockquote",[a("p",[s._v("如果子类把父类的一个同名的方法重新实现了，就叫重写")])]),s._v(" "),a("h2",{attrs:{id:"动态类型语言支持"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#动态类型语言支持"}},[s._v("#")]),s._v(" 动态类型语言支持")]),s._v(" "),a("p",[a("strong",[s._v("什么是动态类型语言？")])]),s._v(" "),a("p",[a("strong",[s._v("就是类型检查的主体过程在运行期，而非编译期的编程语言。")])]),s._v(" "),a("p",[a("strong",[s._v("动/静态类型语言各自的优点？")])]),s._v(" "),a("ul",[a("li",[s._v("动态类型语言：灵活性高，开发效率高。")]),s._v(" "),a("li",[s._v("静态类型语言：编译器提供了严谨的类型检查，类型相关的问题能在编码的时候就发现。")])]),s._v(" "),a("p",[a("strong",[s._v("Java虚拟机层面提供的动态类型支持：")])]),s._v(" "),a("ul",[a("li",[a("code",[s._v("invokedynamic")]),s._v(" 指令")]),s._v(" "),a("li",[s._v("java.lang.invoke 包")])]),s._v(" "),a("h3",{attrs:{id:"java-lang-invoke-包"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#java-lang-invoke-包"}},[s._v("#")]),s._v(" java.lang.invoke 包")]),s._v(" "),a("blockquote",[a("p",[s._v("JDK7加入")])]),s._v(" "),a("p",[a("strong",[s._v("目的：")]),s._v(" 在之前的依靠符号引用确定调用的目标方法的方式之外，提供了 MethodHandle（方法句柄） 这种动态确定目标方法的调用机制。")]),s._v(" "),a("h4",{attrs:{id:"methodhandle-的使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#methodhandle-的使用"}},[s._v("#")]),s._v(" MethodHandle 的使用")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("获得方法的参数描述，第一个参数是方法返回值的类型，之后的参数是方法的入参")])]),s._v(" "),a("li",[a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v(" MethodType mt = MethodType.methodType(void.class, String.class);\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])])]),s._v(" "),a("li",[a("p",[s._v("获取一个普通方法的调用：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v(' /**\n  * 需要的参数：\n  * 1. 被调用方法所属类的类对象\n  * 2. 方法名\n  * 3. MethodType 对象 mt\n  * 4. 调用该方法的对象\n  */\n MethodHandle.lookup().findVirtual(receiver.getClass(), "方法名", mt).bindTo(receiver);\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])])]),s._v(" "),a("li",[a("p",[s._v("获取一个父类方法的调用：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v(' /**\n  * 需要的参数：\n  * 1. 被调用方法所属类的类对象\n  * 2. 方法名\n  * 3. MethodType 对象 mt\n  * 4. 调用这个方法的类的类对象\n  */\n MethodHandle.lookup().findSpecial(GrandFather.class, "方法名", mt, getClass());\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])])]),s._v(" "),a("li",[a("p",[s._v("通过 "),a("code",[s._v("MethodHandle mh")]),s._v(" 执行方法：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v(' /* \n invoke() 和 invokeExact() 的区别：\n - invokeExact() 要求更严格，要求严格的类型匹配，方法的返回值类型也在考虑范围之内\n - invoke() 允许更加松散的调用方式\n */\n mh.invoke("Hello world");\n mh.invokeExact("Hello world");\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])])])]),s._v(" "),a("p",[s._v("使用示例：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('public class MethodHandleTest {\n    static class ClassA {\n        public void println(String s) {\n            System.out.println(s);\n        }\n    }\n\n    public static void main(String[] args) throws Throwable {\n        /*\n        obj的静态类型是Object，是没有println方法的，所以尽管obj的实际类型都包含println方法，\n        它还是不能调用println方法\n         */\n        Object obj = System.currentTimeMillis() % 2 == 0 ? System.out : new ClassA();\n        /*\n        invoke()和invokeExact()的区别：\n        - invokeExact()要求更严格，要求严格的类型匹配，方法的返回值类型也在考虑范围之内\n        - invoke()允许更加松散的调用方式\n         */\n        getPrintlnMH(obj).invoke("Hello world");\n        getPrintlnMH(obj).invokeExact("Hello world");\n    }\n\n    private static MethodHandle getPrintlnMH(Object receiver) \n        \tthrows NoSuchMethodException, IllegalAccessException {\n        /* MethodType代表方法类型，第一个参数是方法返回值的类型，之后的参数是方法的入参 */\n        MethodType mt = MethodType.methodType(void.class, String.class);\n        /*\n        lookup()方法来自于MethodHandles.lookup，\n        这句的作用是在指定类中查找符合给定的方法名称、方法类型，并且符合调用权限的方法句柄\n        */\n        /*\n        因为这里调用的是一个虚方法，按照Java语言的规则，方法第一个参数是隐式的，代表该方法的接收者，\n        也即是this指向的对象，这个参数以前是放在参数列表中进行传递，现在提供了bindTo()方法来完成这件事情\n        */\n        return MethodHandles.lookup().findVirtual(receiver.getClass(), "println", mt).bindTo(receiver);\n    }\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br")])]),a("p",[a("strong",[s._v("MethodHandles.lookup 中 3 个方法对应的字节码指令：")])]),s._v(" "),a("ul",[a("li",[a("code",[s._v("findStatic()")]),s._v("：对应 invokestatic")]),s._v(" "),a("li",[a("code",[s._v("findVirtual()")]),s._v("：对应 invokevirtual & invokeinterface")]),s._v(" "),a("li",[a("code",[s._v("findSpecial()")]),s._v("：对应 invokespecial")])]),s._v(" "),a("h4",{attrs:{id:"methodhandle-和-reflection-的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#methodhandle-和-reflection-的区别"}},[s._v("#")]),s._v(" MethodHandle 和 Reflection 的区别")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("本质区别：")]),s._v(" "),a("p",[s._v("它们都在模拟方法调用，但是")]),s._v(" "),a("ul",[a("li",[s._v("Reflection 模拟的是 Java 代码层次的调用；")]),s._v(" "),a("li",[s._v("MethodHandle 模拟的是字节码层次的调用。")])])]),s._v(" "),a("li",[a("p",[s._v("包含信息的区别：")]),s._v(" "),a("ul",[a("li",[s._v("Reflection 的 Method 对象包含的信息多，包括：方法签名、方法描述符、方法的各种属性的Java端表达方式、方法执行权限等；")]),s._v(" "),a("li",[s._v("MethodHandle 对象包含的信息比较少，既包含与执行该方法相关的信息。")])])])]),s._v(" "),a("h3",{attrs:{id:"invokedynamic-指令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#invokedynamic-指令"}},[s._v("#")]),s._v(" "),a("code",[s._v("invokedynamic")]),s._v(" 指令")]),s._v(" "),a("blockquote",[a("p",[s._v("JDK 7为了更好地支持动态类型语言，引入了第五条方法调用的字节码指令 invokedynamic，")]),s._v(" "),a("p",[s._v("某种意义上可以说invokedynamic指令与MethodHandle机制的作用是一样的，都是为了解决原有4 条“invoke*”指令方法分派规则完全固化在虚拟机之中的问题，把如何查找目标方法的决定权从虚拟机 转嫁到具体用户代码之中，让用户（广义的用户，包含其他程序语言的设计者）有更高的自由度。")])]),s._v(" "),a("p",[s._v("Lambda 表达式就是通过 "),a("code",[s._v("invokedynamic")]),s._v(" 指令实现的。")]),s._v(" "),a("h2",{attrs:{id:"基于栈的字节码解释执行引擎"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基于栈的字节码解释执行引擎"}},[s._v("#")]),s._v(" 基于栈的字节码解释执行引擎")]),s._v(" "),a("blockquote",[a("p",[s._v("这个栈，就是栈帧中的操作数栈。")])]),s._v(" "),a("p",[a("strong",[s._v("虚拟机是如何执行方法里面的字节码指令的？")])]),s._v(" "),a("p",[s._v("许多Java虚拟机的执行引擎在执 行Java代码的时候都有解释执行（通过解释器执行）和编译执行（通过即时编译器产生本地代码执 行）两种选择，不同的虚拟机实现方式不一样，"),a("strong",[s._v("因此介绍的是概念模型下的Java虚拟机解释执行字节码时，其执行引擎 是如何工作的")])]),s._v(" "),a("h3",{attrs:{id:"解释执行"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#解释执行"}},[s._v("#")]),s._v(" 解释执行")]),s._v(" "),a("p",[s._v("大部分的程序代码转换成物理机的目标代码或虚拟机能执行的指令集 之前，都需要经过图中的各个步骤")]),s._v(" "),a("img",{staticStyle:{zoom:"70%"},attrs:{src:"https://typora-1309665611.cos.ap-nanjing.myqcloud.com/typora/image-20230723223710714.png"}}),s._v(" "),a("p",[s._v("对于一门具体语言的实现来说：")]),s._v(" "),a("ul",[a("li",[s._v("词法、语法分析以至后面的优化器和目标代码生成器都可以选择独立于执行引擎，形成一个完整意义 的编译器去实现，这类代表是C/C++语言。")]),s._v(" "),a("li",[s._v("也可以选择把其中一部分步骤（如生成抽象语法树之前的 步骤）实现为一个半独立的编译器，这类代表是Java语言")])]),s._v(" "),a("p",[s._v("在Java语言中**，Javac编译器完成了程序代码经过词法分析、语法分析到抽象语法树，再遍历语法 树生成线性的字节码指令流的过程**。")]),s._v(" "),a("p",[s._v("因为这一部分动作是在Java虚拟机之外进行的，"),a("strong",[s._v("而解释器在虚拟 机的内部，所以Java程序的编译就是半独立的实现。")])]),s._v(" "),a("h3",{attrs:{id:"基于栈的指令集与基于寄存器的指令集"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基于栈的指令集与基于寄存器的指令集"}},[s._v("#")]),s._v(" 基于栈的指令集与基于寄存器的指令集")]),s._v(" "),a("p",[a("strong",[s._v("Javac编译器输出的字节码指令流，基本上是一种基于栈的指令集架构（Instruction Set Architecture，ISA")]),s._v("），字节码指令流里面的指令大部分都是零地址指令，它们依赖操作数栈进行工作。")]),s._v(" "),a("blockquote",[a("p",[s._v("汇编指令一般是基于寄存器指令集架构（比如x86）")])]),s._v(" "),a("p",[s._v("基于栈的指令集语言和基于寄存器或内存的指令集语言（比如x86）的区别？")]),s._v(" "),a("p",[s._v("例子，分别使用这两种指令集去计算“1+1”的结果，基于栈的指令集会是这样子的：")]),s._v(" "),a("div",{staticClass:"language-txt line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-txt"}},[a("code",[s._v("iconst_1\niconst_1\niadd\nistore_0\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("两条iconst_1指令连续把两个常量1压入栈后，iadd指令把栈顶的两个值出栈、相加，然后把结果 放回栈顶，最后istore_0把栈顶的值放到局部变量表的第0个变量槽中。这种指令流中的指令通常都是不带参数的，"),a("strong",[s._v("使用操作数栈中的数据作为指令的运算输入，指令的运算结果也存储在操作数栈之中。")])]),s._v(" "),a("p",[s._v("而如果用基于寄存器的指令集，那程序可能会是这个样子：")]),s._v(" "),a("div",{staticClass:"language-txt line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-txt"}},[a("code",[s._v("mov eax, 1\nadd eax, 1\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("mov指令把EAX寄存器的值设为1，然后add指令再把这个值加1，结果就保存在EAX寄存器里面。 这种二地址指令是x86指令集中的主流，每个指令都包含两个单独的输入参数，依赖于寄存器来访问和 存储数据")]),s._v(" "),a("p",[s._v("而基于栈架构的这个指令集优点就是可移植，不依赖于硬件，这也是为什么java可以到处运行")]),s._v(" "),a("p",[s._v("栈架构指令集的主要缺点是理论上执行速度相对来说会稍慢一些")]),s._v(" "),a("blockquote",[a("p",[s._v("在解释执行时，栈架构指令集的代码虽然紧凑，但是完成相同功能所需的指令数量一般会比寄存 器架构来得更多，因为出栈、入栈操作本身就产生了相当大量的指令。"),a("strong",[s._v("更重要的是栈实现在内存中， 频繁的栈访问也就意味着频繁的内存访问，")])]),s._v(" "),a("p",[a("strong",[s._v("寄存器在处理器中，肯定比访问内存快喽")])])]),s._v(" "),a("h2",{attrs:{id:"基于栈的解释器执行过程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基于栈的解释器执行过程"}},[s._v("#")]),s._v(" 基于栈的解释器执行过程")]),s._v(" "),a("p",[s._v("以四则运算来展示虚拟机里字节码是如何执行：")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("calc")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("200")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" c "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("300")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("a "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("blockquote",[a("p",[s._v("使用javap命令看看它的字节码指令")])]),s._v(" "),a("div",{staticClass:"language-txt line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-txt"}},[a("code",[s._v("public int calc();\n\tCode:\n\t\tStack=2, Locals=4, Args_size=1\n        0: bipush 100\n        2: istore_1\n        3: sipush 200\n        6: istore_2\n        7: sipush 300\n        10: istore_3\n        11: iload_1\n        12: iload_2\n        13: iadd\n        14: iload_3\n        15: imul\n        16: ireturn\n}\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br")])]),a("p",[a("strong",[s._v("javap提示这段代码需要深度为2的操作数栈和4个变量槽的局部变量空间")])]),s._v(" "),a("p",[s._v("上"),a("strong",[s._v("面的执行过程仅仅是一种概念模型，虚拟机最终会对执行过程做出一系列优化来提高 性能，实际的运作过程并不会完全符合概念模型的描述")]),s._v("。更确切地说，实际情况会和上面描述的概念 模型差距非常大，"),a("strong",[s._v("差距产生的根本原因是虚拟机中解析器和即时编译器都会对输入的字节码进行优 化，即使解释器中也不是按照字节码指令去逐条执行的")])]),s._v(" "),a("blockquote",[a("p",[s._v("例如在HotSpot虚拟机中，就有很多 以“fast_”开头的非标准字节码指令用于合并、替换输入的字节码以提升解释执行性能")])])],1)}),[],!1,null,null,null);a.default=e.exports}}]);