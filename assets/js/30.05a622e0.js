(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{359:function(s,a,t){"use strict";t.r(a);var n=t(4),e=Object(n.a)({},(function(){var s=this,a=s._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"一-jena安装"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一-jena安装"}},[s._v("#")]),s._v(" 一 jena安装")]),s._v(" "),a("p",[s._v("首先根据jdk的版本不同需要下载不同版本的jena，jdk8推荐jena3.6，jena4则是要求使用jdk11以上。")]),s._v(" "),a("p",[s._v("jena下载地址")]),s._v(" "),a("p",[s._v("https://mirrors.tuna.tsinghua.edu.cn/apache/jena/binaries/")]),s._v(" "),a("p",[s._v("下载解压后，添加相应等等环境变量。")]),s._v(" "),a("h2",{attrs:{id:"_1-本体"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-本体"}},[s._v("#")]),s._v(" 1.本体")]),s._v(" "),a("p",[a("strong",[s._v("本体概念")]),s._v("\n本体（Ontology）首先是哲学上提出来的，简单来说就是一种概念，如人这个概念集合，它是一种抽象集合用来表达世界上的具体的实际的物体，而在人工只能领域上我们主要将本体论的观念用在知识表达上，即借由本体论中的基本元素：概念及概念间的关连，作为描述真实世界的知识模型。当我们输入鱼这个名词，我们知道鱼是一种动物且居住在水里。")]),s._v(" "),a("p",[a("strong",[s._v("本体语言")]),s._v("\n本体用来描述特定领域中的相关知识，主要包括该领域中的概念和这些概念直接的关系，本体描述语言不同，知识描述的性能也各有区别。基于Web标准的本体描述语言包括RDF，RDF(S)，OIL，DAML，和OWL等，本实验中采用OWL语言构建本体。")]),s._v(" "),a("p",[a("strong",[s._v("本体要素")]),s._v("\nOWL的本体构成要素包括：")]),s._v(" "),a("ol",[a("li",[s._v("类：类与面向对象中的类概念相似，是指本体中的一些实例集合，这些实例具有共同的抽象属性。本体中的类也有子类、父类继承关系，继承关系可以应用于推理机制。")]),s._v(" "),a("li",[s._v("属性：属性包括数据属性和对象属性，其中对象属性又可以称为实例之间的关系。数据属性是指个体的属性是数据值，例如中国银行的公司地址；对象属性是指个体的属性是另一个对象，例如贵州茅台的董事长。")]),s._v(" "),a("li",[s._v("实例：实例是指类的实例化个体，个体是领域中我们要扑捉的各个对象，例如三一重工、贵州茅台都是“公司”类的实例，梁稳根、袁仁国则都是“董事长”类的实例。")])]),s._v(" "),a("p",[a("strong",[s._v("本体构建")]),s._v("\n在本体构建时，比较著名的软件有Protégé等，Protégé工具的特点是独立于特定的语言，可以导入和导出多种基于Web的本体描述语言格式(如XML，RDF(S)，OWL等)，支持本体开发生命周期中的大多数活动，并且因为都是基于组件的结构，很容易通过添加新的模块来提供更多的功能，具有良好的可扩展性。\n但protégé最大的缺陷在于不能批量导入数据，构建大规模本体费时费力，手工输入错误率比较高，效率较低。当数据非常大时使用Protégé会非常的耗时耗力，靠人工创建所有本体是不现实的。因此用程序操作本体是很必要的。Jena是惠普公司开发的一套操作本体的程序。")]),s._v(" "),a("h2",{attrs:{id:"_2-jena"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-jena"}},[s._v("#")]),s._v(" 2.jena")]),s._v(" "),a("p",[a("strong",[s._v("Jena框架")]),s._v("\nJena框架主要包括:")]),s._v(" "),a("ul",[a("li",[s._v("以RDF/XML、三元组形式读写RDF")]),s._v(" "),a("li",[s._v("RDFS，OWL，DAML+OIL等本体的操作")]),s._v(" "),a("li",[s._v("利用数据库保存数据")]),s._v(" "),a("li",[s._v("查询模型")]),s._v(" "),a("li",[s._v("基于规则的推理")])]),s._v(" "),a("p",[a("strong",[s._v("RDF操作")]),s._v("\nJena是一个Java API，可用于创建和操作RDF图。")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" personURI    "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"http://somewhere/JohnSmith"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" fullName     "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"John Smith"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Model")]),s._v(" model "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ModelFactory")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("createDefaultModel")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//创建一个空的模型")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Resource")]),s._v(" johnSmith "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" model"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("createResource")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("personURI"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//创建资源")]),s._v("\njohnSmith"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("addProperty")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("VCARD")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("FN")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" fullName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//添加fullName属性")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("如下图所示，通过上述操作，可以生成一个RDF资源，并用统一资源标识符（URI）标识，在本例中用“http：//…/JohnSmith”来表示。资源有属性，在本例中生成了一个属性名为fullName的属性。\n"),a("img",{attrs:{src:"https://img-blog.csdnimg.cn/20190122150743673.png",alt:"在这里插入图片描述"}})]),s._v(" "),a("p",[a("strong",[s._v("本体操作")]),s._v("\n本体模型（OntModel）是对Jena RDF模型的扩展，提供了处理本体数据的功能。使用Jena处理本体首先就是要建立一个本体模型，之后就能够通过本体模型中所定义的方法操作模型。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("OntModel ontModel = ModelFactory.createOntologyModel();\t//创建本体模型\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("下面的语句创建了一个使用DAML语言内存本体模型。直观地讲，内存模型就是只在程序运行时存在的模型，它没有将数据写回磁盘文件或者数据库表。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("OntModel ontModel = ModelFactory.createOntologyModel( OntModelSpec.DAML_MEM );\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("我们所使用的本体是从OWL文件获得的，也就是说，是从磁盘读取的。读取的方法是调用Jena OntoModel提供的Read方法。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('ontModel.read("file:D:/temp/Creatrue/Creature.owl");\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("下面通过一个例子展示如何对本体进行各种操作。\n定义一个类作为模型中Animal类的等等价类，并添加注释。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('OntClass cls = ontModel.createClass(":DongwuClass");\ncls.addComment("the EquivalentClass of Animal...", "EN");\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("通过完整的URI取得模型中的Animal类。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('OntClass oc = ontModel.\ngetOntClass("http://www.owl-ontologies.com/marine.owl#Animal");\noc.addEquivalentClass(cls);\t // 将先前定义的类添加为Animal的等价类\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("迭代显示模型中的类，在迭代过程中完成各种操作。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('for (Iterator i = ontModel.listClasses(); i.hasNext();) {\nOntClass c = (OntClass) i.next();\t // 返回类型强制转换\nif (!c.isAnon()) { \t// 如果不是匿名类，则打印类的名字\nSystem.out.print("Class");\n// 获取类的URI并输出，在输出时对URI做了简化（将命名空间前缀省略）\nSystem.out.println(c.getModel().getGraph().\ngetPrefixMapping().shortForm(c.getURI()));\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[a("strong",[s._v("本体持久化到数据库")]),s._v("\n本体存储在OWL或RDF文件中，在对本体进行操作时没有使用数据库进行操作方便，因此可以将本体持久化到数据库中。具体的流程是将本体从OWL文件中读出，建立一个数据库的连接，将Model存入数据库。操作如下：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("IDBConnection con = getConnection(url, user, pwd, db);\nClass.forName(driver);\t//创建数据库连接\nString path = “your owl file path”;\t//owl文件路径\ncreateModel(con, “model name”, path);\t//创建模型连接到数据库\ncon.close();\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[a("strong",[s._v("本体查询")]),s._v("\nJena提供了ARQ查询引擎，它实现SPARQL查询语言和RDQL，从而支持对模型的查询。另外，查询引擎与关系数据库相关联，这使得查询存储在关系数据库中的本体时能够达到更高的效率。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('SELECT ?subject ?o ?object \nWHERE { ?subject  <http://www.w3.org/2001/vcard-rdf/3.0#FN>  "John Smith" }\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("如上所示，”?subject”表示的是三元组的head，“？O”表示的是relation，“？object”表示的是三元组的tail。通过上述sqarql语句可以查询全名为John Smith的人是谁。")]),s._v(" "),a("h2",{attrs:{id:"_3-jena推理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-jena推理"}},[s._v("#")]),s._v(" 3.jena推理")]),s._v(" "),a("p",[a("strong",[s._v("本体推理规则库")]),s._v("\n本体的推理规则库是由一条条规则组成的。每条规则由主体（body）和头(head)组成，一条规则可以有一个主体和一个头，例如规则：[rule1:(?a fa:hasHusband ?b)(?a fa:isMotherOf ?c)->(?b fa:isFatherOf ?c)]，其中规则的主体为：?a @hasHusband ?b，?a @isMotherOf ?c，头为：?b @isFatherOf ?c，也就是说有所有的主体可以推出头。?a @hasHusband ?b，?a @isMotherOf ?c，?b @isFatherOf ?c三者有一个称谓：ClauseEntry。")]),s._v(" "),a("p",[a("strong",[s._v("Jena推理支持")]),s._v("\nJena支持基于规则的简单推理，其推理机制支持将推理器(inference reasoners)导入Jena，创建模型时将推理器与模型关联以实现推理。\n应用程序通常使用将ModelFactory 数据集与某个推理器相关联来创建新模型来访问推理机制。对创建的模型的查询不仅会返回原始数据中存在的那些语句，还会返回使用规则或由推理器实现的其他推理机制从数据派生的其他语句。")]),s._v(" "),a("p",[a("strong",[s._v("Jena推理实现")]),s._v("\n首先我们连接数据库，获取推理的本体。")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Class")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("forName")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("strDriver"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("IDBConnection")]),s._v(" conn "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("getConnection")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("strURL"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" strUser"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" strPassWord"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("strDB"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("OntModel")]),s._v(" model "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("getModelFromRDB")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("conn"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("MODLE_NAME")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("然后创建一个推理机。")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" file"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("RULE_URL")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v("“"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("rule”"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//推理规则库")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Reasoner")]),s._v(" reasoner"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("GenericRuleReasoner")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Rule")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("rulesFromURL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("file"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//创建推理机")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("然后我们创建一个推理的本体模型，其中"),a("code",[s._v("InfModel")]),s._v("是对常规Model的扩展，支持任何相关的推理能力。")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("InfModel")]),s._v(" infmodel"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ModelFactory")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("createInfModel")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("reasoner"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" model"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" \n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("最后执行查询语句，程序将会首先查询不经过推理的结果，然后在根据推理规则库进行推理查询")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("QueryExecution")]),s._v(" qe "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("QueryExecutionFactory")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("create")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("query"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" infmodel"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//查询")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])])])}),[],!1,null,null,null);a.default=e.exports}}]);