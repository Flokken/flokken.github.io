(window.webpackJsonp=window.webpackJsonp||[]).push([[314],{643:function(t,s,a){"use strict";a.r(s);var n=a(4),r=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"java字符串"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#java字符串"}},[t._v("#")]),t._v(" java字符串")]),t._v(" "),s("p",[t._v("java中用String表示字符串。"),s("strong",[t._v("String 类在 java.lang 包下，所以使用的时候不需要导包")])]),t._v(" "),s("p",[t._v("特点")]),t._v(" "),s("ul",[s("li",[t._v('字符串的内容是不会改变的，比如String a="apple",那么我们无法修改apple。就算'),s("code",[t._v('a="banana"')]),t._v(',这样也只能修改了地址，并不会影响到"apple"本身。')]),t._v(" "),s("li",[t._v("所以字符串没有remove，reverse，add/append这些方法。但是有修改字符串的需求，那么我们就要用到StringBuiler()")])]),t._v(" "),s("h3",{attrs:{id:"string"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#string"}},[t._v("#")]),t._v(" String")]),t._v(" "),s("h4",{attrs:{id:"常见名词"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#常见名词"}},[t._v("#")]),t._v(" 常见名词")]),t._v(" "),s("p",[s("strong",[t._v("字母异位词")]),t._v("：也就是重排。重排的特点是单词排序后显然是相同的")]),t._v(" "),s("p",[t._v("单射，满射和双射：https://leetcode.cn/problems/isomorphic-strings/solutions/1645867/by-jyd-i4wt")]),t._v(" "),s("p",[s("strong",[t._v("子串，子序列：")])]),t._v(" "),s("p",[t._v("无论"),s("strong",[t._v("子序列，子串，都是顺序有关的")]),t._v("，也就是不能对"),s("mjx-container",{staticClass:"MathJax",attrs:{jax:"CHTML"}},[s("mjx-math",{staticClass:"MJX-TEX"},[s("mjx-mi",{staticClass:"mjx-i"},[s("mjx-c",{attrs:{c:"s"}})],1)],1)],1),t._v("重新排序")],1),t._v(" "),s("ul",[s("li",[t._v("子串：下标连续\n"),s("ul",[s("li",[t._v('举例：p="abc"')])])]),t._v(" "),s("li",[t._v("子序列，下标可以不连续\n"),s("ul",[s("li",[t._v('举例：p="abd"')])])])]),t._v(" "),s("h4",{attrs:{id:"常用方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#常用方法"}},[t._v("#")]),t._v(" 常用方法")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("方法名")]),t._v(" "),s("th",[t._v("说明")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("int length()")]),t._v(" "),s("td",[t._v("返回字符串长度")])]),t._v(" "),s("tr",[s("td",[t._v("byte[] getBytes()")]),t._v(" "),s("td",[t._v("转换字符串内容为byte[]数组，可作为String构造方法参数")])]),t._v(" "),s("tr",[s("td",[t._v("char[] toCharArray()")]),t._v(" "),s("td",[t._v("转换字符串内容为char[]数组，可作为String构造方法参数")])]),t._v(" "),s("tr",[s("td",[s("strong",[t._v("boolean equals(str1,str2)")])]),t._v(" "),s("td",[t._v("比较"),s("strong",[t._v("字符串内容")]),t._v("是否相等并返回，返回值为 "),s("strong",[t._v("boolean")]),t._v(" 类型")])]),t._v(" "),s("tr",[s("td",[s("strong",[t._v("boolean contains(CharSequence str)")])]),t._v(" "),s("td",[t._v("判断字符串是否在包含了str，也就是"),s("strong",[t._v("str是不是调用该方法字符串的子串")])])]),t._v(" "),s("tr",[s("td",[s("strong",[t._v("char charAt(int index)")])]),t._v(" "),s("td",[t._v("用于返回字符串指定位置的字符，返回值为 "),s("strong",[t._v("char")]),t._v(" 类型，参数为 "),s("strong",[t._v("int")]),t._v(" 类型")])]),t._v(" "),s("tr",[s("td",[t._v("String trim()")]),t._v(" "),s("td",[t._v("返回去掉前导和尾随空白的字符串，返回值为 "),s("strong",[t._v("String")]),t._v(" 类型")])]),t._v(" "),s("tr",[s("td",[t._v("String toUpperCase()与String toLowerCase()")]),t._v(" "),s("td",[t._v("返回字符串的大写形式或者小写形式")])]),t._v(" "),s("tr",[s("td",[s("strong",[t._v("String[] split(String regex)")])]),t._v(" "),s("td",[t._v("参数regex为正则表达式（比如空格），以regex所表示的字符串为分隔符，将字符串拆分成字符串数组")])]),t._v(" "),s("tr",[s("td",[s("strong",[t._v("String substring(.....)")])]),t._v(" "),s("td",[t._v("返回子串，有两种重载，详见下面")])]),t._v(" "),s("tr",[s("td",[t._v("boolean isEmpty()")]),t._v(" "),s("td",[t._v("判断字符串是否为空，返回值为 "),s("strong",[t._v("boolean")]),t._v(" 类型，查看该方法的源码可知字符串的 length 为0则为空")])]),t._v(" "),s("tr",[s("td",[s("strong",[t._v("int  compareTo(String str)")])]),t._v(" "),s("td",[t._v("比较调用字符串和str的字典序，相同则返回0；  小于str返回负数；大于str返回正数；  "),s("strong",[t._v("空字符串的字典序最小！")])])])])]),t._v(" "),s("p",[t._v("注意：")]),t._v(" "),s("p",[t._v("1 isEmpty() 方法：判断字符串是否为空")]),t._v(" "),s("p",[t._v("，返回值为 boolean 类型，查看该方法的源码可知字符串的 length 为0则为空")]),t._v(" "),s("p",[t._v("2.substring，注意返回范围是左闭右开的")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("substring(int beginIndex, int endIndex) 方法："),s("strong",[t._v("返回字符串中从下标 beginIndex(包括) 开始到 endIndex(不包括) 结束的子字符串(左闭右开)")]),t._v("，返回值为 String 类型，参数为 int 类型")]),t._v(" "),s("ul",[s("li",[t._v("如果"),s("code",[t._v("endIndex")]),t._v("大于字符串的"),s("code",[t._v("lenght()")]),t._v("，会抛出异常")])])]),t._v(" "),s("li",[s("p",[t._v("substring(int beginIndex) 方法："),s("strong",[t._v("返回字符串中从下标 beginIndex(包括) 开始到字符串结尾的子字符串")]),t._v("，返回值为 String 类型，参数为 int 类型")])]),t._v(" "),s("li",[s("p",[t._v("举例，  substring(1,4),实际上截取[1,3],如果所以j可以等于string.length(),有时候这很有用")])])]),t._v(" "),s("p",[t._v("3.split，注意这里的字符串regex，是字符串，所以应该是"),s("code",[t._v('""')]),t._v(",而不是"),s("code",[t._v("''")])]),t._v(" "),s("p",[t._v("4."),s("strong",[t._v("compareTo")]),t._v("方法，"),s("strong",[t._v("空字符串的字典序比任意字符串都小（除了空字符串）")]),t._v("，这里谨记！！！")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[t._v("  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Solution")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n          "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" s"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n          "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("compareTo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n          "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("compareTo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//-1 ")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//0")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br")])]),s("h3",{attrs:{id:"stringbuilder"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#stringbuilder"}},[t._v("#")]),t._v(" StringBuilder")]),t._v(" "),s("p",[s("strong",[t._v("StringBuilder 可以看成是一个容器，创建之后里面的内容是可变的。")])]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("StringBuilder底层是一个可变长度的char []数组,这点很重要。知道这一点才能理解其方法api")])])]),t._v(" "),s("p",[s("strong",[t._v("初始化：")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://typora-1309665611.cos.ap-nanjing.myqcloud.com/typora/image-20240121171019147.png",alt:"image-20240121171019147"}})]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" s"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"apple"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("StringBuilder")]),t._v(" tmp "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("StringBuilder")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//用字符串初始化")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//tmp 实际上就是['a','p','p','l','e'];")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("StringBuilder")]),t._v(" tmp "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("StringBuilder")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//创建指定大小的StrigBuilder")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("p",[s("strong",[t._v("常用方法")])]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("方法名")]),t._v(" "),s("th",[t._v("说明")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("StringBuilder append("),s("strong",[t._v("char[]或者一个char或者String或者任意类型")]),t._v(")")]),t._v(" "),s("td",[t._v("添加数据，并返回对象本身，这里的"),s("strong",[t._v("数据可以是任意类型，会自动转换为char")])])]),t._v(" "),s("tr",[s("td",[t._v("StringBuilder reverse()")]),t._v(" "),s("td",[t._v("反转容器中内容，每一位是一个char")])]),t._v(" "),s("tr",[s("td",[t._v("int length()")]),t._v(" "),s("td",[t._v("返回长度（字符个数）")])]),t._v(" "),s("tr",[s("td",[t._v("String toString()")]),t._v(" "),s("td",[t._v("通过toString()可以把StringBuilder转换成String")])]),t._v(" "),s("tr",[s("td",[t._v("StringBuilde  delete(int start,int end)")]),t._v(" "),s("td",[t._v("删除此序列的子字符串中的字符(start到end的char)。")])]),t._v(" "),s("tr",[s("td",[t._v("StringBuilde  deleteCharAt(int index)")]),t._v(" "),s("td",[t._v("删除这个序列中的指定位置   char")])]),t._v(" "),s("tr",[s("td",[t._v("StringBuilde  replace(int start,  int end, String str)")]),t._v(" "),s("td",[t._v("用指定的String中的字符替换此序列的子字符串中的 String")])]),t._v(" "),s("tr",[s("td",[t._v("void setCharAt(int index,  char  c)")]),t._v(" "),s("td",[t._v("替换指定位置的字符")])])])]),t._v(" "),s("h4",{attrs:{id:"string和stringbuilder-互转"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#string和stringbuilder-互转"}},[t._v("#")]),t._v(" String和StringBuilder()互转")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//String转StringBuilder")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" s"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"apple"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("StringBuilder")]),t._v(" ss "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("StringBuilder")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//直接调用构造函数即可")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//StringBuilder转String")]),t._v("\nss"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br")])]),s("h3",{attrs:{id:"字符串数组"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#字符串数组"}},[t._v("#")]),t._v(" 字符串数组")]),t._v(" "),s("p",[t._v("我们很多时候为了方便操作，会将字符串转换为字符串数组再来操作（特别是输入只包括大小写字符和字符数字这些简单的情况）。")]),t._v(" "),s("h3",{attrs:{id:"容易出错的坑"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#容易出错的坑"}},[t._v("#")]),t._v(" 容易出错的坑")]),t._v(" "),s("p",[t._v("1.==和equals（犯过好几次了，谨记！）")]),t._v(" "),s("p",[t._v("java中，==运算符可以用来判断基本数据类型的变量是否相等，但是对于引用类型的变量（"),s("strong",[t._v("比如字符串")]),t._v("），比较的是他们的地址。")]),t._v(" "),s("p",[t._v("所以对于引用类型不能用==，要用其引用类型提供的"),s("code",[t._v("equals")]),t._v("方法。")]),t._v(" "),s("blockquote",[s("p",[t._v("所以我们新建一个类，如果要比较这个类的对象也要自己重写equals方法。因为默认的equals就是用==直接比较，这肯定是不对的")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("equals")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])])]),t._v(" "),s("h2",{attrs:{id:"匹配问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#匹配问题"}},[t._v("#")]),t._v(" 匹配问题")]),t._v(" "),s("h3",{attrs:{id:"kmp算法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#kmp算法"}},[t._v("#")]),t._v(" KMP算法")]),t._v(" "),s("p",[t._v("参考")]),t._v(" "),s("blockquote",[s("p",[s("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/83334559",target:"_blank",rel:"noopener noreferrer"}},[t._v("KMP 算法详解"),s("OutboundLink")],1)]),t._v(" "),s("p",[t._v("建议读"),s("a",{attrs:{href:"https://www.zhihu.com/column/labuladong",target:"_blank",rel:"noopener noreferrer"}},[t._v("labuladong的算法专栏"),s("OutboundLink")],1)]),t._v(" "),s("p",[t._v("专门的刷题书，很不错https://labuladong.github.io/algo/di-yi-zhan-da78c/shou-ba-sh-8f30d/shuang-zhi-0f7cc/")])]),t._v(" "),s("h2",{attrs:{id:"常用方法-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#常用方法-2"}},[t._v("#")]),t._v(" 常用方法")]),t._v(" "),s("p",[t._v("1."),s("strong",[t._v("ascii码判断字母，数字，以及之间的转换")])]),t._v(" "),s("blockquote",[s("p",[t._v("例题："),s("a",{attrs:{href:"https://leetcode.cn/problems/valid-palindrome/",target:"_blank",rel:"noopener noreferrer"}},[t._v("验证回文串"),s("OutboundLink")],1)])]),t._v(" "),s("p",[t._v("java中的char类型在做>=,+,-运算时，会以他们的ascii码进行计算，我们可以利用这一点完成转换。")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Character")]),t._v(" ch "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" s"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("charAt")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ch"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),s("span",{pre:!0,attrs:{class:"token char"}},[t._v("'a'")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v("ch"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),s("span",{pre:!0,attrs:{class:"token char"}},[t._v("'z'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//小写字母")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ch"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),s("span",{pre:!0,attrs:{class:"token char"}},[t._v("'A'")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v("ch"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),s("span",{pre:!0,attrs:{class:"token char"}},[t._v("'Z'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//大写字母")]),t._v("\n "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ch"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token char"}},[t._v("'A'")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token char"}},[t._v("'a'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//转换大小写")]),t._v("\n "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ch"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),s("span",{pre:!0,attrs:{class:"token char"}},[t._v("'0'")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v("ch"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),s("span",{pre:!0,attrs:{class:"token char"}},[t._v("'9'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//数字")]),t._v("\n "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br")])]),s("p",[t._v("java相关的api")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("使用Character.toLowerCase()方法：这是Java标准库提供的方法，可以将任何大写字符转换为小写字符。")]),t._v(" "),s("div",{staticClass:"language-cpp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[t._v("   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" lowerCaseChar "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Character"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("toLowerCase")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token char"}},[t._v("'A'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回 'a'")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])])]),t._v(" "),s("li",[s("p",[t._v("使用String.toLowerCase()方法：如果你有一个字符串，而不是单个的字符，你可以使用这个方法将字符串中的所有大写字符转换为小写字符。")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[t._v("  "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" lowerCaseString "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"HELLO WORLD"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("toLowerCase")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// 返回 "hello world"')]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])])]),t._v(" "),s("li",[s("p",[t._v("使用Character.isLetterOrDigit()方法，判断某个字符是否是字母或者数字")])])])])}),[],!1,null,null,null);s.default=r.exports}}]);