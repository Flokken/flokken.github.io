(window.webpackJsonp=window.webpackJsonp||[]).push([[117],{443:function(a,t,v){"use strict";v.r(t);var s=v(4),e=Object(s.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"mvc模式与三层架构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#mvc模式与三层架构"}},[a._v("#")]),a._v(" MVC模式与三层架构")]),a._v(" "),t("p",[a._v("MVC 是一种分层开发的模式，其中：")]),a._v(" "),t("p",[a._v("M：Model，业务模型，处理业务")]),a._v(" "),t("p",[a._v("V：View，视图，界面展示")]),a._v(" "),t("p",[a._v("C：Controller，控制器，处理请求，调用模型和视图")]),a._v(" "),t("p",[a._v("控制器（serlvlet）用来接收浏览器发送过来的请求，控制器调用模型（JavaBean）来获取数据，比如从数据库查询数据；控制器获取到数据后再交由视图（JSP）进行数据展示")]),a._v(" "),t("img",{staticStyle:{zoom:"70%"},attrs:{src:"https://typora-1309665611.cos.ap-nanjing.myqcloud.com/typora/image-20230412144918129.png"}}),a._v(" "),t("p",[t("strong",[a._v("MVC")]),a._v(" "),t("strong",[a._v("好处：")])]),a._v(" "),t("ul",[t("li",[a._v("职责单一，互不影响。每个角色做它自己的事，各司其职。")]),a._v(" "),t("li",[a._v("有利于分工协作。")]),a._v(" "),t("li",[a._v("有利于组件重用")])]),a._v(" "),t("h2",{attrs:{id:"三层架构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#三层架构"}},[a._v("#")]),a._v(" "),t("strong",[a._v("三层架构")])]),a._v(" "),t("p",[a._v("三层架构是将我们的项目分成了三个层面，分别是 表现层 、 业务逻辑层 、 数据访问层 。")]),a._v(" "),t("img",{staticStyle:{zoom:"70%"},attrs:{src:"https://typora-1309665611.cos.ap-nanjing.myqcloud.com/typora/image-20230412145813975.png"}}),a._v(" "),t("ul",[t("li",[a._v("数据访问层：对数据库的CRUD基本操作")]),a._v(" "),t("li",[a._v("业务逻辑层：对业务逻辑进行封装，组合数据访问层层中基本功能，形成复杂的业务逻辑功能。例如 注册业务功能 ，我们会先调用 数据访问层 的 selectByName() 方法判断该用户名是否存在，如果不存在再调用 数据访问层 的 insert()，方法进行数据的添加操作")]),a._v(" "),t("li",[a._v("表现层：接收请求，封装数据，调用业务逻辑层，响应数据")])]),a._v(" "),t("p",[t("strong",[a._v("表现层：")]),a._v(" com.itheima.controller 或者 com.itheima.web")]),a._v(" "),t("p",[t("strong",[a._v("业务逻辑层")]),a._v("： com.itheima.service")]),a._v(" "),t("p",[t("strong",[a._v("数据访问层：")]),a._v(" com.itheima.dao 或者 com.itheima.mapper")]),a._v(" "),t("h3",{attrs:{id:"其他架构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#其他架构"}},[a._v("#")]),a._v(" 其他架构")]),a._v(" "),t("img",{staticStyle:{zoom:"90%"},attrs:{src:"https://typora-1309665611.cos.ap-nanjing.myqcloud.com/typora/image-20230412150253056.png"}}),a._v(" "),t("h2",{attrs:{id:"mvc和三层架构联系"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#mvc和三层架构联系"}},[a._v("#")]),a._v(" MVC和三层架构联系")]),a._v(" "),t("img",{staticStyle:{zoom:"90%"},attrs:{src:"https://typora-1309665611.cos.ap-nanjing.myqcloud.com/typora/image-20230412150531363.png"}}),a._v(" "),t("p",[t("strong",[a._v("如上图上半部分是 MVC 模式，上图下半部分是三层架构")]),a._v("。 MVC 模式 中的 C（控制器）和 V（视图）就是 三层架构 中的表现层，而 MVC 模式 中的 M（模型）就是 三层架构 中的 业务逻辑层 和 数据访问层。")]),a._v(" "),t("p",[t("strong",[a._v("可以将 MVC 模式 理解成是一个大的概念，而 三层架构 是对 MVC 模式 实现架构的思想。")]),a._v(" 那么我们以后按照要求将不同层的")]),a._v(" "),t("p",[t("strong",[a._v("代码写在不同的包下，每一层里功能职责做到单一（高内聚，低耦合）")]),a._v("，将来如果将表现层的技术换掉，而业务逻辑层和数据访问层的代码不需要发生变化。")]),a._v(" "),t("blockquote",[t("p",[a._v("其实就是为了高内聚，低耦合的目标，方便维护")]),a._v(" "),t("p",[a._v("**内聚性：**又称块内联系。指模块的功能强度的度量，即一个模块内元素彼此之间结合的紧密程度的度量。若一个程序之间各元素之间（程序段之间）联系紧密，则内聚性就高（高内聚）。")]),a._v(" "),t("p",[a._v("**耦合性：**又称块间联系。指软件系统各模块之间相互紧密联系程度的一种度量。模块之间联系越紧密，其耦合性就越强，模块的独立性就越差。相反其耦合性就越弱（低耦合）")])]),a._v(" "),t("h2",{attrs:{id:"javaweb常用包架构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#javaweb常用包架构"}},[a._v("#")]),a._v(" javaweb常用包架构")]),a._v(" "),t("p",[a._v("一般来说，构建javaweb时，可以把所用的类和接口像下面的这样分")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://typora-1309665611.cos.ap-nanjing.myqcloud.com/typora/image-20230504095444766.png",alt:"image-20230504095444766"}})]),a._v(" "),t("p",[t("strong",[a._v("分包的目的是解耦")])]),a._v(" "),t("p",[a._v("Controller层:接口层，用户访问请求时对接。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("Controller层负责具体的业务模块流程的控制，在此层里面要调用Serice层的接口来控制业务流程，控制的配置也同样是在Spring的配置文件里面进行，针对具体的业务流程，会有不同的控制器，我们具体的设计过程中可以将流程进行抽象归纳，设计出可以重复利用的子单元流程模块，这样不仅使程序结构变得清晰，也大大减少了代码量。\n")])])]),t("p",[a._v("2.dao层：DAO层主要是做数据持久层的工作，负责与数据库进行联络的一些任务都封装在此，")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v(" DAO层的设计首先是设计DAO的接口，然后在Spring的配置文件中定义此接口的实现类，然后就可在模块中调用此接口来进行数据业务的处理，而不用关心此接口的具体实现类是哪个类，显得结构非常清晰，DAO层的数据源配置，以及有关数据库连接的参数都在Spring的配置文件中进行配置。\n")])])]),t("p",[a._v("3.domain层：通常就是用于放置这个系统中，与数据库中的表，一一对应起来的JavaBean的")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("一般存放要与数据库交互的类，比如我有一个book，里面的数据从数据库中读出，就可以放这儿\n")])])]),t("p",[a._v("model层：和domain区别；可能都是javaBean，")]),a._v(" "),t("p",[a._v("这个区别是用途不同，domain通常就代表了与数据库表--一一对应的javaBean,")]),a._v(" "),t("p",[a._v("model通常代表了不与数据库一一对应的javaBean，但是封装的数据是前端的JS脚本，需要使用的数据")]),a._v(" "),t("p",[a._v("4.service层：Service层主要负责业务模块的逻辑应用设计。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v(" 同样是首先设计接口，再设计其实现的类，接着再Spring的配置文件中配置其实现的关联。这样我们就可以在应用中调用Service接口来进行业务处理。Service层的业务实现，具体要调用到已定义的DAO层的接口，封装Service层的业务逻辑有利于通用的业务逻辑的独立性和重复利用性，程序显得非常简洁。\n")])])]),t("p",[t("img",{attrs:{src:"https://typora-1309665611.cos.ap-nanjing.myqcloud.com/typora/image-20230504100520065.png",alt:"image-20230504100520065"}})])])}),[],!1,null,null,null);t.default=e.exports}}]);