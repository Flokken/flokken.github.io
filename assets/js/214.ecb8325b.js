(window.webpackJsonp=window.webpackJsonp||[]).push([[214],{542:function(s,a,t){"use strict";t.r(a);var e=t(4),v=Object(e.a)({},(function(){var s=this,a=s._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h2",{attrs:{id:"引言"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#引言"}},[s._v("#")]),s._v(" 引言")]),s._v(" "),a("p",[a("strong",[s._v("哨兵机制可以实现主从库的自动切换。通过部署多个实例，就形成了一个哨兵集群。哨兵集群中的多个实例共同判断，可以降低对主库下线的误判率。")])]),s._v(" "),a("p",[s._v("但是要考虑一个问题："),a("strong",[s._v("如果有哨兵实例在运行时发生了故障，主从库还能正常切换吗？")])]),s._v(" "),a("p",[a("strong",[s._v("实际上，一旦多个实例组成了哨兵集群，即使有哨兵实例出现故障挂掉了，其他哨兵还能继续协作完成主从库切换的工作")])]),s._v(" "),a("p",[a("strong",[s._v("在配置哨兵的信息时，我们只需要用到下面的这个配置项，设置主库的IP和端口，并没有配置其他哨兵的连接信息。")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("sentinel monitor <master-name> <ip> <redis-port> <quorum> \n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("**这些哨兵实例既然都不知道彼此的地址，又是怎么组成集群的呢？**要弄明白这个问题，我们就需要学习一下哨兵集群的组成和运行机制了。")]),s._v(" "),a("h2",{attrs:{id:"基于pub-sub机制的哨兵集群组成"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基于pub-sub机制的哨兵集群组成"}},[s._v("#")]),s._v(" 基于pub/sub机制的哨兵集群组成")]),s._v(" "),a("blockquote",[a("p",[a("strong",[s._v("在配置哨兵的信息时，只需要设置主库的IP和端口，并没有配置其他哨兵的连接信息。")])])]),s._v(" "),a("p",[a("strong",[s._v("哨兵实例之间可以相互发现，要归功于Redis提供的pub/sub机制，也就是发布/订阅机制。")])]),s._v(" "),a("p",[s._v("哨兵只要和主库建立起了连接，就可以在主库上发布消息了，比如说发布它自己的连接信息（IP和端口）。同时，它也可以从主库上订阅消息，获得其他哨兵发布的连接信息。当多个哨兵实例都在主库上做了发布和订阅操作后，它们之间就能知道彼此的IP地址和端口。")]),s._v(" "),a("blockquote",[a("p",[s._v("除了哨兵实例，我们自己编写的应用程序也可以通过Redis进行消息的发布和订阅。所以，为了区分不同应用的消息，Redis会以频道的形式，对这些消息进行分门别类的管理。所谓的频道，实际上就是消息的类别。当消息类别相同时，它们就属于同一个频道。反之，就属于不同的频道。"),a("strong",[s._v("只有订阅了同一个频道的应用，才能通过发布的消息进行信息交换")]),s._v("。")])]),s._v(" "),a("p",[a("strong",[s._v("在主从集群中，主库上有一个名为“"),a("code",[s._v("__sentinel__:hello")]),s._v("”的频道，不同哨兵就是通过它来相互发现，实现互相通信的。")])]),s._v(" "),a("p",[s._v("我来举个例子，具体说明一下。在下图中，哨兵1把自己的IP（172.16.19.3）和端口（26579）发布到“"),a("code",[s._v("__sentinel__:hello")]),s._v("”频道上，哨兵2和3订阅了该频道。那么此时，哨兵2和3就可以从这个频道直接获取哨兵1的IP地址和端口号。")]),s._v(" "),a("p",[s._v("然后，哨兵2、3可以和哨兵1建立网络连接。通过这个方式，哨兵2和3也可以建立网络连接，这样一来，哨兵集群就形成了。它们相互间可以通过网络连接进行通信，比如说对主库有没有下线这件事儿进行判断和协商。")]),s._v(" "),a("img",{staticStyle:{zoom:"80%"},attrs:{src:"https://typora-1309665611.cos.ap-nanjing.myqcloud.com/typora/image-20231019212222065.png",alt:"image-20231019212222065"}}),s._v(" "),a("p",[a("strong",[s._v("哨兵除了彼此之间建立起连接形成集群外，还需要和从库建立连接")]),s._v("。")]),s._v(" "),a("p",[s._v("这是因为，在哨兵的监控任务中，它需要对主从库都进行心跳判断，而且在主从库切换完成后，它还需要通知从库，让它们和新主库进行同步。")]),s._v(" "),a("p",[a("strong",[s._v("哨兵是如何知道从库的IP地址和端口的呢？")])]),s._v(" "),a("blockquote",[a("p",[s._v("主库地址是一开始就配置了")])]),s._v(" "),a("p",[s._v("这是由哨兵向主库发送INFO命令来完成的。就像下图所示，哨兵2给主库发送INFO命令，主库接受到这个命令后，就会把从库列表返回给哨兵。接着，哨兵就可以根据从库列表中的连接信息，和每个从库建立连接，并在这个连接上持续地对从库进行监控。哨兵1和3可以通过相同的方法和从库建立连接。")]),s._v(" "),a("img",{staticStyle:{zoom:"80%"},attrs:{src:"https://typora-1309665611.cos.ap-nanjing.myqcloud.com/typora/image-20231019212239295.png",alt:"image-20231019212239295"}}),s._v(" "),a("p",[a("strong",[s._v("通过pub/sub机制，哨兵之间可以组成集群，同时，哨兵又通过INFO命令，获得了从库连接信息，也能和从库建立连接，并进行监控了。")])]),s._v(" "),a("p",[s._v("但是，哨兵不能只和主、从库连接。因为，主从库切换后，客户端也需要知道新主库的连接信息，才能向新主库发送请求操作。所以，"),a("strong",[s._v("哨兵还需要完成把新主库的信息告诉客户端这个任务。")])]),s._v(" "),a("p",[s._v("而且，在实际使用哨兵时，"),a("strong",[s._v("我们有时会遇到这样的问题：如何在客户端通过监控了解哨兵进行主从切换的过程呢？比如说，主从切换进行到哪一步了？这其实就是要求，客户端能够获取到哨兵集群在监控、选主、切换这个过程中发生的各种事件。")])]),s._v(" "),a("p",[s._v("此时，我们仍然可以依赖pub/sub机制，来帮助我们完成哨兵和客户端间的信息同步。")]),s._v(" "),a("h2",{attrs:{id:"基于pub-sub机制的客户端事件通知"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基于pub-sub机制的客户端事件通知"}},[s._v("#")]),s._v(" 基于pub/sub机制的客户端事件通知")]),s._v(" "),a("p",[a("strong",[s._v("从本质上说，哨兵就是一个运行在特定模式下的Redis实例，只不过它并不服务请求操作，只是完成监控、选主和通知的任务")]),s._v("。所以，每个哨兵实例也提供pub/sub机制，客户端可以从哨兵订阅消息。哨兵提供的消息订阅频道有很多，不同频道包含了主从库切换过程中的不同关键事件。")]),s._v(" "),a("p",[s._v("频道有这么多，一下子全部学习容易丢失重点。为下面是一些重要的频道，涉及几个关键事件，包括主库下线判断、新主库选定、从库重新配置。")]),s._v(" "),a("img",{staticStyle:{zoom:"80%"},attrs:{src:"https://typora-1309665611.cos.ap-nanjing.myqcloud.com/typora/image-20231019212252893.png",alt:"image-20231019212252893"}}),s._v(" "),a("p",[s._v("知道了这些频道之后，你就可以"),a("strong",[s._v("让客户端从哨兵这里订阅消息")]),s._v("了。具体的操作步骤是，客户端读取哨兵的配置文件后，可以获得哨兵的地址和端口，和哨兵建立网络连接。然后，我们可以在客户端执行订阅命令，来获取不同的事件消息。")]),s._v(" "),a("p",[s._v("举个例子，你可以执行如下命令，来订阅“所有实例进入客观下线状态的事件”：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("SUBSCRIBE +odown\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("当然，你也可以执行如下命令，订阅所有的事件：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("PSUBSCRIBE  *\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("当哨兵把新主库选择出来后，客户端就会看到下面的switch-master事件。这个事件表示主库已经切换了，新主库的IP地址和端口信息已经有了。这个时候，客户端就可以用这里面的新主库地址和端口进行通信了。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("switch-master <master name> <oldip> <oldport> <newip> <newport>\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("有了这些事件通知，客户端不仅可以在主从切换后得到新主库的连接信息，还可以监控到主从库切换过程中发生的各个重要事件。这样，客户端就可以知道主从切换进行到哪一步了，有助于了解切换进度。")]),s._v(" "),a("p",[s._v("好了，有了pub/sub机制，哨兵和哨兵之间、哨兵和从库之间、哨兵和客户端之间就都能建立起连接了，再加上我们上节课介绍主库下线判断和选主依据，哨兵集群的监控、选主和通知三个任务就基本可以正常工作了。不过，我们还需要考虑一个问题：主库故障以后，哨兵集群有多个实例，那怎么确定由哪个哨兵来进行实际的主从切换呢？")]),s._v(" "),a("h2",{attrs:{id:"由哪个哨兵执行主从切换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#由哪个哨兵执行主从切换"}},[s._v("#")]),s._v(" 由哪个哨兵执行主从切换？")]),s._v(" "),a("blockquote",[a("p",[s._v("一样的，需要选一个哨兵的leader，选举过程类似于raft算法的选举过程")]),s._v(" "),a("p",[s._v("虽然有大多数原则，但是redis还规定了一个quorum变量（可配置），想要当leader还需要赞成票大于等于这个变量")])]),s._v(" "),a("p",[s._v("确定由哪个哨兵执行主从切换的过程，和主库“客观下线”的判断过程类似，也是一个“投票仲裁”的过程。在具体了解这个过程前，我们再来看下，判断“客观下线”的仲裁过程。")]),s._v(" "),a("p",[s._v("哨兵集群要判定主库“客观下线”，需要有一定数量的实例都认为该主库已经“主观下线”了。我在上节课向你介绍了判断“客观下线”的原则，接下来，我介绍下具体的判断过程。")]),s._v(" "),a("p",[s._v("任何一个实例只要自身判断主库“主观下线”后，就会给其他实例发送is-master-down-by-addr命令。接着，其他实例会根据自己和主库的连接情况，做出Y或N的响应，Y相当于赞成票，N相当于反对票。")]),s._v(" "),a("img",{staticStyle:{zoom:"80%"},attrs:{src:"https://typora-1309665611.cos.ap-nanjing.myqcloud.com/typora/image-20231019212310700.png",alt:"image-20231019212310700"}}),s._v(" "),a("p",[s._v("一个哨兵获得了仲裁所需的赞成票数后，就可以标记主库为“客观下线”。这个所需的赞成票数是通过哨兵配置文件中的quorum配置项设定的。例如，现在有5个哨兵，quorum配置的是3，那么，一个哨兵需要3张赞成票，就可以标记主库为“客观下线”了。这3张赞成票包括哨兵自己的一张赞成票和另外两个哨兵的赞成票。")]),s._v(" "),a("p",[s._v("此时，这个哨兵就可以再给其他哨兵发送命令，表明希望由自己来执行主从切换，并让所有其他哨兵进行投票。这个投票过程称为“Leader选举”。因为最终执行主从切换的哨兵称为Leader，投票过程就是确定Leader。")]),s._v(" "),a("p",[a("strong",[s._v("在投票过程中，任何一个想成为Leader的哨兵，要满足两个条件：")])]),s._v(" "),a("p",[s._v("第一，拿到半数以上的赞成票；")]),s._v(" "),a("p",[s._v("第二，拿到的票数同时还需要大于等于哨兵配置文件中的quorum值。以3个哨兵为例，假设此时的quorum设置为2，那么，任何一个想成为Leader的哨兵只要拿到2张赞成票，就可以了。")]),s._v(" "),a("p",[s._v("这么说你可能还不太好理解，我再画一张图片，展示一下3个哨兵、quorum为2的选举过程。")]),s._v(" "),a("img",{staticStyle:{zoom:"80%"},attrs:{src:"https://typora-1309665611.cos.ap-nanjing.myqcloud.com/typora/image-20231019212330721.png",alt:"image-20231019212330721"}}),s._v(" "),a("p",[s._v("具体解释如下：")]),s._v(" "),a("ul",[a("li",[s._v("在T1时刻，S1判断主库为“客观下线”，它想成为Leader，就先给自己投一张赞成票，然后分别向S2和S3发送命令，表示要成为Leader。")]),s._v(" "),a("li",[s._v("在T2时刻，S3判断主库为“客观下线”，它也想成为Leader，所以也先给自己投一张赞成票，再分别向S1和S2发送命令，表示要成为Leader。")]),s._v(" "),a("li",[s._v("在T3时刻，S1收到了S3的Leader投票请求。因为S1已经给自己投了一票Y，所以它不能再给其他哨兵投赞成票了，所以S1回复N表示不同意。同时，S2收到了T2时S3发送的Leader投票请求。因为S2之前没有投过票，它会给第一个向它发送投票请求的哨兵回复Y，给后续再发送投票请求的哨兵回复N，所以，在T3时，S2回复S3，同意S3成为Leader。")]),s._v(" "),a("li",[s._v("在T4时刻，S2才收到T1时S1发送的投票命令。因为S2已经在T3时同意了S3的投票请求，此时，S2给S1回复N，表示不同意S1成为Leader。发生这种情况，是因为S3和S2之间的网络传输正常，而S1和S2之间的网络传输可能正好拥塞了，导致投票请求传输慢了。")]),s._v(" "),a("li",[s._v("最后，在T5时刻，S1得到的票数是来自它自己的一票Y和来自S2的一票N。而S3除了自己的赞成票Y以外，还收到了来自S2的一票Y。此时，S3不仅获得了半数以上的Leader赞成票，也达到预设的quorum值（quorum为2），所以它最终成为了Leader。接着，S3会开始执行选主操作，而且在选定新主库后，会给其他从库和客户端通知新主库的信息。")])]),s._v(" "),a("p",[s._v("如果S3没有拿到2票Y，那么这轮投票就不会产生Leader。哨兵集群会等待一段时间（也就是哨兵故障转移超时时间的2倍），再重新选举。这是因为，哨兵集群能够进行成功投票，很大程度上依赖于选举命令的正常网络传播。如果网络压力较大或有短时堵塞，就可能导致没有一个哨兵能拿到半数以上的赞成票。所以，等到网络拥塞好转之后，再进行投票选举，成功的概率就会增加。")]),s._v(" "),a("p",[s._v("需要注意的是，如果哨兵集群只有2个实例，此时，一个哨兵要想成为Leader，必须获得2票，而不是1票。所以，如果有个哨兵挂掉了，那么，此时的集群是无法进行主从库切换的。"),a("strong",[s._v("因此，通常我们至少会配置3个哨兵实例。这一点很重要（大多数原则）")])]),s._v(" "),a("h2",{attrs:{id:"小结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#小结"}},[s._v("#")]),s._v(" 小结")]),s._v(" "),a("p",[s._v("通常，我们在解决一个系统问题的时候，会引入一个新机制，或者设计一层新功能，就像我们在这两节课学习的内容：为了实现主从切换，我们引入了哨兵；为了避免单个哨兵故障后无法进行主从切换，以及为了减少误判率，又引入了哨兵集群；哨兵集群又需要有一些机制来支撑它的正常运行。")]),s._v(" "),a("p",[s._v("这节课上，我就向你介绍了支持哨兵集群的这些关键机制，包括：")]),s._v(" "),a("ul",[a("li",[s._v("基于pub/sub机制的哨兵集群组成过程；")]),s._v(" "),a("li",[s._v("基于INFO命令的从库列表，这可以帮助哨兵和从库建立连接；")]),s._v(" "),a("li",[s._v("基于哨兵自身的pub/sub功能，这实现了客户端和哨兵之间的事件通知。")])]),s._v(" "),a("p",[s._v("对于主从切换，当然不是哪个哨兵想执行就可以执行的，否则就乱套了。所以，这就需要哨兵集群在判断了主库“客观下线”后，经过投票仲裁，选举一个Leader出来，由它负责实际的主从切换，即由它来完成新主库的选择以及通知从库与客户端。")]),s._v(" "),a("p",[s._v("最后，我想再给你分享一个经验："),a("strong",[s._v("要保证所有哨兵实例的配置是一致的，尤其是主观下线的判断值down-after-milliseconds")]),s._v("。我们曾经就踩过一个“坑”。当时，在我们的项目中，因为这个值在不同的哨兵实例上配置不一致，导致哨兵集群一直没有对有故障的主库形成共识，也就没有及时切换主库，最终的结果就是集群服务不稳定。所以，你一定不要忽略这条看似简单的经验。")]),s._v(" "),a("h2",{attrs:{id:"q-a"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#q-a"}},[s._v("#")]),s._v(" Q&A")]),s._v(" "),a("p",[s._v("1.假设有一个Redis集群，是“一主四从”，同时配置了包含5个哨兵实例的集群，quorum值设为2。在运行过程中，如果有3个哨兵实例都发生故障了，此时，Redis主库如果有故障，还能正确地判断主库“客观下线”吗？如果可以的话，还能进行主从库自动切换吗？")]),s._v(" "),a("p",[s._v("A：")]),s._v(" "),a("p",[s._v("因为判定主库“客观下线”的依据是，认为主库“主观下线”的哨兵个数要大于等于quorum值，现在还剩2个哨兵实例，个数正好等于quorum值，所以还能正常判断主库是否处于“客观下线”状态。如果一个哨兵想要执行主从切换，就要获到半数以上的哨兵投票赞成，也就是至少需要3个哨兵投票赞成。但是，现在只有2个哨兵了，所以就无法进行主从切换了。")]),s._v(" "),a("p",[s._v("2.此外，哨兵实例是不是越多越好呢，如果同时调大down-after-milliseconds值，对减少误判是不是也有好处呢？")]),s._v(" "),a("p",[s._v("哨兵实例越多，误判率会越低，但是在判定主库下线和选举Leader时，实例需要拿到的赞成票数也越多，等待所有哨兵投完票的时间可能也会相应增加，主从库切换的时间也会变长，客户端容易堆积较多的请求操作，可能会导致客户端请求溢出，从而造成请求丢失。如果业务层对Redis的操作有响应时间要求，就可能会因为新主库一直没有选定，新操作无法执行而发生超时报警。")]),s._v(" "),a("p",[a("strong",[s._v("调大down-after-milliseconds后，可能会导致这样的情况：主库实际已经发生故障了，但是哨兵过了很长时间才判断出来，这就会影响到Redis对业务的可用性。")])])])}),[],!1,null,null,null);a.default=v.exports}}]);