(window.webpackJsonp=window.webpackJsonp||[]).push([[158],{486:function(v,a,t){"use strict";t.r(a);var o=t(4),e=Object(o.a)({},(function(){var v=this,a=v._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[a("p",[v._v("Java中存在三种IO方式")]),v._v(" "),a("blockquote",[a("p",[v._v("Java BIO[Blocking I/O] | 同步阻塞I/O模式")])]),v._v(" "),a("p",[v._v("**BIO 全称Block-IO 是一种同步且阻塞的通信模式。**是一个比较传统的通信方式，模式简单，使用方便。但并发处理能力低，通信耗时，依赖网速。")]),v._v(" "),a("blockquote",[a("p",[v._v("Java NIO[New I/O] | 同步非阻塞模式")])]),v._v(" "),a("p",[v._v("Java NIO，全程 Non-Block IO ，是Java SE 1.4版以后，针对网络传输效能优化的新功能。"),a("strong",[v._v("是一种非阻塞同步的通信模式")]),v._v("。")]),v._v(" "),a("ul",[a("li",[v._v("Java NIO，全程 Non-Block IO ，是Java SE 1.4版以后，针对网络传输效能优化的新功能。是一种非阻塞同步的通信模式。")]),v._v(" "),a("li",[v._v("NIO 与原来的 I/O 有同样的作用和目的, 他们之间最重要的区别是数据打包和传输的方式。原来的 I/O 以流的方式处理数据，而 NIO 以块的方式处理数据。")]),v._v(" "),a("li",[v._v("面向流的 I/O 系统一次一个字节地处理数据。一个输入流产生一个字节的数据，一个输出流消费一个字节的数据。")]),v._v(" "),a("li",[v._v("面向块的 I/O 系统以块的形式处理数据。每一个操作都在一步中产生或者消费一个数据块。按块处理数据比按(流式的)字节处理数据要快得多。但是面向块的 I/O - 缺少一些面向流的 I/O 所具有的优雅性和简单性。")])]),v._v(" "),a("blockquote",[a("p",[v._v("Java AIO[Asynchronous I/O] | 异步非阻塞I/O模型")])]),v._v(" "),a("p",[a("strong",[v._v("Java AIO，全程 Asynchronous IO，是异步非阻塞的IO")]),v._v("。是一种非阻塞异步的通信模式。在NIO的基础上引入了新的异步通道的概念，并提供了异步文件通道和异步套接字通道的实现。")]),v._v(" "),a("p",[a("img",{attrs:{src:"https://typora-1309665611.cos.ap-nanjing.myqcloud.com/typora/image-20240306111912751.png",alt:"image-20240306111912751"}})]),v._v(" "),a("h3",{attrs:{id:"q-a"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#q-a"}},[v._v("#")]),v._v(" Q&A")]),v._v(" "),a("p",[a("strong",[v._v("Question")]),v._v("：Netty和Tomcat有什么区别？")]),v._v(" "),a("p",[a("strong",[v._v("Answer")]),v._v("：")]),v._v(" "),a("p",[v._v("两者都可以当做http服务器，只不过Netty是一个通用的高性能网络应用框架，而Tomcat是一个专注于Java Web应用的Servlet容器和JSP引擎")]),v._v(" "),a("p",[v._v("Netty是一个基于Java的异步事件驱动网络应用框架，主要用于构建高性能、高可靠性的网络服务器和客户端。它提供了一组强大的抽象和组件，可以用于开发各种网络应用，包括传输层协议、代理服务器、WebSocket服务器等。Netty的设计目标是高性能和灵活性，它采用了非阻塞I/O模型，可以处理大量并发连接。")]),v._v(" "),a("p",[v._v("Tomcat是一个广泛使用的Java Servlet容器和JSP引擎，用于部署和运行Java Web应用。它实现了Java Servlet和JavaServer Pages（JSP）规范，并提供了一个HTTP服务器环境，能够处理HTTP请求和响应。它是一个功能完善、易于使用的Web服务器，被广泛用于Java Web应用的开发和部署。")])])}),[],!1,null,null,null);a.default=e.exports}}]);