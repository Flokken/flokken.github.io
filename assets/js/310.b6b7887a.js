(window.webpackJsonp=window.webpackJsonp||[]).push([[310],{639:function(t,a,e){"use strict";e.r(a);var s=e(4),v=Object(s.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"java中的栈-队列"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#java中的栈-队列"}},[t._v("#")]),t._v(" java中的栈/队列")]),t._v(" "),a("p",[t._v("java中有Stack，但是已经"),a("code",[t._v("deprecated")]),t._v("了,现在在java中使用栈，对应的数据结构是接口类"),a("code",[t._v("Deque")]),t._v(",即双端队列。")]),t._v(" "),a("blockquote",[a("p",[t._v("Stack继承自Vector，Vector都弃用了")])]),t._v(" "),a("p",[t._v("下面是jdk6文档的解释：")]),t._v(" "),a("p",[t._v("一个线性 collection，支持在两端插入和移除元素。名称 "),a("em",[t._v("deque")]),t._v(" 是“double ended  queue（双端队列）”的缩写，通常读为“deck”。大多数 "),a("code",[t._v("Deque")]),t._v("  实现对于它们能够包含的元素数没有固定限制，但此接口既支持有容量限制的双端队列，也支持没有固定大小限制的双端队列。")]),t._v(" "),a("blockquote",[a("p",[t._v("栈和队列本质上就是限制了数组的首尾的进出，所以栈和队列都可以通过Deque接口实现")])]),t._v(" "),a("p",[a("strong",[t._v("这里先看一下Collection中queue相关的继承体系")]),t._v("，这里并不全，只是列出来核心的接口和常用实现类")]),t._v(" "),a("img",{staticStyle:{zoom:"80%"},attrs:{src:"https://typora-1309665611.cos.ap-nanjing.myqcloud.com/typora/image-20240216210254469.png",alt:"image-20240216210254469"}}),t._v(" "),a("p",[t._v("对于队列，"),a("strong",[t._v("他有首部和尾部之分")])]),t._v(" "),a("blockquote",[a("p",[t._v("queue中的poll,push，peek等都是"),a("strong",[t._v("操作首部")])])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://typora-1309665611.cos.ap-nanjing.myqcloud.com/typora/image-20240216214227597.png",alt:"image-20240216214227597"}})]),t._v(" "),a("h3",{attrs:{id:"queue常用方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#queue常用方法"}},[t._v("#")]),t._v(" Queue常用方法")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("方法名")]),t._v(" "),a("th",[t._v("说明")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("boolean add(E e)")]),t._v(" "),a("td",[t._v("如果不超出容量，将元素插入到队列(队尾)")])]),t._v(" "),a("tr",[a("td",[t._v("E  peek()")]),t._v(" "),a("td",[t._v("查询队列首部元素")])]),t._v(" "),a("tr",[a("td",[t._v("E poll()")]),t._v(" "),a("td",[t._v("返回队列首部元素，并且删除队首")])]),t._v(" "),a("tr",[a("td",[t._v("boolean    offer(E e)")]),t._v(" "),a("td",[t._v("立即将元素插入到队列(队尾)")])]),t._v(" "),a("tr",[a("td",[t._v("E remove()")]),t._v(" "),a("td",[t._v("返回队列首部元素，并且删除队首")])]),t._v(" "),a("tr",[a("td",[t._v("boolean isEmpty()")]),t._v(" "),a("td",[t._v("如果队列为空，返回true（继承自Collection）")])])])]),t._v(" "),a("h3",{attrs:{id:"deque常用方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#deque常用方法"}},[t._v("#")]),t._v(" Deque常用方法")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("方法名")]),t._v(" "),a("th",[t._v("说明")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("void addLast(E e)")]),t._v(" "),a("td",[t._v("将指定元素插入此双端队列的末尾")])]),t._v(" "),a("tr",[a("td",[t._v("void addFirst(E e)")]),t._v(" "),a("td",[t._v("将指定元素插入此双端队列的开头")])]),t._v(" "),a("tr",[a("td",[t._v("boolean contains(Object o)")]),t._v(" "),a("td",[t._v("如果此双端队列包含指定元素，则返回 "),a("code",[t._v("true")]),t._v("。")])]),t._v(" "),a("tr",[a("td",[t._v("E  peek()")]),t._v(" "),a("td",[t._v("获取双端队列所表示的"),a("strong",[t._v("队列的头部")]),t._v("(第一个元素)；如果此双端队列为空，则返回 "),a("code",[t._v("null")]),t._v("。")])]),t._v(" "),a("tr",[a("td",[t._v("E  peekFirst()")]),t._v(" "),a("td",[t._v("获取，但不移除此双端队列的第一个元素；如果此双端队列为空，则返回 "),a("code",[t._v("null")]),t._v("。")])]),t._v(" "),a("tr",[a("td",[t._v("E  peekLast()")]),t._v(" "),a("td",[t._v("获取，但不移除此双端队列的最后一个元素；如果此双端队列为空，则返回 "),a("code",[t._v("null")]),t._v("。")])]),t._v(" "),a("tr",[a("td",[t._v("E  poll()")]),t._v(" "),a("td",[t._v("获取并移除此双端队列"),a("strong",[t._v("头部(第一个元素)")]),t._v("；如果此双端队列为空，则返回 "),a("code",[t._v("null")]),t._v("。")])]),t._v(" "),a("tr",[a("td",[t._v("E  pollFirst()")]),t._v(" "),a("td",[t._v("获取并移除此双端队列的第一个元素；如果此双端队列为空，则返回 "),a("code",[t._v("null")]),t._v("。")])]),t._v(" "),a("tr",[a("td",[t._v("E  pollLast()")]),t._v(" "),a("td",[t._v("获取并移除此双端队列的最后一个元素；如果此双端队列为空，则返回 "),a("code",[t._v("null")]),t._v("。")])]),t._v(" "),a("tr",[a("td",[t._v("boolean isEmpty()")]),t._v(" "),a("td",[t._v("如果双端队列为空，返回true")])]),t._v(" "),a("tr",[a("td",[t._v("void push(E e)")]),t._v(" "),a("td",[t._v("将一个元素推入此双端队列所表示的堆栈（"),a("strong",[t._v("双端队列的头部")]),t._v("）")])]),t._v(" "),a("tr",[a("td",[t._v("E pop()")]),t._v(" "),a("td",[t._v("从此双端队列所表示的堆栈中弹出一个元素（"),a("strong",[t._v("从双端队列头部弹出一个元素")]),t._v("）。")])]),t._v(" "),a("tr",[a("td",[t._v("int size()")]),t._v(" "),a("td",[t._v("返回元素个数")])])])]),t._v(" "),a("h3",{attrs:{id:"栈"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#栈"}},[t._v("#")]),t._v(" 栈")]),t._v(" "),a("p",[t._v("常用来说，我们定义一个双端队列表示栈：")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Deque")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("stack "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ArrayDeque")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("栈的特性是后进先出，我们假设有队首来模拟栈(队尾也可以)")]),t._v(" "),a("ul",[a("li",[t._v("查看栈顶："),a("code",[t._v("peekFirst()")])]),t._v(" "),a("li",[t._v("出栈: \t"),a("code",[t._v("pollFirst()")])]),t._v(" "),a("li",[t._v("入栈  "),a("code",[t._v("addFirst()")])])]),t._v(" "),a("blockquote",[a("p",[t._v("下面一套作用完全相同，但不好区分，建议上面的，明确")]),t._v(" "),a("ul",[a("li",[t._v("查看栈顶："),a("code",[t._v("peek")])]),t._v(" "),a("li",[t._v("出栈: \t"),a("code",[t._v("pop/poll")])]),t._v(" "),a("li",[t._v("入栈  "),a("code",[t._v("push")])]),t._v(" "),a("li",[t._v("这里要注意，java中的push/poll操作的都是队首，而不是队尾，所以不要混用，用哪一套就都用那套的api")])])]),t._v(" "),a("h3",{attrs:{id:"队列"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#队列"}},[t._v("#")]),t._v(" 队列")]),t._v(" "),a("p",[a("strong",[t._v("Deque接口")])]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Deque")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("qu "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ArrayDeque")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("队列特点的先进先出，那么我们可以用队首模拟队列(队尾也可以)：")]),t._v(" "),a("ul",[a("li",[t._v("查看队首："),a("code",[t._v("peekFirst")])]),t._v(" "),a("li",[t._v("队首出队: \t"),a("code",[t._v("pollFirst")])]),t._v(" "),a("li",[t._v("队尾入队  "),a("code",[t._v("addLast")])])]),t._v(" "),a("blockquote",[a("p",[t._v("Deque接口中，push和poll都操作首部")])]),t._v(" "),a("p",[a("strong",[t._v("Queue接口")])]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Queue")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("qu "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ArrayDeque")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("队列特点的先进先出，那么：")]),t._v(" "),a("ul",[a("li",[t._v("查看队首："),a("code",[t._v("peek()")])]),t._v(" "),a("li",[t._v("队首出队: \t"),a("code",[t._v("poll()")])]),t._v(" "),a("li",[t._v("队尾入队  "),a("code",[t._v("add(E)")])])])])}),[],!1,null,null,null);a.default=v.exports}}]);