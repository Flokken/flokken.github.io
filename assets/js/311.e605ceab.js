(window.webpackJsonp=window.webpackJsonp||[]).push([[311],{640:function(t,s,a){"use strict";a.r(s);var n=a(4),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("blockquote",[s("p",[t._v("参考：")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://www.hello-algo.com/chapter_heap/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Hello 算法-堆"),s("OutboundLink")],1)])]),t._v(" "),s("h2",{attrs:{id:"概述"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[t._v("#")]),t._v(" 概述")]),t._v(" "),s("p",[t._v("「堆 heap」是一种满足特定条件的完全二叉树，主要可分为两种：大顶堆和小顶堆。")]),t._v(" "),s("ul",[s("li",[t._v("「大顶堆 max heap」：任意节点的值 ≥ 其子节点的值。")]),t._v(" "),s("li",[t._v("「小顶堆 min heap」：任意节点的值 ≤ 其子节点的值。")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://typora-1309665611.cos.ap-nanjing.myqcloud.com/typora/image-20231116193042558.png",alt:"image-20231116193042558"}})]),t._v(" "),s("p",[t._v("堆作为完全二叉树的一个特例，具有以下特性。")]),t._v(" "),s("ul",[s("li",[t._v("最底层节点靠左填充，其他层的节点都被填满。")]),t._v(" "),s("li",[t._v("我们将二叉树的根节点称为“堆顶”，将底层最靠右的节点称为“堆底”。")]),t._v(" "),s("li",[t._v("对于大顶堆（小顶堆），堆顶元素（即根节点）的值分别是最大（最小）的。")])]),t._v(" "),s("h2",{attrs:{id:"堆常用操作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#堆常用操作"}},[t._v("#")]),t._v(" 堆常用操作")]),t._v(" "),s("p",[t._v("我们在写代码时，经常说什么用优先队列来实现堆，需要指出的是，"),s("strong",[t._v("这是因为许多编程语言提供的是「优先队列 priority queue」")]),t._v("，这是一种抽象数据结构，定义为具有优先级排序的队列。实际上，"),s("strong",[t._v("堆通常用作实现优先队列，大顶堆相当于元素按从大到小顺序出队的优先队列")]),t._v("。")]),t._v(" "),s("p",[s("strong",[t._v("从使用角度来看，我们可以将“优先队列”和“堆”看作等价的数据结构。")])]),t._v(" "),s("blockquote",[s("p",[t._v("因此可以不对两者不做特别区分，统一叫做“堆“")])]),t._v(" "),s("p",[t._v("堆常用的操作和栈，队列很像，即")]),t._v(" "),s("ul",[s("li",[t._v("入堆，出堆，大小，查看堆顶，查看堆是否为空")])]),t._v(" "),s("blockquote",[s("p",[t._v("因此java用"),s("code",[t._v("priorityQueue类")]),t._v("来实现堆，用"),s("code",[t._v("Deque接口")]),t._v("实现栈，都继承自"),s("code",[t._v("Queue")])])]),t._v(" "),s("p",[t._v("java中假设我创建一个堆，使用的是"),s("code",[t._v("PriorityQueue")]),t._v("这个类")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("PriorityQueue")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("E")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("heap "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("PriorityQueue")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("其使用方法和栈的"),s("code",[t._v("Deque")]),t._v("差不多")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("方法名")]),t._v(" "),s("th",[t._v("描述")]),t._v(" "),s("th",[t._v("时间复杂度")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("add(E e)")]),t._v(" "),s("td",[t._v("将元素插入堆")]),t._v(" "),s("td",[t._v("O(logn)")])]),t._v(" "),s("tr",[s("td",[t._v("peek()")]),t._v(" "),s("td",[t._v("获取堆顶元素")]),t._v(" "),s("td",[t._v("O(1)")])]),t._v(" "),s("tr",[s("td",[t._v("poll()")]),t._v(" "),s("td",[t._v("获取并移除堆顶")]),t._v(" "),s("td",[t._v("O(logn)")])]),t._v(" "),s("tr",[s("td",[t._v("size()")]),t._v(" "),s("td",[t._v("返回堆中元素个数")]),t._v(" "),s("td",[t._v("O(1)")])]),t._v(" "),s("tr",[s("td",[t._v("isEmpty()")]),t._v(" "),s("td",[t._v("查看是否为空")]),t._v(" "),s("td",[t._v("O(1)")])]),t._v(" "),s("tr",[s("td",[t._v("clear()")]),t._v(" "),s("td",[t._v("清楚所有元素")]),t._v(" "),s("td")])])]),t._v(" "),s("p",[t._v("在实际应用时，"),s("strong",[t._v("我们一般要分大根堆或者小根堆，这时需要重写"),s("code",[t._v("Comparator")]),t._v("（或者说这个优先队列的排序规则）")])]),t._v(" "),s("blockquote",[s("p",[t._v("类似于排序算法中的“从小到大排列”和“从大到小排列”，我们可以通过修改 Comparator 来实现“小顶堆”与“大顶堆”之间的转换。")])]),t._v(" "),s("p",[t._v("小根堆，最小的排第一个，比较函数和升序一样")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v(" PriorityQueue<Integer>pq =new PriorityQueue<>((a,b)->(a-b));\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("大根堆，最大的排第一个，比较函数和降序一样")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v(" PriorityQueue<Integer>pq =new PriorityQueue<>((a,b)->(b-a));\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("h3",{attrs:{id:"排序规则重载"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#排序规则重载"}},[t._v("#")]),t._v(" 排序规则重载")]),t._v(" "),s("p",[t._v("使用优先队列/堆的时候，我们常常需要实现"),s("code",[t._v("Comparable")]),t._v("接口或者使用"),s("code",[t._v("Comparator")]),t._v("比较器")]),t._v(" "),s("blockquote",[s("p",[t._v("Arrays和Collections工具类")]),t._v(" "),s("p",[t._v("Java为我们提供了实用的操作数组和集合的工具类，Arrays和Collections。内含对数组或集合的各种"),s("a",{attrs:{href:"https://so.csdn.net/so/search?q=%E6%8E%92%E5%BA%8F%E6%96%B9%E6%B3%95&spm=1001.2101.3001.7020",target:"_blank",rel:"noopener noreferrer"}},[t._v("排序方法"),s("OutboundLink")],1),t._v("，数组与集合的转换方法。")]),t._v(" "),s("p",[t._v("对于这两种类涉及到排序时，要么让其元素的类实现"),s("code",[t._v("Comparable")]),t._v("接口，要么传入"),s("code",[t._v("Comparator")]),t._v("比较器")])]),t._v(" "),s("p",[s("strong",[s("code",[t._v("Comparable")]),t._v("接口")])]),t._v(" "),s("p",[t._v("最常见的是对一个自定义的类来实现"),s("code",[t._v("Comparable")]),t._v("接口，然后才能加入到"),s("code",[t._v("PriorityQueue()")]),t._v("中去，这个感觉用起来没那么方便。可以看下面的例子")]),t._v(" "),s("blockquote",[s("p",[s("a",{attrs:{href:"https://flokken.github.io/pages/597c1c/#comparator%E6%8E%92%E5%BA%8F",target:"_blank",rel:"noopener noreferrer"}},[t._v("参考"),s("OutboundLink")],1)])]),t._v(" "),s("p",[s("strong",[s("code",[t._v("comparator")]),t._v("比较器")])]),t._v(" "),s("p",[t._v("哪个类要用，就让这个类的构造方法接收Comparator的实现类对象，重写compare(T o1,T o2)方法。")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TreeSet")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Teacher")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" ts "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TreeSet")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Comparator")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Teacher")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" len "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" nums"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 使用一个含有 k 个元素的最小堆，PriorityQueue 底层是动态数组，为了防止数组扩容产生消耗，可以先指定数组的长度")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("PriorityQueue")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" minHeap "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("PriorityQueue")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("k"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Comparator")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("compare")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Teacher")]),t._v(" o1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Teacher")]),t._v(" o2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" o1"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("o2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            \n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Java 里没有 heapify ，因此我们逐个将前 k 个元素添加到 minHeap 里")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br")])]),s("blockquote",[s("p",[s("code",[t._v("Comparator.comparingInt(a -> a)")]),t._v(" 是一个比较器（Comparator），用于设定元素之间的优先级关系。在这里，比较器通过 "),s("code",[t._v("comparingInt")]),t._v(" 方法根据元素自身的值进行比较，即按照整数大小进行比较。")])]),t._v(" "),s("p",[t._v("对于 "),s("code",[t._v("public int compare(int o1,int o2)...{}")])]),t._v(" "),s("ul",[s("li",[s("strong",[s("code",[t._v("return o1-o2")]),t._v("表示较小元素优先级更高，是构造小根堆")])]),t._v(" "),s("li",[s("strong",[s("code",[t._v("return o2-o1")]),t._v("表示较大元素优先级高，是构造大根堆")])])]),t._v(" "),s("blockquote",[s("p",[t._v("这里有必要说一下，优先队列只保证了其出队时的元素是最大/或者最小的，但是这个队列并不是严格有序的（想想大根堆，小根堆也不是有序的，只是保证堆顶是最大或者最小元素）。")])]),t._v(" "),s("p",[t._v("如果不是优先队列，比较器用于列表时")]),t._v(" "),s("ul",[s("li",[s("strong",[s("code",[t._v("return o1-o2")]),t._v("表示较小元素优先级更高，升序排序")])]),t._v(" "),s("li",[s("strong",[s("code",[t._v("return o2-o1")]),t._v("表示较大元素优先级高，降序排序")])])]),t._v(" "),s("blockquote",[s("p",[t._v("因为比较器的"),s("code",[t._v("compare")]),t._v("排序时，规则如下：")]),t._v(" "),s("ol",[s("li",[t._v("如果 "),s("code",[t._v("o1")]),t._v(" 小于 "),s("code",[t._v("o2")]),t._v("，则 "),s("code",[t._v("o1 - o2")]),t._v(" 的结果是负数，因此会返回一个负整数，表示 "),s("code",[t._v("o1")]),t._v(" 在排序中应该排在 "),s("code",[t._v("o2")]),t._v(" 的前面。")]),t._v(" "),s("li",[t._v("如果 "),s("code",[t._v("o1")]),t._v(" 等于 "),s("code",[t._v("o2")]),t._v("，则 "),s("code",[t._v("o1 - o2")]),t._v(" 的结果是0，因此会返回0，表示 "),s("code",[t._v("o1")]),t._v(" 和 "),s("code",[t._v("o2")]),t._v(" 的顺序保持不变。")]),t._v(" "),s("li",[t._v("如果 "),s("code",[t._v("o1")]),t._v(" 大于 "),s("code",[t._v("o2")]),t._v("，则 "),s("code",[t._v("o1 - o2")]),t._v(" 的结果是正数，因此会返回一个正整数，表示 "),s("code",[t._v("o1")]),t._v(" 在排序中应该排在 "),s("code",[t._v("o2")]),t._v(" 的后面。")])]),t._v(" "),s("p",[t._v("因此，使用 "),s("code",[t._v("return o1 - o2")]),t._v(" 的比较规则可以实现升序排序，其中较小的值会排在前面，较大的值会排在后面。")]),t._v(" "),s("p",[t._v("所以要想实现降序排序，反过来即可。")])]),t._v(" "),s("h3",{attrs:{id:"一个常用的模板"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一个常用的模板"}},[t._v("#")]),t._v(" 一个常用的模板")]),t._v(" "),s("h2",{attrs:{id:"自己实现堆"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#自己实现堆"}},[t._v("#")]),t._v(" 自己实现堆")]),t._v(" "),s("h2",{attrs:{id:"top-k问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#top-k问题"}},[t._v("#")]),t._v(" Top-K问题")]),t._v(" "),s("p",[t._v("Q:给定一个长度为 n 无序数组 "),s("code",[t._v("nums")]),t._v(" ，"),s("strong",[t._v("请返回数组中前 k 大的元素。")])]),t._v(" "),s("p",[t._v("最好想的就是排序，排序一般是O(nlogn)")]),t._v(" "),s("p",[t._v("基于堆可以更高效的解决该问题。")]),t._v(" "),s("blockquote",[s("p",[t._v("注意：前K大是建立小根堆，前K小是建立大根堆。")]),t._v(" "),s("p",[t._v("仔细看下面的算法流程，解答了我多年的疑惑")])]),t._v(" "),s("p",[t._v("求前K大思路：")]),t._v(" "),s("ol",[s("li",[t._v("初始化一个小顶堆，其堆顶元素最小。")]),t._v(" "),s("li",[t._v("先将数组的前 K 个元素依次入堆。")]),t._v(" "),s("li",[t._v("从第 K+1 个元素开始，若当前元素大于堆顶元素，则将堆顶元素出堆，并将当前元素入堆。\n"),s("ol",[s("li",[t._v("这里因为是小跟堆，所以"),s("strong",[t._v("每次出去的就是当前最小的元素，因为堆里始终保持K个元素，所以堆里就是前K大个元素。")])])])])]),t._v(" "),s("p",[t._v("复杂度分析：总共有n轮的入堆和出堆，堆最大长度为K，因此时间复杂度为O(nlogk)")]),t._v(" "),s("h3",{attrs:{id:"中位数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#中位数"}},[t._v("#")]),t._v(" 中位数")]),t._v(" "),s("p",[t._v("top-k问题的拓展。")]),t._v(" "),s("p",[s("strong",[t._v("中位数")]),t._v("是有序整数列表中的中间值。如果列表的大小是偶数，则没有中间值，中位数是两个中间值的平均值。")]),t._v(" "),s("blockquote",[s("p",[s("a",{attrs:{href:"https://leetcode.cn/problems/find-median-from-data-stream/",target:"_blank",rel:"noopener noreferrer"}},[t._v("295. 数据流的中位数"),s("OutboundLink")],1)])]),t._v(" "),s("p",[t._v("解题办法：我们分别使用一个小根堆和一个大根堆，小根堆记录较大的一半，大根堆记录较小的一半。")]),t._v(" "),s("blockquote",[s("p",[t._v("我们之所以这么想，是因为小根堆可以存前k个最大值，而大根堆可以存前K个最小值。")]),t._v(" "),s("p",[t._v("那么我们让小根堆和大根堆都是N/2,那么可以保证小根堆堆顶是大于等于大根堆堆顶的。而这刚好也是中位数。")]),t._v(" "),s("p",[t._v("疑问：这里可以让大根堆多存1吗，当N为奇数时。")])]),t._v(" "),s("ul",[s("li",[t._v("如果n为奇数，那么小根堆比大根堆多1。此时就是小根堆存[k,n-1],大根堆存[0,k)。")])]),t._v(" "),s("img",{staticStyle:{zoom:"80%"},attrs:{src:"https://typora-1309665611.cos.ap-nanjing.myqcloud.com/typora/image-20231119223854377.png",alt:"image-20231119223854377"}}),t._v(" "),s("p",[t._v("添加元素时"),s("code",[t._v("addNum")]),t._v(":")]),t._v(" "),s("ul",[s("li",[t._v("m==n时，需要向A添加一个元素。实现方法：将新元素num添加到B，再把B堆顶元素插入到A。")]),t._v(" "),s("li",[t._v("m-n==1时，需要向B添加一个元素。实现方法：将新元素num添加到A，再把A堆顶元素插入到B。")])]),t._v(" "),s("p",[t._v("查找中位数时：")]),t._v(" "),s("ul",[s("li",[t._v("m==n，N为偶数，则为A堆顶元素+B堆顶元素/2")]),t._v(" "),s("li",[t._v("m-n=1,N为奇数，则中位数为A的堆顶元素。")])]),t._v(" "),s("blockquote",[s("p",[t._v("参考：https://leetcode.cn/problems/find-median-from-data-stream/")])]),t._v(" "),s("div",{staticClass:"language-go line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[t._v("class Solution "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    public "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("topKFrequent")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" nums"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v(" k"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        Map"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("Integer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("Integer"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("map")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("new")]),t._v(" HashMap"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v(" num"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("nums"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("map")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("containsKey")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("num"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("map")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("put")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("num"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("map")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("num"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("map")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("put")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("num"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//小根堆求前k大")]),t._v("\n        PriorityQueue"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("Integer"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("pq "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("new")]),t._v(" PriorityQueue"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("new")]),t._v(" Comparator"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("Integer"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            @Override\n            public "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("compare")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Integer o1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("Integer o2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("map")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("o1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("map")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("o2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Integer key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("map")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("keySet")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pq"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("size")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("k"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                pq"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("map")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("map")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pq"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("peek")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                pq"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("remove")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                pq"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n       "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v(" n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("nums"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n       "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("res "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("k"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n       "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("while")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("pq"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("isEmpty")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            res"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("pq"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("remove")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" res"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br"),s("span",{staticClass:"line-number"},[t._v("22")]),s("br"),s("span",{staticClass:"line-number"},[t._v("23")]),s("br"),s("span",{staticClass:"line-number"},[t._v("24")]),s("br"),s("span",{staticClass:"line-number"},[t._v("25")]),s("br"),s("span",{staticClass:"line-number"},[t._v("26")]),s("br"),s("span",{staticClass:"line-number"},[t._v("27")]),s("br"),s("span",{staticClass:"line-number"},[t._v("28")]),s("br"),s("span",{staticClass:"line-number"},[t._v("29")]),s("br"),s("span",{staticClass:"line-number"},[t._v("30")]),s("br"),s("span",{staticClass:"line-number"},[t._v("31")]),s("br"),s("span",{staticClass:"line-number"},[t._v("32")]),s("br"),s("span",{staticClass:"line-number"},[t._v("33")]),s("br"),s("span",{staticClass:"line-number"},[t._v("34")]),s("br")])]),s("h2",{attrs:{id:"一个小概念辨析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一个小概念辨析"}},[t._v("#")]),t._v(" 一个小概念辨析")]),t._v(" "),s("p",[s("strong",[t._v("数据结构的“堆”与内存管理的“堆”是同一个概念吗？")])]),t._v(" "),s("p",[s("strong",[t._v("两者不是同一个概念，只是碰巧都叫堆")]),t._v("。计算机系统内存中的堆是动态内存分配的一部分，程序在运行时可以使用它来存储数据。程序可以请求一定量的堆内存，用于存储如对象和数组等复杂结构。当这些数据不再需要时，程序需要释放这些内存，以防止内存泄露。相较于栈内存，堆内存的管理和使用需要更谨慎，不恰当的使用可能会导致内存泄露和野指针等问题。")])])}),[],!1,null,null,null);s.default=e.exports}}]);