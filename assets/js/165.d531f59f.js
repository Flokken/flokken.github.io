(window.webpackJsonp=window.webpackJsonp||[]).push([[165],{494:function(s,t,a){"use strict";a.r(t);var e=a(4),n=Object(e.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("blockquote",[t("p",[s._v("参考:https://www.cnblogs.com/javastack/p/17803110.html")])]),s._v(" "),t("p",[s._v("Java线程池接口服务顶层接口是"),t("code",[s._v("ExecutorService")]),s._v("，然后我们一般使用的是"),t("code",[s._v("ThreadPollExecutor")])]),s._v(" "),t("img",{staticStyle:{zoom:"80%"},attrs:{src:"https://typora-1309665611.cos.ap-nanjing.myqcloud.com/typora/image-20240916104420693.png",alt:"image-20240916104420693"}}),s._v(" "),t("p",[t("strong",[s._v("1. 什么是线程池？")])]),s._v(" "),t("p",[s._v("线程池是一种管理和复用线程的机制。它通过维护一组线程来处理多个任务，避免了频繁创建和销毁线程的开销，从而提高了性能和资源利用率。")]),s._v(" "),t("h3",{attrs:{id:"工作原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#工作原理"}},[s._v("#")]),s._v(" 工作原理")]),s._v(" "),t("p",[s._v("首先介绍一下线程池的核心参数")]),s._v(" "),t("p",[t("strong",[s._v("线程池的核心参数")])]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("核心线程数")]),s._v("：线程池中始终保持活动的线程数量。")]),s._v(" "),t("li",[t("strong",[s._v("最大线程数")]),s._v("：线程池中允许的最大线程数量。")]),s._v(" "),t("li",[t("strong",[s._v("工作队列")]),s._v("：存放待执行任务的队列。")]),s._v(" "),t("li",[t("strong",[s._v("拒绝策略")]),s._v("：当线程池和队列都满时，如何处理新提交的任务。")])]),s._v(" "),t("img",{staticStyle:{zoom:"80%"},attrs:{src:"https://typora-1309665611.cos.ap-nanjing.myqcloud.com/typora/image-20240910100102947.png",alt:"image-20240910100102947"}}),s._v(" "),t("ul",[t("li",[s._v("如果当前运行的线程数小于核心线程数，那么就会新建一个线程来执行任务。")]),s._v(" "),t("li",[s._v("如果当前运行的线程数等于或大于核心线程数，但是小于最大线程数，那么就把该任务放入到任务队列里等待执行。")]),s._v(" "),t("li",[s._v("如果向任务队列投放任务失败（任务队列已经满了），但是当前运行的线程数是小于最大线程数的，就新建一个线程来执行任务。")]),s._v(" "),t("li",[s._v("如果当前运行的线程数已经等同于最大线程数了，新建线程将会使当前运行的线程超出最大线程数，那么当前任务会被拒绝，拒绝策略会调用"),t("code",[s._v("RejectedExecutionHandler.rejectedExecution()")]),s._v("方法。")])]),s._v(" "),t("p",[t("strong",[s._v("拒绝策略："),t("strong",[s._v("如果队列已满且线程数已达到")]),s._v("最大线程数")]),s._v("时，我们怎么处理新的请求的办法。")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("ThreadPoolExecutor.AbortPolicy")]),s._v("：抛出 "),t("code",[s._v("RejectedExecutionException")]),s._v("来拒绝新任务的处理（抛出异常2）。")]),s._v(" "),t("li",[t("code",[s._v("ThreadPoolExecutor.DiscardPolicy")]),s._v("：不处理新任务，直接丢弃掉（直接丢弃）。")]),s._v(" "),t("li",[t("code",[s._v("ThreadPoolExecutor.DiscardOldestPolicy")]),s._v("：此策略将丢弃最早的未处理的任务请求（丢弃最早未处理任务）。")]),s._v(" "),t("li",[t("code",[s._v("ThreadPoolExecutor.CallerRunsPolicy")]),s._v("：调用执行自己的线程运行任务，"),t("strong",[s._v("也就是直接在调用"),t("code",[s._v("execute")]),s._v("方法的线程中运行("),t("code",[s._v("run")]),s._v(")被拒绝的任务，如果执行程序已关闭，则会丢弃该任务")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("注意这个线程是提交任务到线程池的线程，而不是线程池中是线程")]),s._v("。在使用"),t("code",[s._v("CallerRunsPolicy")]),s._v("策略时，任务会被提交任务的线程（调用者）执行，而不是线程池中的工作线程执行")])])])]),s._v(" "),t("h3",{attrs:{id:"创建线程池"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#创建线程池"}},[s._v("#")]),s._v(" 创建线程池")]),s._v(" "),t("p",[t("strong",[s._v("方法一：通过"),t("code",[s._v("ThreadPoolExecutor")]),s._v("构造函数来创建（推荐）。")])]),s._v(" "),t("p",[t("code",[s._v("ThreadPoolExecutor")]),s._v(" 3 个最重要的参数：")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("corePoolSize")]),s._v("(核心线程数) : "),t("strong",[s._v("任务队列未达到队列容量时，最大可以同时运行的线程数量。")])]),s._v(" "),t("li",[t("code",[s._v("maximumPoolSize")]),s._v("（最大线程数） : "),t("strong",[s._v("任务队列中存放的任务达到队列容量的时候，当前可以同时运行的线程数量变为最大线程数")]),s._v("。")]),s._v(" "),t("li",[t("code",[s._v("workQueue")]),s._v("(工作队列容量): "),t("strong",[s._v("新任务来的时候会先判断当前运行的线程数量是否达到核心线程数，如果达到的话，新任务就会被存放在队列中。")]),s._v(" "),t("ul",[t("li",[s._v("任务队列是线程池中用于存储等待执行的任务的数据结构。那么是创建新线程还是等会再执行呢？")]),s._v(" "),t("li",[s._v("如果队列已满，并且当前运行线程数小于最大线程数，就会创建新线程。如果已满并且已经到达最大线程数，执行拒绝策略")])])]),s._v(" "),t("li",[t("strong",[s._v("handler，拒绝策略")])])]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[s._v("    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/**\n     * 用给定的初始参数创建一个新的ThreadPoolExecutor。\n     */")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ThreadPoolExecutor")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" corePoolSize"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//线程池的核心线程数量")]),s._v("\n                              "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" maximumPoolSize"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//线程池的最大线程数")]),s._v("\n                              "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("long")]),s._v(" keepAliveTime"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//当线程数大于核心线程数时，多余的空闲线程存活的最长时间")]),s._v("\n                              "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("TimeUnit")]),s._v(" unit"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//时间单位")]),s._v("\n                              "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("BlockingQueue")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Runnable")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" workQueue"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//任务队列，用来储存等待执行任务的队列")]),s._v("\n                              "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ThreadFactory")]),s._v(" threadFactory"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//线程工厂，用来创建线程，一般默认即可")]),s._v("\n                              "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("RejectedExecutionHandler")]),s._v(" handler"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//拒绝策略，当提交的任务过多而不能及时处理时，我们可以定制策略来处理任务")]),s._v("\n                               "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("corePoolSize "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("||")]),s._v("\n            maximumPoolSize "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("||")]),s._v("\n            maximumPoolSize "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" corePoolSize "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("||")]),s._v("\n            keepAliveTime "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("throw")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("IllegalArgumentException")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("workQueue "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("||")]),s._v(" threadFactory "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("||")]),s._v(" handler "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("throw")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("NullPointerException")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("corePoolSize "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" corePoolSize"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("maximumPoolSize "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" maximumPoolSize"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("workQueue "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" workQueue"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("keepAliveTime "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" unit"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("toNanos")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("keepAliveTime"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("threadFactory "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" threadFactory"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("handler "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" handler"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br")])]),t("p",[t("strong",[s._v("Question：怎么设置线程池参数比较合理？")])]),s._v(" "),t("p",[s._v("我们的一个导入任务涉及网络Io，也涉及计算型任务。我们的物理机是8个物理核心，所以为了不浪费技能，我们设置核心线程数为8，最大线程数为16。保持一个较高的同步效率。")]),s._v(" "),t("h3",{attrs:{id:"内置的四种线程池"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#内置的四种线程池"}},[s._v("#")]),s._v(" 内置的四种线程池")]),s._v(" "),t("p",[t("strong",[s._v("固定线程池 ("),t("code",[s._v("FixedThreadPool")]),s._v(")")])]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("描述")]),s._v("：创建一个固定大小的线程池。")]),s._v(" "),t("li",[s._v("特性：线程数量固定，多于的任务会被放入队列。")])]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ExecutorService")]),s._v(" fixedThreadPool "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Executors")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("newFixedThreadPool")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[t("strong",[s._v("缓存线程池 ("),t("code",[s._v("nCachedThreadPool")]),s._v(")")])]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("描述")]),s._v("：根据需求创建新线程，空闲线程会被回收。")]),s._v(" "),t("li",[s._v("特性：适合处理大量短时间的异步任务。")])]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ExecutorService")]),s._v(" cachedThreadPool "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Executors")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("newCachedThreadPool")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[t("strong",[s._v("单线程池 ("),t("code",[s._v("newSingleThreadExecutor")]),s._v(")")])]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("描述")]),s._v("：创建一个只包含一个线程的线程池。")]),s._v(" "),t("li",[s._v("特性：所有任务按提交顺序执行。")])]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ExecutorService")]),s._v(" singleThreadExecutor "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Executors")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("newSingleThreadExecutor")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[t("strong",[s._v("调度线程池 ("),t("code",[s._v("newScheduledThreadPool")]),s._v(")")])]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("描述")]),s._v("：支持延迟和周期性任务的执行。")]),s._v(" "),t("li",[s._v("特性：适合定时任务。")])]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ScheduledExecutorService")]),s._v(" scheduledThreadPool "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Executors")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("newScheduledThreadPool")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("h3",{attrs:{id:"工作队列类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#工作队列类型"}},[s._v("#")]),s._v(" 工作队列类型")]),s._v(" "),t("p",[s._v("Java 线程池的工作队列主要用于存放待执行的任务。不同的队列实现对线程池的行为和性能有影响。以下是常见的几种工作队列：")]),s._v(" "),t("p",[t("strong",[s._v("无界队列 (Unbounded Queue)")])]),s._v(" "),t("ul",[t("li",[t("strong",[t("code",[s._v("LinkedBlockingQueue")])]),s._v("：\n"),t("ul",[t("li",[s._v("线程安全的链表实现。")]),s._v(" "),t("li",[s._v("可以容纳任意数量的任务，直到内存耗尽。")]),s._v(" "),t("li",[s._v("适用于任务提交速度远快于任务执行速度的场景。")])])]),s._v(" "),t("li",[t("strong",[t("code",[s._v("ConcurrentLinkedQueue")])]),s._v("：\n"),t("ul",[t("li",[s._v("非阻塞的队列实现，使用 CAS（Compare-And-Swap）算法。")]),s._v(" "),t("li",[s._v("适合高并发场景，但不支持阻塞操作。")])])])]),s._v(" "),t("p",[t("strong",[s._v("有界队列 (Bounded Queue)")])]),s._v(" "),t("ul",[t("li",[t("strong",[t("code",[s._v("ArrayBlockingQueue")])]),s._v("：\n"),t("ul",[t("li",[s._v("固定大小的数组实现。")]),s._v(" "),t("li",[s._v("当队列满时，提交任务的线程会被阻塞，直到有空位。")]),s._v(" "),t("li",[s._v("适合对资源使用进行控制的场景。")])])]),s._v(" "),t("li",[t("strong",[t("code",[s._v("LinkedBlockingQueue")])]),s._v("（有界版）：\n"),t("ul",[t("li",[s._v("可以指定最大容量的链表实现。")]),s._v(" "),t("li",[s._v("适合需要控制队列大小的场景。")])])])]),s._v(" "),t("p",[t("strong",[s._v("优先级队列 (Priority Queue)")])]),s._v(" "),t("ul",[t("li",[t("code",[s._v("PriorityBlockingQueue")]),s._v(" "),t("ul",[t("li",[s._v("按照优先级顺序处理任务。")]),s._v(" "),t("li",[s._v("适合需要优先级调度的场景。")])])])]),s._v(" "),t("p",[t("strong",[s._v("同步队列 (Synchronous Queue)")])]),s._v(" "),t("ul",[t("li",[t("code",[s._v("SynchronousQueue")]),s._v(" "),t("ul",[t("li",[s._v("不存储任务的队列，每个插入操作必须等待一个对应的删除操作。")]),s._v(" "),t("li",[s._v("适合高并发的场景，可以实现直接交付任务。")])])])]),s._v(" "),t("p",[s._v("选择合适的工作队列取决于具体需求：")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("无界队列")]),s._v("适合处理大量任务，不担心内存问题。")]),s._v(" "),t("li",[t("strong",[s._v("有界队列")]),s._v("适合控制资源使用，避免内存溢出。")]),s._v(" "),t("li",[t("strong",[s._v("优先级队列")]),s._v("适合需要优先级调度的任务。")]),s._v(" "),t("li",[t("strong",[s._v("同步队列")]),s._v("适合高并发和实时性要求高的场景。")])])])}),[],!1,null,null,null);t.default=n.exports}}]);