(window.webpackJsonp=window.webpackJsonp||[]).push([[222],{550:function(s,e,a){"use strict";a.r(e);var i=a(4),v=Object(i.a)({},(function(){var s=this,e=s._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h2",{attrs:{id:"引言"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#引言"}},[s._v("#")]),s._v(" 引言")]),s._v(" "),e("p",[s._v("在Redis的实际部署应用中，有一个非常严重的问题，那就是Redis突然变慢了。一旦出现这个问题，不仅会直接影响用户的使用体验，还可能会影响到“旁人”，也就是和Redis在同一个业务系统中的其他系统，比如说数据库。")]),s._v(" "),e("p",[s._v("举个小例子，在秒杀场景下，一旦Redis变慢了，大量的用户下单请求就会被拖慢，也就是说，用户提交了下单申请，却没有收到任何响应，这会给用户带来非常糟糕的使用体验，甚至可能会导致用户流失。")]),s._v(" "),e("p",[s._v("而且，在实际生产环境中，Redis往往是业务系统中的一个环节（例如作为缓存或是作为数据库）。一旦Redis上的请求延迟增加，就可能引起业务系统中的一串儿“连锁反应”。")]),s._v(" "),e("p",[s._v("我借助一个包含了Redis的业务逻辑的小例子，简单地给你解释一下。")]),s._v(" "),e("p",[s._v("应用服务器（App Server）要完成一个事务性操作，包括在MySQL上执行一个写事务，在Redis上插入一个标记位，并通过一个第三方服务给用户发送一条完成消息。")]),s._v(" "),e("p",[s._v("这三个操作都需要保证事务原子性，所以，如果此时Redis的延迟增加，就会拖累App Server端整个事务的执行。这个事务一直完成不了，又会导致MySQL上写事务占用的资源无法释放，进而导致访问MySQL的其他请求被阻塞。很明显，Redis变慢会带来严重的连锁反应。")]),s._v(" "),e("img",{staticStyle:{zoom:"80%"},attrs:{src:"https://typora-1309665611.cos.ap-nanjing.myqcloud.com/typora/image-20231102193702606.png",alt:"image-20231102193702606"}}),s._v(" "),e("h2",{attrs:{id:"redis真的变慢了吗"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#redis真的变慢了吗"}},[s._v("#")]),s._v(" Redis真的变慢了吗？")]),s._v(" "),e("p",[s._v("在实际解决问题之前，我们首先要弄清楚，如何判断Redis是不是真的变慢了。")]),s._v(" "),e("p",[e("strong",[s._v("第一个最直接的方法，就是查看Redis的响应延迟。")])]),s._v(" "),e("p",[s._v("大部分时候，Redis延迟很低，但是在某些时刻，有些Redis实例会出现很高的响应延迟，甚至能达到几秒到十几秒，不过持续时间不长，这也叫延迟“毛刺”。当你发现Redis命令的执行时间突然就增长到了几秒，基本就可以认定Redis变慢了。")]),s._v(" "),e("blockquote",[e("p",[s._v("这种方法是看Redis延迟的绝对值，但是，"),e("strong",[s._v("在不同的软硬件环境下，Redis本身的绝对性能并不相同")]),s._v("。比如，在我的环境中，当延迟为1ms时，我判定Redis变慢了，但是你的硬件配置高，那么，在你的运行环境下，可能延迟是0.2ms的时候，你就可以认定Redis变慢了。")])]),s._v(" "),e("p",[s._v("第二个方法，"),e("strong",[s._v("当前环境下的Redis基线性能")]),s._v("做判断。所谓的基线性能呢，也就是一个系统在低压力、无干扰下的基本性能，这个性能只由当前的软硬件配置决定。")]),s._v(" "),e("p",[s._v("从2.8.7版本开始，redis-cli命令提供了–intrinsic-latency选项，可以用来监测和统计测试期间内的最大延迟，这个延迟可以作为Redis的基线性能。其中，测试时长可以用–intrinsic-latency选项的参数来指定。")]),s._v(" "),e("p",[s._v("举个例子，比如说，我们运行下面的命令，该命令会打印120秒内监测到的最大延迟。可以看到，这里的最大延迟是119微秒，也就是基线性能为119微秒。一般情况下，运行120秒就足够监测到最大延迟了，所以，我们可以把参数设置为120。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("./redis-cli --intrinsic-latency 120\nMax latency so far: 17 microseconds.\nMax latency so far: 44 microseconds.\nMax latency so far: 94 microseconds.\nMax latency so far: 110 microseconds.\nMax latency so far: 119 microseconds.\n\n36481658 total runs (avg latency: 3.2893 microseconds / 3289.32 nanoseconds per run).\nWorst run took 36x longer than the average latency.\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br")])]),e("blockquote",[e("p",[s._v("需要注意的是，基线性能和当前的操作系统、硬件配置相关。")])]),s._v(" "),e("p",[s._v("一般来说，你要把运行时延迟和基线性能进行对比，如果你观察到的Redis运行时延迟是其基线性能的2倍及以上，就可以认定Redis变慢了。")]),s._v(" "),e("h2",{attrs:{id:"如何应对redis变慢"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#如何应对redis变慢"}},[s._v("#")]),s._v(" 如何应对Redis变慢？")]),s._v(" "),e("p",[s._v("我们可以从之前学习的Redis架构图去分析为什么变慢。")]),s._v(" "),e("p",[s._v("Redis自身的操作特性、文件系统和操作系统，它们是影响Redis性能的三大要素。")]),s._v(" "),e("p",[e("img",{attrs:{src:"https://typora-1309665611.cos.ap-nanjing.myqcloud.com/typora/image-20231102195003390.png",alt:"image-20231102195003390"}})]),s._v(" "),e("h3",{attrs:{id:"redis自身操作特性的影响"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#redis自身操作特性的影响"}},[s._v("#")]),s._v(" Redis自身操作特性的影响")]),s._v(" "),e("p",[e("strong",[s._v("1.慢查询命令")])]),s._v(" "),e("p",[s._v("慢查询命令，就是指在Redis中执行速度慢的命令，这会导致Redis延迟增加。Redis提供的命令操作很多，并不是所有命令都慢，这和命令操作的复杂度有关。所以，我们必须要知道Redis的不同命令的复杂度。")]),s._v(" "),e("p",[s._v("比如说，Value类型为String时，GET/SET操作主要就是操作Redis的哈希表索引。这个操作复杂度基本是固定的，即O(1)。但是，当Value类型为Set时，SORT、SUNION/SMEMBERS操作复杂度分别为O(N+M*log(M))和O(N)。其中，N为Set中的元素个数，M为SORT操作返回的元素个数。这个复杂度就增加了很多。"),e("a",{attrs:{href:"https://redis.io/commands/",target:"_blank",rel:"noopener noreferrer"}},[s._v("Redis官方文档"),e("OutboundLink")],1),s._v("中对每个命令的复杂度都有介绍，当你需要了解某个命令的复杂度时，可以直接查询。")]),s._v(" "),e("p",[s._v("如果的确有大量的慢查询命令，有两种处理方式：")]),s._v(" "),e("ol",[e("li",[e("strong",[s._v("用其他高效命令代替")]),s._v("。比如说，如果你需要返回一个SET中的所有成员时，不要使用SMEMBERS命令，而是要使用SSCAN多次迭代返回，避免一次返回大量数据，造成线程阻塞。")]),s._v(" "),e("li",[e("strong",[s._v("当你需要执行排序、交集、并集操作时，可以在客户端完成，而不要用SORT、SUNION、SINTER这些命令，以免拖慢Redis实例")]),s._v("。")])]),s._v(" "),e("p",[e("strong",[s._v("2.过期key操作")])]),s._v(" "),e("p",[s._v("们来看过期key的自动删除机制。它是Redis用来回收内存空间的常用机制，应用广泛，本身就会引起Redis操作阻塞，导致性能变慢，所以，你必须要知道该机制对性能的影响。")]),s._v(" "),e("p",[s._v("Redis键值对的key可以设置过期时间。默认情况下，Redis每100毫秒会删除一些过期key，具体的算法如下：")]),s._v(" "),e("ol",[e("li",[s._v("采样ACTIVE_EXPIRE_CYCLE_LOOKUPS_PER_LOOP个数的key，并将其中过期的key全部删除；")]),s._v(" "),e("li",[s._v("如果超过25%的key过期了，则重复删除的过程，直到过期key的比例降至25%以下。")])]),s._v(" "),e("p",[s._v("ACTIVE_EXPIRE_CYCLE_LOOKUPS_PER_LOOP是Redis的一个参数，默认是20，那么，一秒内基本有200个过期key会被删除。这一策略对清除过期key、释放内存空间很有帮助。如果每秒钟删除200个过期key，并不会对Redis造成太大影响。")]),s._v(" "),e("p",[s._v("但是，如果触发了上面这个算法的第二条，Redis就会一直删除以释放内存空间。注意，"),e("strong",[s._v("删除操作是阻塞的")]),s._v("（Redis 4.0后可以用异步线程机制来减少阻塞影响）。所以，一旦该条件触发，Redis的线程就会一直执行删除，这样一来，就没办法正常服务其他的键值操作了，就会进一步引起其他键值操作的延迟增加，Redis就会变慢。")]),s._v(" "),e("p",[s._v("那么，算法的第二条是怎么被触发的呢？其中一个重要来源，就是"),e("strong",[s._v("频繁使用带有相同时间参数的EXPIREAT命令设置过期key")]),s._v("，这就会导致，在同一秒内有大量的key同时过期。")]),s._v(" "),e("p",[e("strong",[s._v("解决办法：")])]),s._v(" "),e("p",[s._v("你要检查业务代码在使用EXPIREAT命令设置key过期时间时，是否使用了相同的UNIX时间戳，有没有使用EXPIRE命令给批量的key设置相同的过期秒数。因为，这都会造成大量key在同一时间过期，导致性能变慢。")]),s._v(" "),e("p",[s._v("遇到这种情况时，千万不要嫌麻烦，你首先要根据实际业务的使用需求，决定EXPIREAT和EXPIRE的过期时间参数。其次，如果一批key的确是同时过期，你还可以在EXPIREAT和EXPIRE的过期时间参数上，加上一个一定大小范围内的随机数，这样，既保证了key在一个邻近时间范围内被删除，又避免了同时过期造成的压力。")]),s._v(" "),e("h2",{attrs:{id:"文件系统-aof模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#文件系统-aof模式"}},[s._v("#")]),s._v(" 文件系统：AOF模式")]),s._v(" "),e("p",[s._v("Redis是个内存数据库，为什么它的性能还和文件系统有关呢？")]),s._v(" "),e("p",[s._v("为了保证数据可靠性，Redis会采用AOF日志或RDB快照。其中，AOF日志提供了三种日志写回策略：no、everysec、always。"),e("strong",[s._v("这三种写回策略依赖文件系统的两个系统调用完成，也就是write和fsync。")])]),s._v(" "),e("p",[s._v("write只要把日志记录写到内核缓冲区，就可以返回了，并不需要等待日志实际写回到磁盘；而fsync需要把日志记录写回到磁盘后才能返回，时间较长。下面这张表展示了三种写回策略所执行的系统调用。")]),s._v(" "),e("img",{staticStyle:{zoom:"80%"},attrs:{src:"https://typora-1309665611.cos.ap-nanjing.myqcloud.com/typora/image-20231102195618479.png",alt:"image-20231102195618479"}}),s._v(" "),e("p",[s._v("**当写回策略配置为everysec和always时，Redis需要调用fsync把日志写回磁盘。**但是，这两种写回策略的具体执行情况还不太一样。")]),s._v(" "),e("p",[s._v("在使用everysec时，Redis允许丢失一秒的操作记录，所以，Redis主线程并不需要确保每个操作记录日志都写回磁盘。而且，"),e("strong",[s._v("fsync的执行时间很长")]),s._v("，如果是在Redis主线程中执行fsync，就容易阻塞主线程。所以，当写回策略配置为everysec时，Redis会使用后台的子线程异步完成fsync的操作。")]),s._v(" "),e("p",[s._v("而对于always策略来说，Redis需要确保每个操作记录日志都写回磁盘，如果用后台子线程异步完成，主线程就无法及时地知道每个操作是否已经完成了，这就不符合always策略的要求了。所以，always策略并不使用后台子线程来执行。")]),s._v(" "),e("p",[s._v("另外，在使用AOF日志时，为了避免日志文件不断增大，Redis会执行AOF重写，生成体量缩小的新的AOF日志文件。AOF重写本身需要的时间很长，也容易阻塞Redis主线程，所以，Redis使用子进程来进行AOF重写。")]),s._v(" "),e("p",[s._v("但是，这"),e("strong",[s._v("里有一个潜在的风险点：AOF重写会对磁盘进行大量IO操作，同时，fsync又需要等到数据写到磁盘后才能返回，所以，当AOF重写的压力比较大时，就会导致fsync被阻塞。虽然fsync是由后台子线程负责执行的，但是，主线程会监控fsync的执行进度。")])]),s._v(" "),e("p",[s._v("当主线程使用后台子线程执行了一次fsync，需要再次把新接收的操作记录写回磁盘时，如果主线程发现上一次的fsync还没有执行完，那么它就会阻塞。所以，如果后台子线程执行的fsync频繁阻塞的话（比如AOF重写占用了大量的磁盘IO带宽），主线程也会阻塞，导致Redis性能变慢。")]),s._v(" "),e("p",[s._v("为了帮助你理解，我再画一张图来展示下在磁盘压力小和压力大的时候，fsync后台子线程和主线程受到的影响。")]),s._v(" "),e("img",{staticStyle:{zoom:"80%"},attrs:{src:"https://typora-1309665611.cos.ap-nanjing.myqcloud.com/typora/image-20231102200427723.png",alt:"image-20231102200427723"}}),s._v(" "),e("p",[e("strong",[s._v("解决方法：")])]),s._v(" "),e("p",[s._v("如果的确需要高性能，同时也需要高可靠数据保证，我考虑"),e("strong",[s._v("采用高速的固态硬盘作为AOF日志的写入设备。")])]),s._v(" "),e("p",[s._v("高速固态盘的带宽和并发度比传统的机械硬盘的要高出10倍及以上。在AOF重写和fsync后台线程同时执行时，固态硬盘可以提供较为充足的磁盘IO资源，让AOF重写和fsync后台线程的磁盘IO资源竞争减少，从而降低对Redis的性能影响。")]),s._v(" "),e("h2",{attrs:{id:"操作系统-swap"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#操作系统-swap"}},[s._v("#")]),s._v(" 操作系统：swap")]),s._v(" "),e("p",[e("strong",[s._v("如果Redis的AOF日志配置只是no，或者就没有采用AOF模式，那么，还会有什么问题导致性能变慢吗？")])]),s._v(" "),e("p",[s._v("一个潜在的瓶颈："),e("strong",[s._v("操作系统的内存swap")]),s._v("。")]),s._v(" "),e("p",[e("strong",[s._v("内存swap是操作系统里将内存数据在内存和磁盘间来回换入和换出的机制，涉及到磁盘的读写，所以，一旦触发swap，无论是被换入数据的进程，还是被换出数据的进程，其性能都会受到慢速磁盘读写的影响。")])]),s._v(" "),e("p",[s._v("Redis是内存数据库，内存使用量大，如果没有控制好内存的使用量，或者和其他内存需求大的应用一起运行了，就可能受到swap的影响，而导致性能变慢。")]),s._v(" "),e("p",[s._v("这一点对于Redis内存数据库而言，显得更为重要：正常情况下，Redis的操作是直接通过访问内存就能完成，一旦swap被触发了，Redis的请求操作需要等到磁盘数据读写完成才行。而且，和我刚才说的AOF日志文件读写使用fsync线程不同，swap触发后影响的是Redis主IO线程，这会极大地增加Redis的响应时间。")]),s._v(" "),e("p",[s._v("说到这儿，我想给你分享一个我曾经遇到过的因为swap而导致性能降低的例子。")]),s._v(" "),e("p",[s._v("在正常情况下，我们运行的一个实例完成5000万个GET请求时需要300s，但是，有一次，这个实例完成5000万GET请求，花了将近4个小时的时间。经过问题复现，我们发现，当时Redis处理请求用了近4小时的情况下，该实例所在的机器已经发生了swap。从300s到4个小时，延迟增加了将近48倍，可以看到swap对性能造成的严重影响。")]),s._v(" "),e("p",[s._v("那么，什么时候会触发swap呢？")]),s._v(" "),e("p",[s._v("通常，触发swap的原因主要是"),e("strong",[s._v("物理机器内存不足")]),s._v("，对于Redis而言，有两种常见的情况：")]),s._v(" "),e("ul",[e("li",[s._v("Redis实例自身使用了大量的内存，导致物理机器的可用内存不足；")]),s._v(" "),e("li",[s._v("和Redis实例在同一台机器上运行的其他进程，在进行大量的文件读写操作。文件读写本身会占用系统内存，这会导致分配给Redis实例的内存量变少，进而触发Redis发生swap。")])]),s._v(" "),e("p",[e("strong",[s._v("解决思路：")])]),s._v(" "),e("p",[e("strong",[s._v("增加机器的内存或者使用Redis集群")]),s._v("。")]),s._v(" "),e("p",[s._v("操作系统本身会在后台记录每个进程的swap使用情况，即有多少数据量发生了swap。你可以先通过下面的命令查看Redis的进程号，这里是5332。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("$ redis-cli info | grep process_id\nprocess_id: 5332\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("p",[s._v("然后，进入Redis所在机器的/proc目录下的该进程目录中：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("$ cd /proc/5332\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("最后，运行下面的命令，查看该Redis进程的使用情况。在这儿，我只截取了部分结果：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("$cat smaps | egrep '^(Swap|Size)'\nSize: 584 kB\nSwap: 0 kB\nSize: 4 kB\nSwap: 4 kB\nSize: 4 kB\nSwap: 0 kB\nSize: 462044 kB\nSwap: 462008 kB\nSize: 21392 kB\nSwap: 0 kB\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br")])]),e("p",[s._v("每一行Size表示的是Redis实例所用的一块内存大小，而Size下方的Swap和它相对应，表示这块Size大小的内存区域有多少已经被换出到磁盘上了。如果这两个值相等，就表示这块内存区域已经完全被换出到磁盘了。")]),s._v(" "),e("p",[s._v("作为内存数据库，Redis本身会使用很多大小不一的内存块，所以，你可以看到有很多Size行，有的很小，就是4KB，而有的很大，例如462044KB。"),e("strong",[s._v("不同内存块被换出到磁盘上的大小也不一样")]),s._v("，例如刚刚的结果中的第一个4KB内存块，它下方的Swap也是4KB，这表示这个内存块已经被换出了；另外，462044KB这个内存块也被换出了462008KB，差不多有462MB。")]),s._v(" "),e("p",[s._v("这里有个重要的地方，"),e("strong",[s._v("当出现百MB，甚至GB级别的swap大小时，就表明，此时，Redis实例的内存压力很大，很有可能会变慢。所以，swap的大小是排查Redis性能变慢是否由swap引起的重要指标。")])]),s._v(" "),e("p",[s._v("一旦发生内存swap，最直接的解决方法就是"),e("strong",[s._v("增加机器内存")]),s._v("。如果该实例在一个Redis切片集群中，可以增加Redis集群的实例个数，来分摊每个实例服务的数据量，进而减少每个实例所需的内存量。")]),s._v(" "),e("p",[s._v("当然，如果Redis实例和其他操作大量文件的程序（例如数据分析程序）共享机器，你可以将Redis实例迁移到单独的机器上运行，以满足它的内存需求量。如果该实例正好是Redis主从集群中的主库，而从库的内存很大，也可以考虑进行主从切换，把大内存的从库变成主库，由它来处理客户端请求。")]),s._v(" "),e("h2",{attrs:{id:"操作系统-内存大页"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#操作系统-内存大页"}},[s._v("#")]),s._v(" 操作系统：内存大页")]),s._v(" "),e("p",[e("strong",[s._v("除了内存swap，还有一个和内存相关的因素，即内存大页机制（Transparent Huge Page, THP），也会影响Redis性能。")])]),s._v(" "),e("p",[s._v("Linux内核从2.6.38开始支持内存大页机制，该机制支持2MB大小的内存页分配，而常规的内存页分配是按4KB的粒度来执行的。")]),s._v(" "),e("p",[s._v("很多人都觉得：“Redis是内存数据库，内存大页不正好可以满足Redis的需求吗？而且在分配相同的内存量时，内存大页还能减少分配次数，不也是对Redis友好吗?”")]),s._v(" "),e("p",[e("strong",[s._v("其实，系统的设计通常是一个取舍过程，我们称之为trade-off。很多机制通常都是优势和劣势并存的。Redis使用内存大页就是一个典型的例子。")])]),s._v(" "),e("p",[s._v("虽然内存大页可以给Redis带来内存分配方面的收益，但是，不要忘了，Redis为了提供数据可靠性保证，需要将数据做持久化保存。这个写入过程由额外的线程执行，所以，此时，Redis主线程仍然可以接收客户端写请求。客户端的写请求可能会修改正在进行持久化的数据。在这一过程中，Redis就会采用写时复制机制，也就是说，一旦有数据要被修改，Redis并不会直接修改内存中的数据，而是将这些数据拷贝一份，然后再进行修改。")]),s._v(" "),e("p",[s._v("如果采用了内存大页，那么，即使客户端请求只修改100B的数据，Redis也需要拷贝2MB的大页。相反，如果是常规内存页机制，只用拷贝4KB。两者相比，你可以看到，当客户端请求修改或新写入数据较多时，内存大页机制将导致大量的拷贝，这就会影响Redis正常的访存操作，最终导致性能变慢。")]),s._v(" "),e("p",[s._v("那该怎么办呢？很简单，关闭内存大页，就行了。")]),s._v(" "),e("p",[s._v("首先，我们要先排查下内存大页。方法是：在Redis实例运行的机器上执行如下命令:")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("cat /sys/kernel/mm/transparent_hugepage/enabled\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("如果执行结果是always，就表明内存大页机制被启动了；如果是never，就表示，内存大页机制被禁止。")]),s._v(" "),e("p",[s._v("在实际生产环境中部署时，我建议你不要使用内存大页机制，操作也很简单，只需要执行下面的命令就可以了：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("echo never /sys/kernel/mm/transparent_hugepage/enabled\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("h2",{attrs:{id:"小结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#小结"}},[s._v("#")]),s._v(" 小结")]),s._v(" "),e("p",[s._v("为了方便应用，下面是包含9个检查点的Checklist，希望你在遇到Redis性能变慢时，按照这些步骤逐一检查，高效地解决问题。")]),s._v(" "),e("ol",[e("li",[s._v("获取Redis实例在当前环境下的基线性能。")]),s._v(" "),e("li",[s._v("是否用了慢查询命令？如果是的话，就使用其他命令替代慢查询命令，或者把聚合计算命令放在客户端做。")]),s._v(" "),e("li",[s._v("是否对过期key设置了相同的过期时间？对于批量删除的key，可以在每个key的过期时间上加一个随机数，避免同时删除。")]),s._v(" "),e("li",[s._v("是否存在bigkey？ 对于bigkey的删除操作，如果你的Redis是4.0及以上的版本，可以直接利用异步线程机制减少主线程阻塞；如果是Redis 4.0以前的版本，可以使用SCAN命令迭代删除；对于bigkey的集合查询和聚合操作，可以使用SCAN命令在客户端完成。")]),s._v(" "),e("li",[s._v("Redis AOF配置级别是什么？业务层面是否的确需要这一可靠性级别？如果我们需要高性能，同时也允许数据丢失，可以将配置项no-appendfsync-on-rewrite设置为yes，避免AOF重写和fsync竞争磁盘IO资源，导致Redis延迟增加。当然， 如果既需要高性能又需要高可靠性，最好使用高速固态盘作为AOF日志的写入盘。")]),s._v(" "),e("li",[s._v("Redis实例的内存使用是否过大？发生swap了吗？如果是的话，就增加机器内存，或者是使用Redis集群，分摊单机Redis的键值对数量和内存压力。同时，要避免出现Redis和其他内存需求大的应用共享机器的情况。")]),s._v(" "),e("li",[s._v("在Redis实例的运行环境中，是否启用了透明大页机制？如果是的话，直接关闭内存大页机制就行了。")]),s._v(" "),e("li",[s._v("是否运行了Redis主从集群？如果是的话，把主库实例的数据量大小控制在2~4GB，以免主从复制时，从库因加载大的RDB文件而阻塞。")]),s._v(" "),e("li",[s._v("是否使用了多核CPU或NUMA架构的机器运行Redis实例？使用多核CPU时，可以给Redis实例绑定物理核；使用NUMA架构时，注意把Redis实例和网络中断处理程序运行在同一个CPU Socket上。")])]),s._v(" "),e("p",[s._v("实际上，影响系统性能的因素还有很多，这两节课给你讲的都是应对最常见问题的解决方案。")]),s._v(" "),e("p",[s._v("如果你遇到了一些特殊情况，也不要慌，我再给你分享一个小技巧：仔细检查下有没有恼人的“邻居”，具体点说，就是Redis所在的机器上有没有一些其他占内存、磁盘IO和网络IO的程序，比如说数据库程序或者数据采集程序。如果有的话，我建议你将这些程序迁移到其他机器上运行。")]),s._v(" "),e("p",[s._v("为了保证Redis高性能，我们需要给Redis充足的计算、内存和IO资源，给它提供一个“安静”的环境。")]),s._v(" "),e("h2",{attrs:{id:"q-a"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#q-a"}},[s._v("#")]),s._v(" Q&A:")]),s._v(" "),e("p",[s._v("1.我想请你聊一聊，你遇到过Redis变慢的情况吗？如果有的话，你是怎么解决的呢？")])])}),[],!1,null,null,null);e.default=v.exports}}]);