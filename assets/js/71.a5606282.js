(window.webpackJsonp=window.webpackJsonp||[]).push([[71],{398:function(t,s,n){"use strict";n.r(s);var a=n(4),e=Object(a.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("blockquote",[s("p",[t._v("参考:")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://xv6.dgs.zone/",target:"_blank",rel:"noopener noreferrer"}},[t._v("一个博主的文档翻译"),s("OutboundLink")],1)])]),t._v(" "),s("p",[t._v("这节课主要介绍操作系统中的一些基本概念和重要的名词。")]),t._v(" "),s("p",[t._v("操作系统应该提供的功能：1. 多进程支持 2. 进程间隔离 3. 受控制的进程间通信")]),t._v(" "),s("ul",[s("li",[s("em",[t._v("xv6")]),t._v("："),s("strong",[t._v("一种在本课程中使用的类UNIX的教学操作系统")]),t._v("，运行在RISC-V指令集处理器上，本课程中将使用"),s("em",[t._v("QEMU")]),t._v("模拟器代替")])]),t._v(" "),s("h2",{attrs:{id:"kernal"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#kernal"}},[t._v("#")]),t._v(" Kernal")]),t._v(" "),s("p",[t._v("**kernel(内核)：**为运行的程序提供服务的一种特殊程序。每个运行着的程序叫做进程，每个进程的内存中存储指令、数据和堆栈。一个计算机可以拥有多个进程，但是只能有一个内核")]),t._v(" "),s("blockquote",[s("p",[t._v("进程通过"),s("strong",[t._v("系统调用")]),t._v("使用内核服务。系统调用会进入内核，让内核执行服务然后返回。"),s("strong",[t._v("所以进程总是在用户空间和内核空间之间交替运行")]),t._v("。")]),t._v(" "),s("p",[t._v("内核使用了 CPU 的硬件保护机制来保证用户进程只能访问自己的内存空间。内核拥有实现保护机制所需的硬件权限(hardware privileges)，而用户程序没有这些权限。当一个用户程序进行一次系统调用时，硬件会提升特权级并且开始执行一些内核中预定义的功能。")])]),t._v(" "),s("p",[s("strong",[t._v("每当进程需要调用内核时，它会触发一个"),s("em",[t._v("system call")]),t._v("（系统调用），system call进入内核执行相应的服务然后返回。")])]),t._v(" "),s("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://typora-1309665611.cos.ap-nanjing.myqcloud.com/typora/image-20231208165455028.png",alt:"image-20231208165455028"}}),t._v(" "),s("p",[t._v("下面是xv6提供部分system call截图:")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("系统调用")]),t._v(" "),s("th",[t._v("描述")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("fork()")]),t._v(" "),s("td",[t._v("创建进程")])]),t._v(" "),s("tr",[s("td",[t._v("exit()")]),t._v(" "),s("td",[t._v("结束当前进程")])]),t._v(" "),s("tr",[s("td",[t._v("wait()")]),t._v(" "),s("td",[t._v("等待子进程结束")])]),t._v(" "),s("tr",[s("td",[t._v("kill(pid)")]),t._v(" "),s("td",[t._v("结束 pid 所指进程")])]),t._v(" "),s("tr",[s("td",[t._v("getpid()")]),t._v(" "),s("td",[t._v("获得当前进程 pid")])]),t._v(" "),s("tr",[s("td",[t._v("sleep(n)")]),t._v(" "),s("td",[t._v("睡眠 n 秒")])])])]),t._v(" "),s("p",[s("strong",[t._v("Shell")]),t._v(":   shell 是一个普通程序，而不是内核的一部分。他接受用户输入的命令并执行他们，一般来说shell也是类Unix系统中最基本的用户界面。")]),t._v(" "),s("blockquote",[s("p",[t._v("正是因为shell不是内核的一部分，所以有各种各样的shell，xv6 shell 本质上是一个 Unix Bourne shell 的简单实现。")])]),t._v(" "),s("h2",{attrs:{id:"processes-and-memory"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#processes-and-memory"}},[t._v("#")]),t._v(" Processes and Memory")]),t._v(" "),s("p",[t._v("一个 xv6 进程由两部分组成：kernel将每一个进程用一个**PID(process identifier)**指代。")]),t._v(" "),s("ul",[s("li",[t._v("一部分是用户内存空间（指令，数据，栈）")]),t._v(" "),s("li",[t._v("另一部分是仅对内核可见的进程状态（内核空间）。")])]),t._v(" "),s("p",[t._v("常用systemcall:   fork, exit,wait,exec")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("fork")]),t._v("：形式："),s("code",[t._v("int fork()")]),t._v("。"),s("strong",[t._v("其作用是让一个进程生成另外一个和这个进程的内存内容相同的子进程")]),t._v("。\n"),s("ul",[s("li",[s("strong",[t._v("在父进程中，"),s("code",[t._v("fork")]),t._v("的返回值是这个子进程的PID，在子进程中，返回值是0")])]),t._v(" "),s("li",[t._v("子进程会从父进程fork处开始执行剩余的代码")])])]),t._v(" "),s("li",[s("code",[t._v("exit")]),t._v("：形式："),s("code",[t._v("int exit(int status)")]),t._v("。"),s("strong",[t._v("让调用它的进程停止执行并且将内存等占用的资源全部释放")]),t._v("。需要一个整数形式的状态参数，0代表以正常状态退出，1代表以非正常状态退出")]),t._v(" "),s("li",[s("code",[t._v("wait")]),t._v("：形式："),s("code",[t._v("int wait(int *status)")]),t._v("。"),s("strong",[t._v("等待子进程退出，返回子进程PID")]),t._v("，子进程的退出状态存储到"),s("code",[t._v("int *status")]),t._v("这个地址中。如果调用者没有子进程，"),s("code",[t._v("wait")]),t._v("将返回-1")]),t._v(" "),s("li",[s("code",[t._v("exec")]),t._v("：形式："),s("code",[t._v("int exec(char *file, char *argv[])")]),t._v("。"),s("strong",[t._v("加载一个文件，获取执行它的参数并执行")]),t._v("。如果执行错误返回-1，执行成功则不会返回，而是开始从文件入口位置开始执行命令。文件必须是ELF格式。\n"),s("ul",[s("li",[t._v("argv数组是常用的参数数组， 一般argv[0]是文件的名称，argv[1],...后面是其使用的参数")])])])]),t._v(" "),s("p",[s("strong",[t._v("Example:父进程和子进程的返回值")])]),t._v(" "),s("div",{staticClass:"language-C line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" pid"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\npid "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("fork")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pid "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"parent: child=%d\\n"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" pid"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    pid "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("wait")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"child %d is done\\n"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" pid"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pid "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"child: exiting\\n"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("exit")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"fork error\\n"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br")])]),s("blockquote",[s("p",[t._v("创建一个新进程，新进程会复制父进程的状态，"),s("strong",[t._v("并且从fork处开始执行代码，所以下面的else if,else两种情况会分别被父进程和子进程执行")])])]),t._v(" "),s("p",[t._v("前两行输出可能是")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("parent: child=1234\nchild: exiting\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("p",[t._v("也可能是")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("child: exiting\nparent: child=1234\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("p",[t._v("这是因为在fork了之后，父进程和子进程将同时开始判断PID的值，在父进程中，PID为1234，而在子进程中，PID为0。"),s("strong",[t._v("看哪个进程先判断好PID的值，以上输出顺序才会被决定。")])]),t._v(" "),s("p",[t._v("最后一行输出为")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("parent: child 1234 is done\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("子进程在判断完"),s("code",[t._v("pid == 0")]),t._v("之后将"),s("code",[t._v("exit")]),t._v("，父进程发现子进程"),s("code",[t._v("exit")]),t._v("之后，"),s("code",[t._v("wait")]),t._v("执行完毕，打印输出."),s("strong",[t._v("尽管"),s("code",[t._v("fork")]),t._v("了之后子进程和父进程有相同的内存内容，但是内存地址和寄存器是不一样的，也就是说在一个进程中改变变量并不会影响另一个进程。")])]),t._v(" "),s("p",[s("strong",[t._v("Tips:")])]),t._v(" "),s("p",[s("strong",[t._v("1.xv6 shell使用以上四个system call来为用户执行程序。")])]),t._v(" "),s("p",[t._v("在shell进程的"),s("code",[t._v("main")]),t._v("中主循环先通过"),s("code",[t._v("getcmd")]),t._v("来从用户获取命令，然后调用"),s("code",[t._v("fork")]),t._v("来运行一个和当前shell进程完全相同的子进程。父进程调用"),s("code",[t._v("wait")]),t._v("等待子进程"),s("code",[t._v("exec")]),t._v("执行完（在"),s("code",[t._v("runcmd")]),t._v("中调用"),s("code",[t._v("exec")]),t._v("）")]),t._v(" "),s("p",[t._v("2.xv6 没有用户这个概念当然更没有不同用户间的保护隔离措施。按照 Unix 的术语来说，所有的 xv6 进程都以 root 用户执行。")]),t._v(" "),s("h2",{attrs:{id:"i-o-and-file-description"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#i-o-and-file-description"}},[t._v("#")]),t._v(" I/O and File description")]),t._v(" "),s("p",[s("strong",[t._v("file descriptor(简写为fd)")]),t._v("：文件描述符，是操作系统内核用来标识和管理打开的文件、设备、网络连接等资源的整数值。**每当应用程序打开一个文件或者创建一个新的文件时，操作系统会为该文件分配一个文件描述符（隐式分配）。**文件描述符在应用程序和操作系统之间建立了一种通信机制，应用程序可以通过文件描述符来操作文件，读取或写入数据。")]),t._v(" "),s("blockquote",[s("p",[t._v("这个有点难理解，其实文件描述符就是一个参数，"),s("strong",[t._v("一个资源的抽象")]),t._v("，用数字表示对象是输入\\输出\\其他状态")]),t._v(" "),s("p",[t._v("标准输入就是终端输入，标准输出也就是终端输出")]),t._v(" "),s("p",[s("strong",[t._v("Conclusion")])]),t._v(" "),s("p",[t._v("文件描述符是一个强大的抽象，因为他们将他们所连接的细节隐藏起来了：一个进程向描述符1写出，它有可能是写到一份文件，一个设备（如控制台），或一个管道。")]),t._v(" "),s("p",[s("strong",[t._v("Tip：")])]),t._v(" "),s("ul",[s("li",[s("p",[t._v("需要手动关闭不必要的文件描述符（程序中），否则他们会占用着系统资源")])]),t._v(" "),s("li",[s("p",[t._v("对于fd来说，0是标准输入，1是标准输出，2是标准错误")])]),t._v(" "),s("li",[s("p",[t._v("文件描述符是系统分配的，"),s("code",[t._v("fd = open(path, 0))")]),t._v("比如open打开一个文件，系统就会分配一个文件描述符，open函数还会返回这个文件描述符")])])])]),t._v(" "),s("p",[s("strong",[t._v("每个进程都拥有自己独立的文件描述符列表")]),t._v("，其中0是标准输入，1是标准输出，2是标准错误。shell将保证总是有3个文件描述符是可用的（也就是把0,1,2预留给这个情况）。"),s("strong",[t._v("对于内核来说，文件描述符就是这张表的索引")])]),t._v(" "),s("p",[t._v("相关系统调用：")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("read")]),t._v("和"),s("code",[t._v("write")]),t._v("：形式"),s("code",[t._v("int write(int fd, char *buf, int n)")]),t._v("和"),s("code",[t._v("int read(int fd, char *bf, int n)")]),t._v("。"),s("strong",[t._v("从文件描述符"),s("code",[t._v("fd")]),t._v("读/写n字节"),s("code",[t._v("bf")]),t._v("的内容，返回值是成功读取/写入的字节数")]),t._v("。"),s("strong",[t._v("每个文件描述符有一个offset")]),t._v("，"),s("code",[t._v("read")]),t._v("会从这个offset开始读取内容，读完n个字节之后将这个offset后移n个字节，下一个"),s("code",[t._v("read")]),t._v("将从新的offset开始读取字节。"),s("code",[t._v("write")]),t._v("也有类似的offset来进行操作。")])]),t._v(" "),s("p",[t._v("**Example:**下面这段程序（"),s("strong",[t._v("实际上就是 "),s("code",[t._v("cat")]),t._v(" 的本质实现）将数据从标准输入复制到标准输出")]),t._v("，如果遇到了错误，它会在标准错误输出输出一条信息。")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* essence of cat program */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" buf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("512")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    n "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("read")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" buf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("sizeof")]),t._v(" buf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("fprintf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"read error\\n"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("exit")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("write")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" buf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("fprintf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"write error\\n"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("exit")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br")])]),s("ul",[s("li",[t._v("close()  形式是"),s("code",[t._v("int close(int fd)")]),t._v("，将打开的文件"),s("code",[t._v("fd（文件描述符）")]),t._v("释放，使该文件描述符可以被后面的"),s("code",[t._v("open")]),t._v("、"),s("code",[t._v("pipe")]),t._v("等其他"),s("code",[t._v("system call")]),t._v("使用。")])]),t._v(" "),s("blockquote",[s("p",[t._v("一个新分配的文件描述符永远都是当前进程的最小的未被使用的文件描述符。因为越新的fd越小。")])]),t._v(" "),s("p",[s("strong",[t._v("EXample :文件描述符和 "),s("code",[t._v("fork(),close()")]),t._v("等一起使用可以实现文件重定向")]),t._v(" 。")]),t._v(" "),s("p",[s("code",[t._v("fork")]),t._v(" 会复制父进程的文件描述符和内存，所以子进程和父进程的文件描述符一模一样。"),s("code",[t._v("exec")]),t._v(" 会替换调用它的进程的内存但是会保留它的文件描述符表。这种行为使得 shell 可以这样实现重定向："),s("code",[t._v("fork")]),t._v(" 一个进程，重新打开指定文件的文件描述符，然后执行新的程序。")]),t._v(" "),s("p",[t._v("下面是一个简化版的 shell 执行 "),s("code",[t._v("cat<input.txt")]),t._v(" 的代码:")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* implementation of I/O redirection,\n * more specifically, cat < input.txt\n */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("argv"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nargv"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"cat"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nargv"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("fork")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//fork返回0代表这是在子进程里面")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("close")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 释放该进程的文件描述符0，也就是标准输入")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("open")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"input.txt"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" O_RDONLY"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 0会被分配给这个文件，因为他刚刚创建，会被分配到最小可用的文件描述符（也就是0）")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("exec")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"cat"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" argv"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 执行cat操作，此时cat在标准输入指向 input.txt 的情况下运行")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br")])]),s("p",[t._v("Tips:")]),t._v(" "),s("p",[t._v("虽然 "),s("code",[t._v("fork")]),t._v(" 复制了文件描述符，但每一个文件的"),s("code",[t._v("offset")]),t._v("仍然是在父子进程之间共享的（也就是fork操作，父进程和子进程共享文件offset）。如：")]),t._v(" "),s("blockquote",[s("div",{staticClass:"language-C line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("fork")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("write")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello "')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("exit")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("wait")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("write")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"world\\n"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br")])])]),t._v(" "),s("p",[t._v('在这段代码的结尾，绑定在文件描述符1上的文件有数据"hello world"，'),s("strong",[t._v("父进程的 "),s("code",[t._v("write")]),t._v(" 会从子进程 "),s("code",[t._v("write")]),t._v(" 结束的地方继续写 (因为 "),s("code",[t._v("wait")]),t._v(" ,父进程只在子进程结束之后才运行 "),s("code",[t._v("write")]),t._v(")")])]),t._v(" "),s("ul",[s("li",[s("code",[t._v("dup")]),t._v("。形式是"),s("code",[t._v("int dup(int fd)")]),t._v("，复制一个已有的文件描述符，返回一个指向同一个输入/输出对象的新描述符。返回这个新fd值，两个I/O对象(文件)的offset相同\n"),s("ul",[s("li",[t._v("注意这个fd也是从最小可分配的fd开始分配")]),t._v(" "),s("li",[t._v("除了"),s("code",[t._v("dup")]),t._v("和"),s("code",[t._v("fork")]),t._v("之外，其他方式"),s("strong",[t._v("不能")]),t._v("使两个I/O对象的offset相同，比如同时"),s("code",[t._v("open")]),t._v("相同的文件不行")])])])]),t._v(" "),s("h2",{attrs:{id:"pipes"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#pipes"}},[t._v("#")]),t._v(" Pipes")]),t._v(" "),s("p",[s("strong",[t._v("pipe")]),t._v("，管道是一个小的内核缓冲区，"),s("strong",[t._v("暴露给进程的一对文件描述符，一个用于写操作，一个用于读操作")]),t._v("。从管道的一端写的数据可以从管道的另一端读取。"),s("strong",[t._v("管道提供了一种进程间交互方式。")])]),t._v(" "),s("ul",[s("li",[s("code",[t._v("pipe")]),t._v("是一个system call，形式为"),s("code",[t._v("int pipe(int p[])")]),t._v("，"),s("code",[t._v("p[0]")]),t._v("为读取的文件描述符，"),s("code",[t._v("p[1]")]),t._v("为写入的文件描述符")]),t._v(" "),s("li",[s("strong",[t._v("管道某些时候会阻塞进程，这有利于进程同步")]),t._v("。当一个进程试图从空管道中读取数据时，它将被阻塞，直到有数据可读。同样地，当一个进程试图向已满的管道中写入数据时，它也会被阻塞，直到有空间可用。")])]),t._v(" "),s("blockquote",[s("p",[s("strong",[t._v("Tip：")])]),t._v(" "),s("p",[t._v("需要手动关闭不必要的管道（程序中），否则他们会占用着系统资源，或者造成意外的操作")])]),t._v(" "),s("p",[s("strong",[t._v("Example：运行程序"),s("code",[t._v("wc")]),t._v(",并将其的标准输出绑定到一个管道的读端口")])]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* run the program wc with stdin connected to the read end of pipe, parent process able to communicate with child process */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" p"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("argv"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nargv"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"wc"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nargv"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("pipe")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// read fd put into p[0], write fd put into p[1]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("fork")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//in child process")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//注意，fork之后，子进程和父进程程都有了指向管道的文件描述符")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("close")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("dup")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// make the fd 0 refer to the read end of pipe")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//这两行的含义是先关闭0这个 fd，那么0处于可用状态")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//然后dup(p[0]),会导致0被指向p[0]所指向的读端口")]),t._v("\n    \n    \n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//下面两行是关闭原来的p[0]，p[1]的文件描述符")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//关闭原来的p[0]是因为他不会用到")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("close")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// original read end of pipe is closed")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("close")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// fd p[1] is closed in child process, but not closed in the parent process. 注意这里关闭p[1]非常重要，因为如果不关闭p[1]，管道的读取端会一直等待读取，wc就永远也无法等到EOF")]),t._v("\n    \n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//当 wc 从标准输入读取时，它实际上是从管道读取的")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("exec")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/bin/wc"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" argv"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// by default wc will take fd 0 as the input, which is the read end of pipe in this case")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("close")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// close the read end of pipe in parent process will not affect child process")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("write")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello world\\n"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("12")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("close")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// write end of pipe closed, the pipe shuts down")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br"),s("span",{staticClass:"line-number"},[t._v("22")]),s("br"),s("span",{staticClass:"line-number"},[t._v("23")]),s("br"),s("span",{staticClass:"line-number"},[t._v("24")]),s("br"),s("span",{staticClass:"line-number"},[t._v("25")]),s("br"),s("span",{staticClass:"line-number"},[t._v("26")]),s("br"),s("span",{staticClass:"line-number"},[t._v("27")]),s("br"),s("span",{staticClass:"line-number"},[t._v("28")]),s("br"),s("span",{staticClass:"line-number"},[t._v("29")]),s("br")])]),s("p",[t._v("这段代码中，父进程使用 "),s("code",[t._v("write()")]),t._v(" 调用向管道中写入数据，而子进程执行了 "),s("code",[t._v("wc")]),t._v(" 命令并从管道的读端读取数据进行处理。")]),t._v(" "),s("blockquote",[s("p",[t._v("读这个代码时我有一些疑惑和思考：")]),t._v(" "),s("p",[t._v("1.fork之后，子进程和父进程程都有了指向管道的文件描述符，也就是他们指向了同一管道?")]),t._v(" "),s("p",[t._v("A:是的。调用 "),s("code",[t._v("fork()")]),t._v(" 创建子进程时，子进程会继承父进程的文件描述符。这意味着子进程会拥有与父进程相同的文件描述符，包括指向同一管道的文件描述符。")]),t._v(" "),s("p",[t._v("2.管道到底是什么，为什么关闭子进程的fd或者父进程的fd好像不会影响对方的管道操作?")]),t._v(" "),s("p",[t._v("A:  管道（Pipe）是一种用于进程间通信的机制，它可以在具有亲缘关系的进程之间传递数据。在操作系统中，管道是由内核创建和管理的。管道通常是一个字节流，它具有一个读端和一个写端。写入端的数据会被保存在管道中，然后可以从读取端读取出来。这使得通过管道可以实现一个进程将数据发送给另一个进程的简单通信方式。")]),t._v(" "),s("p",[t._v("至于关于文件描述符的关闭，子进程和父进程是相互独立的，它们各自拥有独立的文件描述符表。当一个进程关闭一个文件描述符时，它只会影响到自己的文件描述符表，而不会直接影响其他进程的文件描述符。")]),t._v(" "),s("p",[t._v("要注意的是，"),s("strong",[t._v("当所有对管道写端的文件描述符都关闭时，管道会发出一个特殊的信号，称为“管道破裂”（Pipe Broken）。当管道破裂后，再次尝试从管道读取数据的进程会立即收到一个读取结束的信号。这是因为在管道的写端没有任何进程可以写入数据时，读取端会得到一个表示结束的信号。")])]),t._v(" "),s("p",[t._v("所以我们才必须也关闭子文件的p[1],这样当父进程也关闭p[1]后，"),s("strong",[t._v("再次尝试从管道读取数据的进程会立即收到一个读取结束的信号")]),t._v("。这是因为在管道的写端没有任何进程可以写入数据时，读取端会得到一个表示结束的信号。")])]),t._v(" "),s("h2",{attrs:{id:"file-system"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#file-system"}},[t._v("#")]),t._v(" File System")]),t._v(" "),s("p",[t._v("xv6文件系统包含了 文件(byte arrays)和目录(对其他文件和目录的引用)。"),s("strong",[t._v("目录生成了一个树，树从根目录"),s("code",[t._v("/")]),t._v("开始。对于不以"),s("code",[t._v("/")]),t._v("开头的路径，认为是是相对路径")])]),t._v(" "),s("ul",[s("li",[s("p",[s("code",[t._v("mknod")]),t._v("：创建设备文件，一个设备文件有一个major device #（主设备号）和一个minor device #（辅设备号）用来唯一确定这个设备。当一个进程打开了这个设备文件时，"),s("strong",[t._v("内核会将"),s("code",[t._v("read")]),t._v("和"),s("code",[t._v("write")]),t._v("的system call重新定向到设备上。")])])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("一个文件的名称和文件本身有很大区别。同一个文件本身叫inode，这个文件可以有多个名字(link)，每个link包括了一个文件名和一个对inode的引用。一个inode存储了文件的元数据，包括该文件的类型(file, directory or device)、大小、文件在硬盘中的存储位置以及指向这个inode的link的个数（这个概念很重要）")])])]),t._v(" "),s("li",[s("p",[s("code",[t._v("fstat")]),t._v("。一个system call，形式为"),s("code",[t._v("int fstat(int fd, struct stat *st)")]),t._v("，将inode中的相关信息存储到"),s("code",[t._v("st")]),t._v("中。")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("link")]),t._v("。一个system call，将创建一个指向同一个inode的文件名。"),s("code",[t._v("unlink")]),t._v("则是将一个文件名从文件系统中移除，只有当指向这个inode的文件名的数量为0时这个inode以及其存储的文件内容才会被从硬盘上移除(也就是"),s("code",[t._v("nlink==0")]),t._v(",就相当于这个"),s("code",[t._v("inode")]),t._v("被删除了)")])])]),t._v(" "),s("p",[t._v("Example:创建一个link 名为b，他们指向同一个"),s("code",[t._v("inode")])]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("open")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"a"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" O_CREATE"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("O_WRONGLY"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("link")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"a"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"b"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//们可以通过 fstat 知道 a 和 b 都指向同样的内容：a 和 b 都会返回同样的 inode 号（ino），并且 nlink 数会设置为2。")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("p",[t._v("注意：Unix提供了许多在"),s("strong",[t._v("用户层面")]),t._v("的程序来执行文件系统相关的操作，比如"),s("code",[t._v("mkdir")]),t._v("、"),s("code",[t._v("ln")]),t._v("、"),s("code",[t._v("rm")]),t._v("等，而不是将其放在shell或kernel内，这样可以使用户比较方便地在这些程序上进行扩展。")]),t._v(" "),s("p",[s("strong",[t._v("但是"),s("code",[t._v("cd")]),t._v("是一个例外，它是在shell程序内构建的")]),t._v("，因为它必须要改变这个calling shell本身指向的路径位置，如果是一个和shell平行的程序，那么它必须要调用一个子进程，在子进程里起一个新的shell，再进行"),s("code",[t._v("cd")]),t._v("，这是不符合常理的。")])])}),[],!1,null,null,null);s.default=e.exports}}]);