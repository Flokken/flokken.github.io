(window.webpackJsonp=window.webpackJsonp||[]).push([[184],{510:function(t,a,v){"use strict";v.r(a);var _=v(4),s=Object(_.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"概述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[t._v("#")]),t._v(" 概述")]),t._v(" "),a("blockquote",[a("p",[t._v("垃圾收集（Garbage Collection , GC）")])]),t._v(" "),a("p",[a("strong",[t._v("程序计数器、虚拟机栈、本地方法栈三个区域随线程而生")]),t._v("，随线程而灭；栈中的栈帧随着方法的进入和退出而有条不紊地执行着出栈和入栈操作，每一个栈帧需要分配多少内存基本上是在类结构确定下来时就已知的（尽管在运行期会由JIT编译器进行一些优化，但是大体上可以认为是编译器可知的），因此在这几个区域的内存分配和回收都具有确定性，这几个区域不太需要过多地考虑回收的问题。")]),t._v(" "),a("blockquote",[a("p",[t._v("上节也说了，线程的内存大小基本就是栈大小，因为线程就是Pc，虚拟机栈（Hotspot方法栈和虚拟机栈合在一起了）")])]),t._v(" "),a("p",[t._v("而Java堆和方法区则不一样，一个接口中的多个实现类需要的内存可能不一样，一个方法中的多个分支需要的内存也可能不一样，我们只有在程序处于运行期间才能知道会创建哪些对象，这部分的内存分配和回收都是动态的，"),a("strong",[t._v("垃圾收集器需要关注的是这部分内存，我们所讨论的“内存”分配与回收也仅仅指着一部分")]),t._v("。")]),t._v(" "),a("blockquote",[a("p",[t._v("也就是GC回收的堆中的东西")])]),t._v(" "),a("h3",{attrs:{id:"重点内容"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#重点内容"}},[t._v("#")]),t._v(" 重点内容")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("哪些内存需要回收")]),t._v(" "),a("ul",[a("li",[t._v("堆的内存（栈的内存是周期短，很快会释放），还有方法区（）")])])]),t._v(" "),a("li",[a("p",[t._v("如何判断对象可以回收")]),t._v(" "),a("ul",[a("li",[t._v("可达性分析（不可达的就认为可以回收）")])])]),t._v(" "),a("li",[a("p",[t._v("垃圾回收算法")])]),t._v(" "),a("li",[a("p",[t._v("如何回收")]),t._v(" "),a("ul",[a("li",[t._v("分代垃圾回收")]),t._v(" "),a("li",[t._v("垃圾回收器")])])])]),t._v(" "),a("h2",{attrs:{id:"判断对象活着没"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#判断对象活着没"}},[t._v("#")]),t._v(" 判断对象活着没")]),t._v(" "),a("p",[t._v("堆中存放着Java世界中几乎所有的对象，"),a("strong",[t._v("垃圾收集器在对堆进行回收前，第一件事就是要确定哪些对象还“存活着”，哪些已经“死去”（即不可能再被任何途径使用的对象）。")])]),t._v(" "),a("h3",{attrs:{id:"引用计数算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#引用计数算法"}},[t._v("#")]),t._v(" 引用计数算法")]),t._v(" "),a("blockquote",[a("p",[a("strong",[t._v("引用计数算法（Reference Counting）")]),t._v("：给对象添加一个引用计数器，每当有一个地方引用它时，计数器的数值就加1；当引用失效时，计数器数值就减1；任何时刻计数器都为0的对象就是不可能 再被使用的。\n实际上，Java并没有采用引用计数算法，因为它很难解决对象之间的相互循环引用的问题。")])]),t._v(" "),a("h4",{attrs:{id:"举例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#举例"}},[t._v("#")]),t._v(" 举例")]),t._v(" "),a("div",{staticClass:"language-python line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ObjectA")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("__init__")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("None")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ObjectB")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("__init__")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("None")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 创建对象并建立循环引用")]),t._v("\nobj_a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" ObjectA"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nobj_b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" ObjectB"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nobj_a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" obj_b\nobj_b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" obj_a\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br")])]),a("p",[t._v("在这个例子中，"),a("code",[t._v("obj_a")]),t._v("和"),a("code",[t._v("obj_b")]),t._v("相互引用，形成了循环引用。此时，"),a("code",[t._v("ObjectA")]),t._v("和"),a("code",[t._v("ObjectB")]),t._v("的实例的引用计数为2，因为它们被"),a("code",[t._v("obj_a")]),t._v("和"),a("code",[t._v("obj_b")]),t._v("这两个变量引用。")]),t._v(" "),a("p",[t._v("再看一个例子，这个例子没有循环引用，引用计数法可以正常工作")]),t._v(" "),a("div",{staticClass:"language-python line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ObjectA")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("__init__")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("None")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ObjectB")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("__init__")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("None")]),t._v("\n\nobj_a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" ObjectA"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 创建ObjectA的实例obj_a")]),t._v("\nobj_b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" ObjectB"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 创建ObjectB的实例obj_b")]),t._v("\n\nobj_a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" obj_b      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 将obj_a的引用指向了obj_b所引用的ObjectB实例")]),t._v("\nobj_b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" obj_a      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 将obj_b的引用指向了obj_a所引用的ObjectB实例（此时obj_a和obj_b指向同一个对象）")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 现在没有对象之间形成循环引用，obj_a和obj_b都指向同一个ObjectB实例")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br")])]),a("p",[t._v("为什么上面那个例子有循环引用？")]),t._v(" "),a("p",[t._v("因为里面有他的属性引用了另外一个对象，也就是第一个例子其实有四个引用计数，obj_a对ObjectA()的实例，obj_b对ObjectB()的实例，objA.b对 objB的引用，objB.a对 objA的引用，第二个例子只有两个objA对ObjectA()的实例（后面也指向B），objB对ObjectB()的实例的引用计数")]),t._v(" "),a("p",[t._v("接下来看为什么有了循环引用，引用计数法失效，")]),t._v(" "),a("div",{staticClass:"language-python line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("del")]),t._v(" obj_a\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("del")]),t._v(" obj_b \n或者\nobj_a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("null\nobj_b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("null\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])]),a("p",[t._v("当我们让一个变量失效时，只会让他引用的那个计数失效，这里的就是，obja对ObjectA()的实例，objb对ObjectB()的实例的引用计数，这样就会导致objA.b对 objB的引用，objB.a对 objA的引用仍然还在，"),a("strong",[t._v("也就是对象之间的引用计数失效。")])]),t._v(" "),a("p",[t._v("所以，引用计数法在碰到这种循环引用时，不能正确的让引用归0，可能导致内存泄露")]),t._v(" "),a("blockquote",[a("p",[t._v("内存泄漏是指在计算机程序中，已经不再使用的内存没有被正确释放或回收的现象")])]),t._v(" "),a("h3",{attrs:{id:"根搜索算法-gc-roots-tracing"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#根搜索算法-gc-roots-tracing"}},[t._v("#")]),t._v(" 根搜索算法（GC Roots Tracing）")]),t._v(" "),a("p",[t._v("在主流的商业程序语言中（Java和C#），都是使用"),a("strong",[t._v("根搜索算法（GC Roots Tracing）来判定对象是否存活的。\n这个算法的基本思路是：通过一系列的名字为“GC Roots”的对象作为起点，从这些节点开始向下搜索，搜索所走过的路径称为引用链（Reference Chain）")]),t._v("，当一个对象到GC Roots没有任何引用链对象相连（"),a("strong",[t._v("用图论的话说，就是从GC Roots到这个对象不可到达")]),t._v("）时，则证明此对象不可用。")]),t._v(" "),a("p",[t._v("总结一下：")]),t._v(" "),a("ul",[a("li",[t._v('从 "GC Root" 对象作为起点开始向下搜索，走过的路径称为引用链（Reference Chain）；')]),t._v(" "),a("li",[a("strong",[t._v('从 "GC Root" 开始，不可达的对象被判为不可用（可以回收）。')])])]),t._v(" "),a("p",[t._v("如下图示：")]),t._v(" "),a("img",{staticStyle:{zoom:"80%"},attrs:{src:"https://typora-1309665611.cos.ap-nanjing.myqcloud.com/typora/image-20230719214445943.png"}}),t._v(" "),a("blockquote",[a("p",[t._v("右边那个，没有到GC Root的边，所以判定为不可达，所以要被回收、")])]),t._v(" "),a("h4",{attrs:{id:"java-中可作为-gc-root-的对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#java-中可作为-gc-root-的对象"}},[t._v("#")]),t._v(" "),a("strong",[t._v("Java 中可作为 “GC Root” 的对象")])]),t._v(" "),a("ul",[a("li",[t._v("虚拟机栈（栈中的本地（局部）变量表）中的"),a("strong",[t._v("引用的对象")])]),t._v(" "),a("li",[t._v("方法区中的类静态属性"),a("strong",[t._v("引用的对象")])]),t._v(" "),a("li",[t._v("方法区中的"),a("strong",[t._v("常量引用的对象")])]),t._v(" "),a("li",[t._v("本地方法栈中JNI（即一般说的Native方法）"),a("strong",[t._v("的引用的对象")])])]),t._v(" "),a("blockquote",[a("p",[t._v("也就是说，要枚举GC Root对象时，得去找这些对象")]),t._v(" "),a("p",[t._v("书上的说法：固定可作为GC Roots的节点主要在全局性的引用（例如常量或类静态属性）与执行上下文（例如 栈帧中的本地变量表）中")])]),t._v(" "),a("p",[a("strong",[t._v("注意，就算一个对象不可达，也不是马上就回收他（但是说明他可以回收）。（下面讲到，两次标记过程）")])]),t._v(" "),a("p",[t._v("既然要找对象，我们知道对象在堆里，那肯定就要去找他，"),a("strong",[t._v("怎么找？通过引用找")])]),t._v(" "),a("h4",{attrs:{id:"引用类型-四种"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#引用类型-四种"}},[t._v("#")]),t._v(" 引用类型（四种）")]),t._v(" "),a("p",[t._v("在JDK1.2之前，Java中的引用（Reference）非常狭隘：")]),t._v(" "),a("blockquote",[a("p",[a("strong",[t._v("如果Reference类型的数据中存储的数值代表着另一块内存的起始地址，就称这块内存代表着一个引用。")])])]),t._v(" "),a("p",[t._v("JDK 1.2 后，Java 中才有了后 3 种引用的实现，总共四种。")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("强引用：")]),t._v(" 像 "),a("code",[t._v("Object obj = new Object()")]),t._v(" 这种，只要强引用还存在，垃圾收集器就永远不会回收掉被引用的对象。")]),t._v(" "),a("li",[a("strong",[t._v("软引用：")]),t._v(" 用来引用还存在但非必须的对象。对于软引用对象，在 OOM 前，虚拟机会把这些对象列入回收范围中进行第二次回收，如果这次回收后，内存还是不够用，就 OOM。实现类："),a("code",[t._v("SoftReference")]),t._v("。")]),t._v(" "),a("li",[a("strong",[t._v("弱引用：")]),t._v(" 被弱引用引用的对象只能生存到下一次垃圾收集前，一旦发生垃圾收集，被弱引用所引用的对象就会被清掉。实现类："),a("code",[t._v("WeakReference")]),t._v("。")]),t._v(" "),a("li",[a("strong",[t._v("虚引用：")]),t._v(" 幽灵引用，对对象没有半毛钱影响，甚至不能用来取得一个对象的实例。它唯一的用途就是：当被一个虚引用引用的对象被回收时，系统会收到这个对象被回收了的通知。实现类："),a("code",[t._v("PhantomReference")]),t._v("。")])]),t._v(" "),a("h4",{attrs:{id:"宣告对象死亡的两次标记过程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#宣告对象死亡的两次标记过程"}},[t._v("#")]),t._v(" 宣告对象死亡的两次标记过程")]),t._v(" "),a("p",[t._v("要真正宣告一个对象死亡，至少要经历两次标记过程")]),t._v(" "),a("ul",[a("li",[t._v("当发现对象不可达后，该对象被第一次标记，并进行是否有必要执行"),a("code",[t._v("finalize()")]),t._v("方法的判断；\n"),a("ul",[a("li",[t._v("不需要执行：对象没有覆盖 "),a("code",[t._v("finalize()")]),t._v(" 方法，或者 "),a("code",[t._v("finalize()")]),t._v(" 方法已被执行过（"),a("strong",[a("code",[t._v("finalize()")]),t._v(" 只被执行一次（最多执行一次）")]),t._v("）；")]),t._v(" "),a("li",[t._v("需要执行：将该对象放置在一个队列中，稍后由一个虚拟机自动创建的低优先级线程执行。")])])]),t._v(" "),a("li",[a("code",[t._v("finalize()")]),t._v(" 方法是对象逃脱死亡的最后一次机会，不过虚拟机不保证等待 "),a("code",[t._v("finalize()")]),t._v(" 方法执行结束，也就是说，虚拟机只触发 "),a("code",[t._v("finalize()")]),t._v(" 方法的执行，如果这个方法要执行超久，那么虚拟机并不等待它执行结束，所以最好不要用这个方法。")]),t._v(" "),a("li",[a("code",[t._v("finalize()")]),t._v(" 方法能做的，"),a("strong",[t._v("try-finally 都能做，所以忘了这个方法吧")]),t._v("！")])]),t._v(" "),a("blockquote",[a("p",[t._v("官方也不推荐使用finallize，"),a("strong",[t._v("书里讲这个只是为了说明，标记为不可达的对象不会马上被回收，而是后面还有一些判断和处理！")])])]),t._v(" "),a("h2",{attrs:{id:"回收方法区"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#回收方法区"}},[t._v("#")]),t._v(" 回收方法区")]),t._v(" "),a("blockquote",[a("p",[t._v("ava虚拟机规范不要求虚拟机在方法区实现垃圾收集，而且在方法区进行垃圾收集的“性价比”一般都比较低：在堆中，尤其是在新生代中，常规应用进行一次垃圾收集一般可回收70%～95%的空间。"),a("strong",[t._v("而永久代的垃圾收集效率远低于此。")])])]),t._v(" "),a("p",[t._v("永久代的垃圾收集主要分为两部分内容：废弃常量和无用的类。")]),t._v(" "),a("ul",[a("li",[t._v('废弃常量：例如一个字符串 "abc"，当没有任何引用指向 "abc" 时，它就是废弃常量了。')]),t._v(" "),a("li",[t._v("无用的类：同时满足以下 3 个条件的类。\n"),a("ul",[a("li",[t._v("该类的所有实例已被回收，Java 堆中不存在该类的任何实例；")]),t._v(" "),a("li",[t._v("加载该类的 Classloader 已被回收；")]),t._v(" "),a("li",[t._v("该类的 Class 对象没有被任何地方引用，即无法在任何地方通过反射访问该类的方法。")])])])]),t._v(" "),a("blockquote",[a("p",[t._v("永久代是方法区的一部分，jdk8后被元空间取代；")]),t._v(" "),a("p",[t._v("新生代是堆的一部分（堆分为老年代和新生代）")]),t._v(" "),a("p",[a("strong",[t._v("强调一下，方法区不是堆的一部分，两者不是一个内存区域")])])]),t._v(" "),a("h2",{attrs:{id:"垃圾回收算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#垃圾回收算法"}},[t._v("#")]),t._v(" 垃圾回收算法")]),t._v(" "),a("h3",{attrs:{id:"分代收集理论"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分代收集理论"}},[t._v("#")]),t._v(" 分代收集理论")]),t._v(" "),a("p",[t._v("各个平台的虚拟机的收集算法可能并不相同，这里介绍主流的。")]),t._v(" "),a("p",[t._v("从如何判定对象消亡的角度出发，垃圾收集算法可以划分为“引用计数式垃圾收集”（Reference Counting GC）和“追踪式垃圾收集”（Tracing GC）两大类，这两类也常被称作“直接垃圾收集”和“间接 垃圾收集”。")]),t._v(" "),a("blockquote",[a("p",[t._v("当然，主流的是追踪式垃圾收集，因为引用技术法并不是主流")])]),t._v(" "),a("p",[t._v("当前商业虚拟机的垃圾收集器，大多数都遵循了“分代收集”（Generational Collection）：")]),t._v(" "),a("ul",[a("li",[t._v("弱分代假说（Weak Generational Hypothesis）：绝大多数对象都是朝生夕灭的。")]),t._v(" "),a("li",[t._v("强分代假说（Strong Generational Hypothesis）：熬过越多次垃圾收集过程的对象就越难以消 亡。")])]),t._v(" "),a("p",[t._v("这两个分代假说共同奠定了多款常用的垃圾收集器的一致的设计原则："),a("strong",[t._v("收集器应该将Java堆划分 出不同的区域，然后将回收对象依据其年龄（年龄即对象熬过垃圾收集过程的次数）分配到不同的区 域之中存储。")])]),t._v(" "),a("p",[t._v("在Java堆划分出不同的区域之后，垃圾收集器才可以每次只回收其中某一个或者某些部分的区域 ——"),a("strong",[t._v("因而才有了Minor GC（新生代收集），Major GC（老年代收集），Full GC（整堆收集）这样的回收类型的划分；也才能够针对不同的区域安 排与里面存储对象存亡特征相匹配的垃圾收集算法")]),t._v("——因而发展出了“标记-复制算法”“标记-清除算 法”“标记-整理算法”等针对性的垃圾收集算法")]),t._v(" "),a("blockquote",[a("p",[t._v("也就是说，基于分代理论，才把java内存划成那些区域，并且基于这些区域，进行不同的垃圾收集算法")]),t._v(" "),a("p",[t._v("Full GC指的是收集java整个堆（包括新生代和老年代），以及方法区。")])]),t._v(" "),a("h3",{attrs:{id:"标记-清除算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#标记-清除算法"}},[t._v("#")]),t._v(" 标记 - 清除算法")]),t._v(" "),a("blockquote",[a("p",[t._v("最基础也是最早的回收算法")])]),t._v(" "),a("p",[t._v("特点：")]),t._v(" "),a("ul",[a("li",[t._v("速度快")]),t._v(" "),a("li",[t._v("有内存碎片")])]),t._v(" "),a("p",[t._v("算法描述：")]),t._v(" "),a("ul",[a("li",[t._v("先标记出所有需要回收的对象。")]),t._v(" "),a("li",[t._v("标记完后，统一回收所有被标记对象。")])]),t._v(" "),a("blockquote",[a("p",[t._v("那么怎么样判断标记对象呢，因为我们判断对象存活用的根搜索算法，这里要么是标记不可达的对象，在第二步中清除标记的对象（也就是垃圾，不可达对象）；")]),t._v(" "),a("p",[t._v("要么是标记存活的对象(可达的就是存活的)，第二步清楚未标记对象（不可达的），两种方法本质上一样")])]),t._v(" "),a("p",[t._v("不足：")]),t._v(" "),a("ul",[a("li",[t._v("效率问题：标记和清理两个过程的效率都不高（因为很多对象都需要回收，就需要大量的标记过程，再去一个个对标记的对象进行判断，再清理）。")]),t._v(" "),a("li",[t._v("空间碎片问题：标记清除后会产生大量不连续的内存碎片，"),a("strong",[t._v("导致以后为较大的对象分配内存时找不到足够的连续内存，而不得不提前触发另一次 GC。")])])]),t._v(" "),a("img",{staticStyle:{zoom:"80%"},attrs:{src:"https://typora-1309665611.cos.ap-nanjing.myqcloud.com/typora/image-20230729153032287.png"}}),t._v(" "),a("center",[t._v(" 标记清除")]),t._v(" "),a("blockquote",[a("p",[t._v("图中灰色的没有GCroot，表示不可达，所有被清除，白色就表示空闲")]),t._v(" "),a("p",[t._v("后面的图也是，有GCroot相连的才说明不回收")])]),t._v(" "),a("h3",{attrs:{id:"标记-复制算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#标记-复制算法"}},[t._v("#")]),t._v(" 标记-复制算法")]),t._v(" "),a("p",[t._v("特点：")]),t._v(" "),a("ul",[a("li",[t._v("没有碎片")]),t._v(" "),a("li",[t._v("占用更多空间")]),t._v(" "),a("li",[t._v("实际上并不会等分可用和保留的空间")])]),t._v(" "),a("p",[t._v("标记-复制算法常被简称为复制算法**。为了解决标记-清除算法面对大量可回收对象时执行效率低 的问题。**")]),t._v(" "),a("p",[t._v("这个算法首先把内存分成两部分，假设是相等的两部分A和B，一部分先空着，一部分拿去用；如果A用完了，就把A的存活的对象复制到B，然后把A的所有对象清理了。")]),t._v(" "),a("p",[t._v("好处：不用考虑空间碎片你，效率也高。")]),t._v(" "),a("p",[t._v("缺点：可用内存会闲置，浪费空间。")]),t._v(" "),a("p",[a("strong",[t._v("实际上并不会等分可用和保留的空间。")])]),t._v(" "),a("blockquote",[a("p",[t._v("IBM公司曾有一项专门研 究对新生代“朝生夕灭”的特点做了更量化的诠释——新生代中的对象有98%熬不过第一轮收集。因此 并不需要按照1∶1的比例来划分新生代的内存空间。")])]),t._v(" "),a("p",[a("strong",[t._v("算法描述：")])]),t._v(" "),a("ul",[a("li",[t._v("把内存划分为：\n"),a("ul",[a("li",[t._v("1 块比较大的 Eden 区；")]),t._v(" "),a("li",[t._v("2 块较小的 Survivor 区；")])])]),t._v(" "),a("li",[t._v("每次使用 Eden 区和 1 块 Survivor 区；")]),t._v(" "),a("li",[t._v("回收时，将以上 2 部分区域中的存活对象复制到另一块 Survivor 区中，然后将以上两部分区域清空；")]),t._v(" "),a("li",[t._v("JVM 参数设置："),a("code",[t._v("-XX:SurvivorRatio=8")]),t._v(" 表示 "),a("code",[t._v("Eden 区大小 / 1 块 Survivor 区大小 = 8")]),t._v("。")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://typora-1309665611.cos.ap-nanjing.myqcloud.com/typora/image-20230729153303176.png",alt:"image-20230729153303176"}})]),t._v(" "),a("blockquote",[a("p",[t._v("把对象复制到另一块保留的空闲内存中")])]),t._v(" "),a("h3",{attrs:{id:"标记-整理算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#标记-整理算法"}},[t._v("#")]),t._v(" 标记 - 整理算法")]),t._v(" "),a("p",[t._v("特点：")]),t._v(" "),a("ul",[a("li",[t._v("速度慢")]),t._v(" "),a("li",[t._v("不会有内存碎片")])]),t._v(" "),a("p",[t._v("算法描述：")]),t._v(" "),a("ul",[a("li",[t._v("标记方法与 “标记 - 清除算法” 一样；")]),t._v(" "),a("li",[t._v("标记完后，将所有存活对象向一端移动，然后直接清理掉边界以外的内存。")])]),t._v(" "),a("p",[a("strong",[t._v("相较于标记-清除算法，这个算法的优点是可以避免空间碎片的问题。")])]),t._v(" "),a("blockquote",[a("p",[t._v("主要应用于老年代，因为老年代中存放的对象往往较为稳定，而且由于对象的存活时间较长，老年代中可能产生较多的不连续的内存碎片。")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://typora-1309665611.cos.ap-nanjing.myqcloud.com/typora/image-20230729153801178.png",alt:"image-20230729153801178"}})]),t._v(" "),a("h4",{attrs:{id:"补充"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#补充"}},[t._v("#")]),t._v(" 补充")]),t._v(" "),a("h5",{attrs:{id:"stop-world"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#stop-world"}},[t._v("#")]),t._v(" Stop-World")]),t._v(" "),a("p",[a("strong",[t._v("当进行某些操作时，需要完全暂停用户的应用程序（线程），就叫STW")])]),t._v(" "),a("ul",[a("li",[t._v("对象移动")]),t._v(" "),a("li",[t._v("枚举根节点")])]),t._v(" "),a("h3",{attrs:{id:"实际"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实际"}},[t._v("#")]),t._v(" 实际")]),t._v(" "),a("h4",{attrs:{id:"分代收集算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分代收集算法"}},[t._v("#")]),t._v(" 分代收集算法")]),t._v(" "),a("p",[a("strong",[t._v("当前商业虚拟机的垃圾收集都是采用“分代收集（Generational Collection）算法”")]),t._v("，根据对象的"),a("strong",[t._v("存活周期")]),t._v("的不同将内存划分为几块。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://typora-1309665611.cos.ap-nanjing.myqcloud.com/typora/image-20230729153840897.png",alt:"image-20230729153840897"}})]),t._v(" "),a("ul",[a("li",[t._v("对象首先分配在伊甸园区域")]),t._v(" "),a("li",[t._v("新生代空间不足时，触发 minor gc，伊甸园和 from 存活的对象使用 copy 复制到 to 中，存活的 对象年龄加 1并且交换 from to")]),t._v(" "),a("li",[t._v("minor gc 会引发 stop the world，暂停其它用户的线程，等垃圾回收结束，用户线程才恢复运行")]),t._v(" "),a("li",[t._v("当对象寿命超过阈值时，会晋升至老年代，最大寿命是15（不一定，但是反正有一个阈值）（4bit）")]),t._v(" "),a("li",[a("strong",[t._v("当老年代空间不足，会先尝试触发 minor gc，如果之后空间仍不足，那么触发 full gc，STW的时 间更长")])])]),t._v(" "),a("p",[t._v("不同代使用垃圾回收算法也不一样")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("新生代：")]),t._v(" GC 过后只有少量对象存活 —— "),a("strong",[t._v("复制算法")]),t._v("（因为复制对象后还要更新其引用，这个操作非常昂贵）")]),t._v(" "),a("li",[a("strong",[t._v("老年代：")]),t._v(" GC 过后对象存活率高 —— "),a("strong",[t._v("标记 - 整理算法")])])]),t._v(" "),a("p",[t._v("新生代的特点 ：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("所有的 new 操作的内存分配非常廉价")]),t._v(" "),a("ul",[a("li",[t._v("TLAB thread-local allocation buffer")])])]),t._v(" "),a("li",[a("p",[t._v("死亡对象的回收代价是零")])]),t._v(" "),a("li",[a("p",[t._v("大部分对象用过即死")])]),t._v(" "),a("li",[a("p",[t._v("Minor GC 的时间远远低于 Full GC")])])]),t._v(" "),a("h4",{attrs:{id:"gc类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#gc类型"}},[t._v("#")]),t._v(" GC类型")]),t._v(" "),a("p",[t._v("先来点知识储备，后面会用到")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("新生代 GC 操作：Minor GC")]),t._v(" "),a("ul",[a("li",[t._v("发生的非常频繁，速度较块。")])])]),t._v(" "),a("li",[a("p",[t._v("老年代 GC 操作：Full GC / Major GC")]),t._v(" "),a("ul",[a("li",[t._v("经常伴随着至少一次的 Minor GC；")]),t._v(" "),a("li",[t._v("速度一般比 Minor GC 慢上 10 倍以上。")])])])]),t._v(" "),a("h2",{attrs:{id:"hotspot中gc算法实现细节"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hotspot中gc算法实现细节"}},[t._v("#")]),t._v(" HotSpot中GC算法实现细节")]),t._v(" "),a("p",[t._v("上面介绍了垃圾收集相关的算法和理论，但是在HotSpot中，要高效的实现这些算法还有很多细节。")]),t._v(" "),a("p",[t._v("主要是怎么标记要回收的对象，然后怎么回收垃圾")]),t._v(" "),a("h3",{attrs:{id:"过程简述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#过程简述"}},[t._v("#")]),t._v(" 过程简述")]),t._v(" "),a("p",[t._v("概述一下，GC流程就是先枚举根节点，找对象，但是枚举根节点要STW，因此引进OopMap来加速枚举。")]),t._v(" "),a("p",[t._v("但是由于对象之间的引用关系会变，oopMap当然也要变，不然不就会错误标记吗？")]),t._v(" "),a("p",[t._v("因此hotspot只在特定的位置（安全点）记录oopMap，并且强制要求GC到了安全点附件才能暂停（防止oopMap出错）下来去GC")]),t._v(" "),a("p",[t._v("由于安全点只能在程序运行时才能去GC，为了让不运行的程序（比如pedding）也能GC，引入了安全区域的概念。")]),t._v(" "),a("img",{staticStyle:{zoom:"80%"},attrs:{src:"https://typora-1309665611.cos.ap-nanjing.myqcloud.com/typora/image-20230720102508517.png"}}),t._v(" "),a("p",[a("strong",[t._v("根据之前的垃圾收集算法，可以简要的分为两步")])]),t._v(" "),a("ul",[a("li",[t._v("找到垃圾（不可达的对象）")]),t._v(" "),a("li",[t._v("回收垃圾")])]),t._v(" "),a("p",[t._v("想要找到垃圾，就要进行可达性分析。枚举根节点，从 GC Root 找到引用链的这个操作，就是一种高效的实现（高效实现可达性分析）。")]),t._v(" "),a("blockquote",[a("p",[a("strong",[t._v("枚举根节点也是stop-world操作，必须停顿线程")])])]),t._v(" "),a("h3",{attrs:{id:"oopmap"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#oopmap"}},[t._v("#")]),t._v(" OopMap")]),t._v(" "),a("blockquote",[a("p",[t._v("上面提到了过GC root对象有哪些，显然第一种栈中的局部变量表引用的对象是最多的，因此这里得想办法优化寻找")])]),t._v(" "),a("p",[a("strong",[t._v("OopMap 记录了栈上本地变量到堆上对象的引用关系")])]),t._v(" "),a("p",[t._v("要枚举 GC Roots，这就需要虚拟机知道哪些地方存放着对象应用。如果每一次枚举 GC Roots 都需要把整个栈上位置都遍历一遍，很费时间，毕竟并不是所有位置都存放引用。所以为了提高 GC 的效率**，HotSpot 使用了一种 OopMap 的数据结构**，"),a("strong",[t._v("OopMap 记录了栈上本地变量到堆上对象的引用关系")]),t._v("，也就是说，GC 的时候就不用遍历整个栈只遍历每个栈的 OopMap 就行了。")]),t._v(" "),a("p",[t._v("在 OopMap 的帮助下，HotSpot 可以快速准确的完成 GC 枚举了，不过，OopMap 也不是万年不变的，它也是需要被更新的，"),a("strong",[t._v("当内存中的对象间的引用关系发生变化时，就需要改变 OopMap 中的相应内容。可是能导致引用关系发生变化的指令非常之多，如果我们执行完一条指令就生成一次 OopMap，这 GC 成本实在太高了。")])]),t._v(" "),a("h3",{attrs:{id:"安全点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#安全点"}},[t._v("#")]),t._v(" 安全点")]),t._v(" "),a("p",[t._v("Hotspot只在特定非位置记录了了OopMap，**这种特定位置就叫安全点。**并且强制要求执行到了安全点才能暂停进行GC（GC停顿，就是停下来收集垃圾）。")]),t._v(" "),a("h4",{attrs:{id:"位置选取"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#位置选取"}},[t._v("#")]),t._v(" 位置选取")]),t._v(" "),a("p",[t._v("安全点的选取既不能让 GC 等待的时间过长，也不能过于频繁增加运行负担，也就是说，我们既要让程序运行一段时间，又不能让这个时间太长。我们知道，JVM 中每条指令执行的是很快的，所以一个超级长的指令流也可能很快就执行完了，所以 "),a("strong",[t._v("真正会出现 “长时间执行” 的一般是指令的复用，例如：方法调用、循环跳转、异常跳转等")]),t._v("，虚拟机一般会将这些地方设置为安全点更新 OopMap 并判断是否需要进行 GC 操作。")]),t._v(" "),a("blockquote",[a("p",[t._v("补充，枚举根节点时，为了保证准确性，需要冻结应用（Stop the World，也就是GC停顿）。")]),t._v(" "),a("p",[t._v("​\t\t\t因为如果在我们分析可达性的过程中，对象的引用关系还在变来变去，那是不可能得到正确的分析结果的")])]),t._v(" "),a("p",[a("strong",[t._v("如何让所有线程跑到最近的安全点再停顿下来进行 GC 操作呢？")])]),t._v(" "),a("p",[t._v("主要有以下两种方式：")]),t._v(" "),a("ul",[a("li",[t._v("抢先式中断：\n"),a("ul",[a("li",[t._v("先中断所有线程；")]),t._v(" "),a("li",[t._v("发现有线程没中断在安全点，恢复它，让它跑到安全点。")])])]),t._v(" "),a("li",[t._v("主动式中断：(主要使用)\n"),a("ul",[a("li",[t._v("设置一个中断标记；")]),t._v(" "),a("li",[t._v("每个线程到达安全点时，检查这个中断标记，选择是否中断自己。")])])])]),t._v(" "),a("h3",{attrs:{id:"安全区域"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#安全区域"}},[t._v("#")]),t._v(" 安全区域")]),t._v(" "),a("p",[t._v("除此安全点之外，还有一个叫做 “安全区域” 的东西，一个一直在执行的线程可以自己 “走” 到安全点去，"),a("strong",[t._v("可是一个处于 Sleep 或者 Blocked 状态的线程是没办法自己到达安全点中断自己的")]),t._v("，我们总不能让 GC 操作一直等着这些个 ”不执行“ 的线程重新被分配资源吧。对于这种情况，我们要依靠安全区域来解决。")]),t._v(" "),a("p",[a("strong",[t._v("安全区域是指在一段代码片段之中，引用关系不会发生变化，因此在这个区域中的任意位置开始 GC 都是安全的。")])]),t._v(" "),a("p",[t._v("当线程执行到安全区域时，它会把自己标识为 Safe Region，这样 JVM 发起 GC 时是不会理会这个线程的。当这个线程要离开安全区域时，它会检查系统是否在 GC 中，如果不在，它就继续执行，如果在，它就等 GC 结束再继续执行。")]),t._v(" "),a("h3",{attrs:{id:"记忆集和卡表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#记忆集和卡表"}},[t._v("#")]),t._v(" 记忆集和卡表")]),t._v(" "),a("p",[t._v("为解决对象跨代引用所带来的问题，"),a("strong",[t._v("垃圾收集器在新生代中建 立了名为记忆集（Remembered Set）的数据结构，用以避免把整个老年代加进GC Roots扫描范围")]),t._v("。")]),t._v(" "),a("p",[t._v("事 实上并不只是新生代、老年代之间才有跨代引用的问题，所有涉及部分区域收集（Partial GC）行为的 垃圾收集器，典型的如G1、ZGC和Shenandoah收集器，都会面临相同的问")]),t._v(" "),a("p",[a("strong",[t._v("记忆集是一种用于记录从非收集区域指向收集区域的指针集合的抽象数据结构")])]),t._v(" "),a("p",[t._v("在垃圾 收集的场景中，收集器只需要通过记忆集判断出某一块非收集区域是否存在有指向了收集区域的指针 就可以了，并不需要了解这些跨代指针的全部细节。那设计者在实现记忆集的时候，便可以选择更为 粗犷的记录粒度来节省记忆集的存储和维护成本，下面列举了一些可供选择（当然也可以选择这个范 围以外的）的记录精度：")]),t._v(" "),a("p",[t._v("字长精度：每个记录精确到一个机器字长（就是处理器的寻址位数，如常见的32位或64位，这个 精度决定了机器访问物理内存地址的指针长度），该字包含跨代指针。")]),t._v(" "),a("p",[t._v("对象精度：每个记录精确到一个对象，该对象里有字段含有跨代指针。")]),t._v(" "),a("p",[t._v("（最常使用）**卡精度：**每个记录精确到一块内存区域，该区域内有对象含有跨代指针")]),t._v(" "),a("blockquote",[a("p",[t._v("一个卡页的内存中通常包含不止一个对象，只要卡页内有一个（或更多）对象的字段存在着跨代 指针，那就将对应卡表的数组元素的值标识为1，称为这个元素变脏（Dirty），没有则标识为0。在垃 圾收集发生时，只要筛选出卡表中变脏的元素，就能轻易得出哪些卡页内存块中包含跨代指针，把它 们加入GC Roots中一并扫描。")])]),t._v(" "),a("h3",{attrs:{id:"写屏障"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#写屏障"}},[t._v("#")]),t._v(" 写屏障")]),t._v(" "),a("p",[t._v("我们已经解决了如何使用记忆集来缩减GC Roots扫描范围的问题，"),a("strong",[t._v("但还没有解决卡表元素如何维 护的问题，例如它们何时变脏、谁来把它们变脏等。")])]),t._v(" "),a("blockquote",[a("p",[t._v("卡表元素何时变脏的答案是很明确的——有其他分代区域中对象引用了本区域对象时，其对应的 卡表元素就应该变脏，变脏时间点原则上应该发生在引用类型字段赋值的那一刻。")])]),t._v(" "),a("p",[a("strong",[t._v("在HotSpot虚拟机里是通过写屏障（Write Barrier）技术维护卡表状态")])]),t._v(" "),a("p",[a("strong",[t._v("写屏障可以看作在虚拟机层面对“引用类型字段赋值”这个动作的AOP切")]),t._v(" 面，在引用对象赋值时会产生一个环形（Around）通知，供程序执行额外的动作，也就是说赋值的 前后都在写屏障的覆盖范畴内。")]),t._v(" "),a("p",[t._v("在赋值前的部分的写屏障叫作写前屏障（Pre-Write Barrier），在赋值 后的则叫作写后屏障（Post-Write Barrier）。")]),t._v(" "),a("p",[t._v("HotSpot虚拟机的许多收集器中都有使用到写屏障，但直 至G1收集器出现之前，其他收集器都只用到了写后屏障")]),t._v(" "),a("img",{staticStyle:{zoom:"80%"},attrs:{src:"https://typora-1309665611.cos.ap-nanjing.myqcloud.com/typora/image-20230720112512765.png"}}),t._v(" "),a("blockquote",[a("p",[t._v("一旦收集器在写屏障中增加了更新 卡表操作，无论更新的是不是老年代对新生代对象的引用，每次只要对引用进行更新，就会产生额外 的开销，不过这个开销与Minor GC时扫描整个老年代的代价相比还是低得多的。")])]),t._v(" "),a("h3",{attrs:{id:"并发的可达性分析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#并发的可达性分析"}},[t._v("#")]),t._v(" 并发的可达性分析")]),t._v(" "),a("p",[t._v("主流的垃圾收集器都依赖可达性分析算法判断对象是否存活，"),a("strong",[t._v("可达性分析算法理论上要求全过程都基于一个能保障一致性的快照中才能够进行分析， 这意味着必须全程冻结用户线程的运行。")])]),t._v(" "),a("blockquote",[a("p",[t._v("这里上面也提到了，进行分析时，必须停顿，因为如果不停顿，调用链可能变化，导致分析错误。由于GC Roots相比 起整个Java堆中全部的对象毕竟还算是极少数，且在各种优化技巧（如OopMap）的加持下，"),a("strong",[t._v("它带来 的停顿已经是非常短暂且相对固定（不随堆容量而增长）的了。")])])]),t._v(" "),a("p",[t._v("可从GC Roots再继续往下遍历对象 图，"),a("strong",[t._v("这一步骤的停顿时间就必定会与Java堆容量直接成正比例关系了：堆越大，存储的对象越多，对 象图结构越复杂，要标记更多对象而产生的停顿时间自然就更长")])]),t._v(" "),a("p",[t._v("为了降低这一步（分析调用链和标记）的时间，"),a("strong",[t._v("这一步是并发扫描的")]),t._v("，但是并非扫描会带来并发安全问题。")]),t._v(" "),a("p",[t._v("书里剩下这部分就是说怎么来避免并发扫描时的并发安全问题，下面介绍一下。")]),t._v(" "),a("p",[t._v("把遍历对象图过程中遇到的对象，按"),a("strong",[t._v("照“是否访问过”这个条件标记成以下三种颜色：")])]),t._v(" "),a("ul",[a("li",[t._v("白色：表示对象尚未被垃圾收集器访问过。显然在可达性分析刚刚开始的阶段，所有的对象都是 白色的，若在分析结束的阶段，仍然是白色的对象，即代表不可达。")]),t._v(" "),a("li",[t._v("黑色：表示对象已经被垃圾收集器访问过，且这个对象的所有引用都已经扫描过。黑色的对象代 表已经扫描过，它是安全存活的，如果有其他对象引用指向了黑色对象，无须重新扫描一遍。黑色对 象不可能直接（不经过灰色对象）指向某个白色对象。")]),t._v(" "),a("li",[t._v("灰色：表示对象已经被垃圾收集器访问过，但这个对象上至少存在一个引用还没有被扫描过。")])]),t._v(" "),a("p",[t._v("我们考虑一下并发扫描出现的问题：")]),t._v(" "),a("ul",[a("li",[t._v("把消亡的对象标记为存活，可以容忍")]),t._v(" "),a("li",[t._v("把存活的对象标记为消亡（对象消失），后果严重，不能容忍")])]),t._v(" "),a("img",{staticStyle:{zoom:"70%"},attrs:{src:"https://typora-1309665611.cos.ap-nanjing.myqcloud.com/typora/image-20230720113433148.png"}}),t._v(" "),a("blockquote",[a("p",[t._v("Wilson于1994年在理论上证明了，"),a("strong",[t._v("当且仅当以下两个条件同时满足时")]),t._v("，会产生“对象消失”的问 题，即原本应该是黑色的对象被误标为白色：")]),t._v(" "),a("p",[t._v("赋值器插入了一条或多条从黑色对象到白色对象的新引用；")]),t._v(" "),a("p",[t._v("赋值器删除了全部从灰色对象到该白色对象的直接或间接引用")]),t._v(" "),a("p",[t._v("并发扫描时核心问题是对象消失问题，只需破坏这两个条件的任意一个即可。由此分别 产生了两种解决方案：增量更新（Incremental Update）和原始快照（Snapshot At The Beginning， SATB）")])]),t._v(" "),a("p",[a("strong",[t._v("增量更新要破坏的是第一个条件")]),t._v("，当黑色对象插入新的指向白色对象的引用关系时，就将这个新 插入的引用记录下来，等并发扫描结束之后，再将这些记录过的引用关系中的黑色对象为根，重新扫 描一次。这可以简化理解为，黑色对象一旦新插入了指向白色对象的引用之后，它就变回灰色对象 了。")]),t._v(" "),a("p",[a("strong",[t._v("原始快照要破坏的是第二个条件")]),t._v("，当灰色对象要删除指向白色对象的引用关系时，就将这个要删 除的引用记录下来，在并发扫描结束之后，再将这些记录过的引用关系中的灰色对象为根，重新扫描 一次。这也可以简化理解为，无论引用关系删除与否，都会按照刚刚开始扫描那一刻的对象图快照来 进行搜索。 以上无论是对引用关系记录的插入还是删除，虚拟机的记录操作都是通过写屏障实现的。")]),t._v(" "),a("p",[t._v("在 HotSpot虚拟机中，增量更新和原始快照这两种解决方案都有实际应用，譬如，CMS是基于增量更新 来做并发标记的，G1、Shenandoah则是用原始快照来实现。")]),t._v(" "),a("h2",{attrs:{id:"经典垃圾收集器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#经典垃圾收集器"}},[t._v("#")]),t._v(" 经典垃圾收集器")]),t._v(" "),a("p",[t._v("HoSpot有很多可用的垃圾收集器，是对上面介绍的算法的实践。")]),t._v(" "),a("p",[t._v("这里只随便介绍一下，并且重点在最基础的serial和最新的cms，G1.")]),t._v(" "),a("h3",{attrs:{id:"serial-收集器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#serial-收集器"}},[t._v("#")]),t._v(" Serial 收集器")]),t._v(" "),a("p",[t._v("这个收集器是一个单线程工作的收集器，但它的“单线 程”的意义有两点：")]),t._v(" "),a("ul",[a("li",[t._v("它只会使用一个处理器或一条收集线程去完成垃圾收集工作**，**")]),t._v(" "),a("li",[a("strong",[t._v("更重要的是强 调在它进行垃圾收集时，必须暂停其他所有工作线程，直到它收集结束")])])]),t._v(" "),a("img",{staticStyle:{zoom:"70%"},attrs:{src:""}}),t._v(" "),a("p",[a("img",{attrs:{src:"https://typora-1309665611.cos.ap-nanjing.myqcloud.com/typora/image-20230720163326068.png",alt:"image-20230720163326068"}})]),t._v(" "),a("p",[t._v("特点：")]),t._v(" "),a("ul",[a("li",[t._v("最老的收集器，简单有效，在一些内存小的地方有应用（因为GC时间也短）")]),t._v(" "),a("li",[t._v("应用程序运行有停顿（GC停顿）")])]),t._v(" "),a("blockquote",[a("p",[t._v("现在也是虚拟机运行在Client模式下的默认新生代收集器")])]),t._v(" "),a("h3",{attrs:{id:"parnew-收集器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parnew-收集器"}},[t._v("#")]),t._v(" ParNew 收集器")]),t._v(" "),a("p",[t._v("ParNew收集器其实就是Serial收集器的多线程版本，是运行在Server模式下的虚拟机中首选的新生代收集器。")]),t._v(" "),a("ul",[a("li",[t._v("并行（Parallel）：指多条垃圾收集线程并行工作，但此时用户线程处于等待状态。")]),t._v(" "),a("li",[t._v("并发（Concurrent）：指用户线程与垃圾收集线程同时执行（但不一定是并行的，可能会交替运行），用户程序继续运行，而垃圾收集线程运行在另一个CPU上。")])]),t._v(" "),a("h3",{attrs:{id:"parallel-scavenge"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parallel-scavenge"}},[t._v("#")]),t._v(" Parallel Scavenge")]),t._v(" "),a("p",[t._v("Parallel Scavenge收集器是一个使用复制算法的并行的多线程收集器，"),a("strong",[t._v("它关注于提高吞吐量（Throughput，CPU用于运行用户代码的时间和CPU消耗时间的比")]),t._v("值）。另外，自适应调节策略也是Parallel Scavenge和ParNew收集器的区别")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://typora-1309665611.cos.ap-nanjing.myqcloud.com/typora/image-20230720163836940.png",alt:"image-20230720163836940"}})]),t._v(" "),a("h3",{attrs:{id:"serial-old-收集器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#serial-old-收集器"}},[t._v("#")]),t._v(" Serial Old 收集器")]),t._v(" "),a("p",[t._v("是Serial收集器的老年版本。")]),t._v(" "),a("h3",{attrs:{id:"parallel-old-收集器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parallel-old-收集器"}},[t._v("#")]),t._v(" Parallel Old 收集器")]),t._v(" "),a("p",[t._v("是Parallel Scavenge 收集器的老年版本。")]),t._v(" "),a("h3",{attrs:{id:"cms-收集器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cms-收集器"}},[t._v("#")]),t._v(" CMS 收集器")]),t._v(" "),a("p",[t._v("CMS（Concurrent Mask Sweep）收集器是一个以获取最短回收停顿时间为目标的收集器。"),a("strong",[t._v("因此，此收集器特别适合现代的互联网或 B/S 架构的服务端上。")])]),t._v(" "),a("img",{staticStyle:{zoom:"80%"},attrs:{src:"https://typora-1309665611.cos.ap-nanjing.myqcloud.com/typora/image-20230720163930440.png"}}),t._v(" "),a("p",[t._v("CMS 收集器是基于“标记-清除”算法实现的，整个过程分为4个步骤：")]),t._v(" "),a("ul",[a("li",[t._v("初始标记")]),t._v(" "),a("li",[t._v("并发标记")]),t._v(" "),a("li",[t._v("重新标记")]),t._v(" "),a("li",[t._v("并发清除")])]),t._v(" "),a("p",[t._v("它是一种优秀的收集器。")]),t._v(" "),a("ul",[a("li",[t._v("优点是：并发收集、低停顿")]),t._v(" "),a("li",[t._v("缺点是：对CPU资源非常敏感、无法处理浮动垃圾、"),a("strong",[t._v("收集结束后会产生大量的空间碎片以致于在给大对象分配空间时带来麻烦")])])]),t._v(" "),a("h3",{attrs:{id:"g1-收集器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#g1-收集器"}},[t._v("#")]),t._v(" G1 收集器")]),t._v(" "),a("blockquote",[a("p",[t._v("G1（Garbage First）收集器是当前收集器技术发展的最新成果，相对于上文的 CMS 收集器有两个显著改进：")])]),t._v(" "),a("ol",[a("li",[t._v("基于“标记-整理”算法，也就是说它不会产生空间碎片")]),t._v(" "),a("li",[t._v("非常精确地控制停顿")])]),t._v(" "),a("p",[a("strong",[t._v("G1 收集器可以实现在基本不牺牲吞吐量的情况下完成低停顿的回收，它将整个Java堆划分为多个大小固定的独立区域（Region），并跟踪这些区域里面的垃圾堆积程度，在后台维护一个优先列表，每次根据允许的收集时间，优先回收垃圾最多的区域（这也是Garbage First名称的由来）")]),t._v("。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://typora-1309665611.cos.ap-nanjing.myqcloud.com/typora/image-20230720164346325.png",alt:"image-20230720164346325"}})]),t._v(" "),a("p",[t._v("总而言之，区域划分和有优先级的区域回收，保证了G1收集器在有限的时间内可以获得最高的收集效率。")]),t._v(" "),a("p",[t._v("还有ZGC收集器等等.......")]),t._v(" "),a("h2",{attrs:{id:"内存分配策略"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#内存分配策略"}},[t._v("#")]),t._v(" 内存分配策略")]),t._v(" "),a("p",[t._v("java的自动内存管理，"),a("strong",[t._v("最主要的目的是解决两个问题：")])]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("自动给对象分配内存")])]),t._v(" "),a("li",[a("strong",[t._v("自动回收分配给对象的内存")])])]),t._v(" "),a("p",[t._v("上面讲的都是内存回收，"),a("strong",[t._v("现在来考虑给对象分配内存。对象的内存分配，从概念上讲，应该都是在堆上分配")]),t._v("。不同的虚拟机分配策略一定相同，同样下面讨论的是HotSpot虚拟机。")]),t._v(" "),a("h3",{attrs:{id:"优先在-eden-区分配"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#优先在-eden-区分配"}},[t._v("#")]),t._v(" 优先在 Eden 区分配")]),t._v(" "),a("p",[a("strong",[t._v("大多数情况下，对象在新生代Eden区中分配。")])]),t._v(" "),a("p",[a("strong",[t._v("当Eden区没有足够空间进行分配时，虚拟机将发起 一次Minor GC。")])]),t._v(" "),a("ul",[a("li",[t._v("虚拟机参数：\n"),a("ul",[a("li",[a("code",[t._v("-Xmx")]),t._v("：Java 堆的最大值；")]),t._v(" "),a("li",[a("code",[t._v("-Xms")]),t._v("：Java 堆的最小值；")]),t._v(" "),a("li",[a("code",[t._v("-Xmn")]),t._v("：新生代大小；")]),t._v(" "),a("li",[a("code",[t._v("-XX:SurvivorRatio=8")]),t._v("：Eden 区 / Survivor 区 = 8 : 1")])])])]),t._v(" "),a("h3",{attrs:{id:"大对象直接进入老年代"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#大对象直接进入老年代"}},[t._v("#")]),t._v(" 大对象直接进入老年代")]),t._v(" "),a("blockquote",[a("p",[t._v("大对象对虚拟机的内存分配来说 就是一个不折不扣的坏消息**，比遇到一个大对象更加坏的消息就是遇到一群“朝生夕灭”的“短命大对 象”，我们写程序的时候应注意避免**。在Java虚拟机中要避免大对象的原因是，"),a("strong",[t._v("在分配空间时，它容易 导致内存明明还有不少空间时就提前触发垃圾收集，以获取足够的连续空间才能安置好它们，而当复 制对象时，大对象就意味着高额的内存复制开销")])])]),t._v(" "),a("ul",[a("li",[a("p",[a("strong",[t._v("大对象定义：")]),t._v(" 需要大量连续内存空间的 Java 对象。例如那种很长的字符串或者数组。")])]),t._v(" "),a("li",[a("p",[t._v("设置对象直接进入老年代大小限制：")]),t._v(" "),a("ul",[a("li",[a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("-XX:PretenureSizeThreshold\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("：单位是字节；")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("只对 Serial 和 ParNew 两款收集器有效。")])])])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("目的：")]),t._v(" 因为新生代采用的是复制算法收集垃圾，"),a("strong",[t._v("大对象直接进入老年代可以避免在 Eden 区和 Survivor 区发生大量的内存复制。")])])])])])]),t._v(" "),a("h3",{attrs:{id:"长期存活的对象将进入老年代"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#长期存活的对象将进入老年代"}},[t._v("#")]),t._v(" 长期存活的对象将进入老年代")]),t._v(" "),a("blockquote",[a("p",[t._v("虚拟机给每个对象定义了一个对 象年龄（Age）计数器，存储在对象头中。"),a("strong",[t._v("对象通常在Eden区里诞生，如果经过第一次 Minor GC后仍然存活，并且能被Survivor容纳的话，该对象会被移动到Survivor空间中")]),t._v(",并且每躲过一次GC，age+1，"),a("strong",[t._v("age到了某一个限制时，就这个对象放入老年代")])])]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("固定对象年龄判定：")]),t._v(" 虚拟机给每个对象定义一个年龄计数器，对象每在 Survivor 中熬过一次 Minor GC，年龄 +1，达到 "),a("code",[t._v("-XX:MaxTenuringThreshold")]),t._v(" 设定值后，会被晋升到老年代，"),a("code",[t._v("-XX:MaxTenuringThreshold")]),t._v(" 默认为 15；")]),t._v(" "),a("li",[a("strong",[t._v("动态对象年龄判定：")]),t._v(" Survivor 中有相同年龄的对象的空间总和大于 Survivor 空间的一半，那么，年龄大于或等于该年龄的对象直接晋升到老年代。")])]),t._v(" "),a("h3",{attrs:{id:"动态年龄判定"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#动态年龄判定"}},[t._v("#")]),t._v(" 动态年龄判定")]),t._v(" "),a("p",[t._v("为了能更好地适应不同程序的内存状况，"),a("strong",[t._v("HotSpot虚拟机并不是永远要求对象的年龄必须达到XX：MaxTenuringThreshold才能晋升老年代")]),t._v("。")]),t._v(" "),a("p",[t._v("如果在Survivor空间中相同年龄所有对象大小的总和大于 Survivor空间的一半，年龄大于或等于该年龄的对象就可以直接进入老年代，无须等到-XX： MaxTenuringThreshold中要求的年龄")]),t._v(" "),a("h3",{attrs:{id:"空间分配担保"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#空间分配担保"}},[t._v("#")]),t._v(" 空间分配担保")]),t._v(" "),a("p",[t._v("在发生Minor GC之前，虚拟机必须先检查老年代最大可用的连续空间是否大于新生代所有对象总 空间，如果这个条件成立，那这一次Minor GC可以确保是安全的。如果不成立，则虚拟机会先查看XX：HandlePromotionFailure参数的设置值是否允许担保失败（Handle Promotion Failure）。")]),t._v(" "),a("blockquote",[a("p",[t._v("jdk6之后这个参数就没用了")])]),t._v(" "),a("p",[t._v("这里记录最新的方法，jdk6之后，"),a("strong",[t._v("规则变为只要老年代的连续空间大于新生代对象总大小或者历次晋升的平均大小就会进行 Minor GC，否则将进行 Full GC。")])]),t._v(" "),a("h3",{attrs:{id:"元空间和永久代"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#元空间和永久代"}},[t._v("#")]),t._v(" 元空间和永久代")]),t._v(" "),a("blockquote",[a("p",[t._v("Metaspace 元空间与 PermGen 永久代")])]),t._v(" "),a("p",[a("strong",[t._v("Java 8后 彻底将永久代 (PermGen) 移除出了 HotSpot JVM，将其原有的数据迁移至 Java Heap 或 Metaspace。")])]),t._v(" "),a("p",[a("strong",[t._v("移除 PermGen 的原因：")])]),t._v(" "),a("ul",[a("li",[t._v("PermGen 内存经常会溢出，引发恼人的 java.lang.OutOfMemoryError: PermGen，因此 JVM 的开发者希望这一块内存可以更灵活地被管理，不要再经常出现这样的 OOM；")]),t._v(" "),a("li",[t._v("移除 PermGen 可以促进 HotSpot JVM 与 JRockit VM 的融合，因为 JRockit 没有永久代。")])]),t._v(" "),a("p",[a("strong",[t._v("移除 PermGen 后，方法区和字符串常量的位置：")])]),t._v(" "),a("ul",[a("li",[t._v("方法区：移至 Metaspace；")]),t._v(" "),a("li",[t._v("字符串常量：移至 Java Heap。")])]),t._v(" "),a("p",[a("strong",[t._v("Metaspace 的位置：")]),t._v(" 本地堆内存(native heap)。")]),t._v(" "),a("p",[a("strong",[t._v("Metaspace 的优点：")]),t._v(" 永久代 OOM 问题将不复存在，因为默认的类的元数据分配只受本地内存大小的限制，"),a("strong",[t._v("也就是说本地内存剩余多少，理论上 Metaspace 就可以有多大；")])]),t._v(" "),a("blockquote",[a("p",[t._v("记得，jdk8之后，方法区实现为元空间，并且元空间内存是本地的，其内存分配只受本地内存大小影响，不容易OOM")])]),t._v(" "),a("h2",{attrs:{id:"虚拟机内存监控和故障处理攻击"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#虚拟机内存监控和故障处理攻击"}},[t._v("#")]),t._v(" 虚拟机内存监控和故障处理攻击")]),t._v(" "),a("blockquote",[a("p",[t._v("比较偏应用，就是将一些工具来对虚拟机操作，书上有，待补充")])])],1)}),[],!1,null,null,null);a.default=s.exports}}]);