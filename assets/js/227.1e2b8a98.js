(window.webpackJsonp=window.webpackJsonp||[]).push([[227],{555:function(v,_,t){"use strict";t.r(_);var a=t(4),s=Object(a.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h2",{attrs:{id:"引言"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#引言"}},[v._v("#")]),v._v(" 引言")]),v._v(" "),_("p",[v._v("在实际应用Redis缓存时，我们经常会遇到一些异常问题，概括来说有4个方面：")]),v._v(" "),_("ul",[_("li",[v._v("缓存中的数据和数据库中的不一致；")]),v._v(" "),_("li",[v._v("缓存雪崩；")]),v._v(" "),_("li",[v._v("缓存击穿")]),v._v(" "),_("li",[v._v("缓存穿透。")])]),v._v(" "),_("p",[v._v("我们分别看这四个问题。")]),v._v(" "),_("h2",{attrs:{id:"缓存和数据库的数据不一致是如何发生的"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#缓存和数据库的数据不一致是如何发生的"}},[v._v("#")]),v._v(" 缓存和数据库的数据不一致是如何发生的？")]),v._v(" "),_("p",[v._v("首先，我们得清楚“数据的一致性”具体是啥意思。其实，这里的“一致性”包含了两种情况：")]),v._v(" "),_("ul",[_("li",[v._v("缓存中有数据，那么，缓存的数据值需要和数据库中的值相同；")]),v._v(" "),_("li",[v._v("缓存中本身没有数据，那么，数据库中的值必须是最新值。")])]),v._v(" "),_("p",[_("strong",[v._v("不符合这两种情况的，就属于缓存和数据库的数据不一致问题了")]),v._v("。不过，当缓存的读写模式不同时，缓存数据不一致的发生情况不一样，我们的应对方法也会有所不同。")]),v._v(" "),_("p",[v._v("我们知道，根据缓存是否接受写请求，"),_("strong",[v._v("可以分为只读缓存和读写缓存")])]),v._v(" "),_("p",[v._v("对于读写缓存来说：")]),v._v(" "),_("p",[v._v("如果要对数据进行增删改，就需要在缓存中进行，同时还要根据采取的写回策略，决定是否同步写回到数据库中。")]),v._v(" "),_("ul",[_("li",[v._v("同步直写策略：写缓存时，也同步写数据库，缓存和数据库中的数据一致；")]),v._v(" "),_("li",[v._v("异步写回策略：写缓存时不同步写数据库，等到数据从缓存中淘汰时，再写回数据库。使用这种策略时，"),_("strong",[v._v("如果数据还没有写回数据库，缓存就发生了故障，那么，此时，数据库就没有最新的数据了。")])])]),v._v(" "),_("blockquote",[_("p",[v._v("所以，对于读写缓存来说，要想保证缓存和数据库中的数据一致，就要同时更新缓存和数据库。")])]),v._v(" "),_("p",[v._v("如果采用同步直写，我们需要用事务机制保证证缓存和数据库的更新具有"),_("strong",[v._v("原子性")])]),v._v(" "),_("blockquote",[_("p",[v._v("如果是一些不那么关键的属性，对数据一致性要求没那么高，可以采用异步写回策略。")])]),v._v(" "),_("p",[v._v("对于只读缓存来说：")]),v._v(" "),_("p",[v._v("如果有数据新增，会直接写入数据库；而有数据删改时，就需要把只读缓存中的数据标记为无效。这样一来，应用后续再访问这些增删改的数据时，因为缓存中没有相应的数据，就会发生缓存缺失，那么直接从数据库读入缓存即可。")]),v._v(" "),_("p",[v._v("以Tomcat向MySQL中写入和删改数据为例")]),v._v(" "),_("img",{staticStyle:{zoom:"80%"},attrs:{src:"https://typora-1309665611.cos.ap-nanjing.myqcloud.com/typora/image-20231115085408527.png",alt:"image-20231115085408527"}}),v._v(" "),_("p",[v._v("从图中可以看到，Tomcat上运行的应用，无论是新增（Insert操作）、修改（Update操作）、还是删除（Delete操作）数据X，都会直接在数据库中增改删。")]),v._v(" "),_("p",[v._v("修改或删除操作，除了操作数据库，还会删除缓存的数据X。")]),v._v(" "),_("p",[_("strong",[v._v("1.新增数据")])]),v._v(" "),_("p",[v._v("如果是新增数据，数据会直接写到数据库中，不用对缓存做任何操作，此时，缓存中本身就没有新增数据，而数据库中是最新值，所以保证了数据一致性。")]),v._v(" "),_("p",[_("strong",[v._v("2.删改数据")])]),v._v(" "),_("p",[v._v("如果发生删改操作，应用既要更新数据库，也要在缓存中删除数据。这两个操作如果无法保证原子性，也就是说，要不都完成，要不都没完成，此时，就会出现数据不一致问题了。这个问题比较复杂，我们来分析一下。")]),v._v(" "),_("ul",[_("li",[v._v("我们假设应用先删除缓存，再更新数据库，如果缓存删除成功，但是数据库更新失败，那么，应用再访问数据时，缓存中没有数据，就会发生缓存缺失。然后，应用再访问数据库，但是数据库中的值为旧值，应用就访问到旧值了。举例如下：")])]),v._v(" "),_("img",{staticStyle:{zoom:"80%"},attrs:{src:"https://typora-1309665611.cos.ap-nanjing.myqcloud.com/typora/image-20231115085738549.png",alt:"image-20231115085738549"}}),v._v(" "),_("ul",[_("li",[_("p",[v._v("如果我们先更新数据库，再删除缓存中的值。如果应用先完成了数据库的更新，"),_("strong",[v._v("但是，在删除缓存时失败了")]),v._v("。所以此时就是不一致的，请求查询到的就是缓存的旧值。")]),v._v(" "),_("img",{staticStyle:{zoom:"80%"},attrs:{src:"https://typora-1309665611.cos.ap-nanjing.myqcloud.com/typora/image-20231115090149397.png",alt:"image-20231115090149397"}})])]),v._v(" "),_("p",[v._v("我们可以看到，在更新数据库和删除缓存值的过程中，无论这两个操作的执行顺序谁先谁后，只要有一个操作失败了，就会导致客户端读取到旧值。")]),v._v(" "),_("img",{staticStyle:{zoom:"80%"},attrs:{src:"https://typora-1309665611.cos.ap-nanjing.myqcloud.com/typora/image-20231115090214137.png",alt:"image-20231115090214137"}}),v._v(" "),_("h3",{attrs:{id:"重试机制"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#重试机制"}},[v._v("#")]),v._v(" 重试机制")]),v._v(" "),_("p",[v._v("重试机制可以解决上面提到的更新或者删除缓存（只读缓存）时可能存在的数据不一致问题。")]),v._v(" "),_("p",[v._v("具体来说，可以把要删除的缓存值或者是要更新的数据库值暂存到消息队列中（例如使用Kafka消息队列）。当应用没有能够成功地删除缓存值或者是更新数据库值时，可以从消息队列中重新读取这些值，然后再次进行删除或更新。")]),v._v(" "),_("p",[v._v("如果能够成功地删除或更新，我们就要把这些值从消息队列中去除，以免重复操作，此时，我们也可以保证数据库和缓存的数据一致了。否则的话，我们还需要再次进行重试。如果重试超过的一定次数，还是没有成功，我们就需要向业务层发送报错信息了")]),v._v(" "),_("p",[v._v("下图显示了先更新数据库，再删除缓存值时，如果缓存删除失败，再次重试后删除成功的情况。")]),v._v(" "),_("img",{staticStyle:{zoom:"80%"},attrs:{src:"https://typora-1309665611.cos.ap-nanjing.myqcloud.com/typora/image-20231115093746396.png",alt:"image-20231115093746396"}}),v._v(" "),_("p",[v._v("上面时有一次操作失败的情况，"),_("strong",[v._v("实际上，使这两个操作第一次执行时都没有失败，当有大量并发请求时，应用还是有可能读到不一致的数据。")])]),v._v(" "),_("p",[_("strong",[v._v("情况一：先删除缓存，再更新数据库。")])]),v._v(" "),_("p",[v._v("假设线程A删除缓存值后，还没有来得及更新数据库（比如说有网络延迟），线程B就开始读取数据了，那么这个时候，线程B会发现缓存缺失，就只能去数据库读取。这会带来两个问题：")]),v._v(" "),_("ol",[_("li",[v._v("线程B读取到了旧值；")]),v._v(" "),_("li",[v._v("线程B是在缓存缺失的情况下读取的数据库，所以，它还会把旧值写入缓存，这可能会导致其他线程从缓存中读到旧值。")])]),v._v(" "),_("p",[v._v("等到线程B从数据库读取完数据、更新了缓存后，线程A才开始更新数据库，此时，缓存中的数据是旧值，而数据库中的是最新值，两者就不一致了。")]),v._v(" "),_("p",[v._v("先删除缓存再更新数据库。")]),v._v(" "),_("img",{staticStyle:{zoom:"80%"},attrs:{src:"https://typora-1309665611.cos.ap-nanjing.myqcloud.com/typora/image-20231115093922210.png",alt:"image-20231115093922210"}}),v._v(" "),_("p",[_("strong",[v._v("在线程A更新完数据库值以后，我们可以让它先sleep一小段时间，再进行一次缓存删除操作（延迟双删）。")])]),v._v(" "),_("p",[v._v("之所以要加上sleep的这段时间，就是为了让线程B能够先从数据库读取数据，再把缺失的数据写入缓存，然后，线程A再进行删除。所以，线程A sleep的时间，就需要大于线程B读取数据再写入缓存的时间。这个时间怎么确定呢？建议你在业务程序运行的时候，统计下线程读数据和写缓存的操作时间，以此为基础来进行估算。")]),v._v(" "),_("p",[v._v("这样一来，其它线程读取数据时，会发现缓存缺失，所以会从数据库中读取最新值。因为这个方案会在第一次删除缓存值后，延迟一段时间再次进行删除，所以我们也把它叫做“延迟双删”。")]),v._v(" "),_("p",[v._v("下面的这段伪代码就是“延迟双删”方案的示例，你可以看下。")]),v._v(" "),_("div",{staticClass:"language- line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[v._v("redis.delKey(X)\ndb.update(X)\nThread.sleep(N)\nredis.delKey(X)\n")])]),v._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[v._v("1")]),_("br"),_("span",{staticClass:"line-number"},[v._v("2")]),_("br"),_("span",{staticClass:"line-number"},[v._v("3")]),_("br"),_("span",{staticClass:"line-number"},[v._v("4")]),_("br")])]),_("p",[_("strong",[v._v("情况二：先更新数据库值，再删除缓存值。")])]),v._v(" "),_("p",[v._v("如果线程A删除了数据库中的值，但还没来得及删除缓存值，线程B就开始读取数据了，那么此时，线程B查询缓存时，发现缓存命中，就会直接从缓存中读取旧值。不过，在这种情况下，如果其他线程并发读缓存的请求不多，那么，就不会有很多请求读取到旧值。而且，线程A一般也会很快删除缓存值，这样一来，其他线程再次读取时，就会发生缓存缺失，进而从数据库中读取最新值。所以，这种情况对业务的影响较小。")]),v._v(" "),_("p",[v._v("先更新数据库、再删除缓存值的情况。")]),v._v(" "),_("img",{staticStyle:{zoom:"80%"},attrs:{src:"https://typora-1309665611.cos.ap-nanjing.myqcloud.com/typora/image-20231115093936286.png",alt:"image-20231115093936286"}}),v._v(" "),_("h3",{attrs:{id:"小结"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#小结"}},[v._v("#")]),v._v(" 小结")]),v._v(" "),_("p",[v._v("在使用Redis缓存时，最常遇见的一个问题，也就是缓存和数据库不一致的问题。针对这个问题，我们可以分成读写缓存和只读缓存两种情况进行分析。")]),v._v(" "),_("p",[v._v("对于读写缓存来说，如果我们采用同步写回策略，那么可以保证缓存和数据库中的数据一致。只读缓存的情况比较复杂，我总结了一张表，以便于你更加清晰地了解数据不一致的问题原因、现象和应对方案。")]),v._v(" "),_("img",{staticStyle:{zoom:"80%"},attrs:{src:"https://typora-1309665611.cos.ap-nanjing.myqcloud.com/typora/image-20231115094033328.png",alt:"image-20231115094033328"}}),v._v(" "),_("p",[v._v("作者建议在大多数应用场景下，优先使用先更新数据库再删除缓存的方法，原因主要有两个：")]),v._v(" "),_("ol",[_("li",[v._v("先删除缓存值再更新数据库，有可能导致请求因缓存缺失而访问数据库，给数据库带来压力；")]),v._v(" "),_("li",[v._v("如果业务应用中读取数据库和写缓存的时间不好估算，那么，延迟双删中的等待时间就不好设置。")])]),v._v(" "),_("p",[v._v("不过，当使用先更新数据库再删除缓存时，也有个地方需要注意，如果业务层要求必须读取一致的数据，那么，我们就需要在更新数据库时，先在Redis缓存客户端暂存并发读请求，等数据库更新完、缓存值删除后，再读取数据，从而保证数据一致性。")]),v._v(" "),_("h2",{attrs:{id:"缓存雪崩"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#缓存雪崩"}},[v._v("#")]),v._v(" 缓存雪崩")]),v._v(" "),_("p",[v._v("缓存雪崩是指大量的应用请求无法在Redis缓存中进行处理，紧接着，应用将大量请求发送到数据库层，导致数据库层的压力激增。")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://typora-1309665611.cos.ap-nanjing.myqcloud.com/typora/image-20231116154827183.png",alt:"image-20231116154827183"}})]),v._v(" "),_("p",[v._v("缓存雪崩一般是由两个原因：")]),v._v(" "),_("p",[_("strong",[v._v("第一个原因是：缓存中有大量数据同时过期，导致大量请求无法得到处理。")])]),v._v(" "),_("p",[v._v("具体来说，当数据保存在缓存中，并且设置了过期时间时，如果在某一个时刻，大量数据同时过期，此时，应用再访问这些数据的话，就会发生缓存缺失。紧接着，应用就会把请求发送给数据库，从数据库中读取数据。如果应用的并发请求量很大，那么数据库的压力也就很大，这会进一步影响到数据库的其他正常业务请求处理。")]),v._v(" "),_("p",[v._v("解决办法：")]),v._v(" "),_("p",[v._v("1.微调过期服务时间")]),v._v(" "),_("blockquote",[_("p",[v._v("黑马的Redis案例就是用的这个方法")])]),v._v(" "),_("p",[v._v("我们可以避免给大量的数据设置相同的过期时间。如果业务层的确要求有些数据同时失效，你可以在用EXPIRE命令给每个数据设置过期时间时，给这些数据的过期时间增加一个较小的随机数（例如，随机增加1~3分钟），这样一来，不同数据的过期时间有所差别，但差别又不会太大，既避免了大量数据同时过期，同时也保证了这些数据基本在相近的时间失效，仍然能满足业务需求。")]),v._v(" "),_("p",[v._v("2.服务降级")]),v._v(" "),_("p",[v._v("指发生缓存雪崩时，针对不同的数据采取不同的处理方式。")]),v._v(" "),_("ul",[_("li",[v._v("当业务应用访问的是非核心数据（例如电商商品属性）时，暂时停止从缓存中查询这些数据，而是直接返回预定义信息、空值或是错误信息；")]),v._v(" "),_("li",[v._v("当业务应用访问的是核心数据（例如电商商品库存）时，仍然允许查询缓存，如果缓存缺失，也可以继续通过数据库读取。")])]),v._v(" "),_("p",[_("strong",[v._v("第二个原因：Redis缓存实例发生故障宕机了")])]),v._v(" "),_("p",[v._v("Redis服务宕机了，这就会导致大量请求一下子积压到数据库层，从而发生缓存雪崩。")]),v._v(" "),_("p",[v._v("一般来说，"),_("strong",[v._v("一个Redis实例可以支持数万级别的请求处理吞吐量，而单个数据库可能只能支持数千级别的请求处理吞吐量")]),v._v("，它们两个的处理能力可能相差了近十倍。由于缓存雪崩，Redis缓存失效，所以，数据库就可能要承受近十倍的请求压力，从而因为压力过大而崩溃。")]),v._v(" "),_("p",[v._v("对于宕机这种情况，只能是两个建议：")]),v._v(" "),_("p",[v._v("1.业务系统中实现服务熔断或请求限流机制")]),v._v(" "),_("p",[_("strong",[v._v("服务熔断")]),v._v("：是指在发生缓存雪崩时，为了防止引发连锁的数据库雪崩，甚至是整个系统的崩溃，我们暂停业务应用对缓存系统的接口访问。再具体点说，就是业务应用调用缓存接口时，缓存客户端并不把请求发给Redis缓存实例，而是直接返回，等到Redis缓存实例重新恢复服务后，再允许应用请求发送到缓存系统。")]),v._v(" "),_("p",[v._v("在业务系统运行时，我们可以监测Redis缓存所在机器和数据库所在机器的负载指标，例如每秒请求数、CPU利用率、内存利用率等。如果我们发现Redis缓存实例宕机了，而数据库所在机器的负载压力突然增加（例如每秒请求数激增），此时，就发生缓存雪崩了。大量请求被发送到数据库进行处理。我们可以启动服务熔断机制。")]),v._v(" "),_("img",{staticStyle:{zoom:"50%"},attrs:{src:"C:/Users/28788/AppData/Roaming/Typora/typora-user-images/image-20231116161504493.png",alt:"image-20231116161504493"}}),v._v(" "),_("p",[_("strong",[v._v("请求限流")]),v._v("：就是指，我们在业务系统的请求入口前端控制每秒进入系统的请求数，避免过多的请求被发送到数据库。")]),v._v(" "),_("p",[v._v("举个例子。假设业务系统正常运行时，请求入口前端允许每秒进入系统的请求是1万个，其中，9000个请求都能在缓存系统中进行处理，只有1000个请求会被应用发送到数据库进行处理。")]),v._v(" "),_("p",[v._v("一旦发生了缓存雪崩，数据库的每秒请求数突然增加到每秒1万个，此时，我们就可以启动请求限流机制，在请求入口前端只允许每秒进入系统的请求数为1000个，再多的请求就会在入口前端被直接拒绝服务。所以，使用了请求限流，就可以避免大量并发请求压力传递到数据库层。")]),v._v(" "),_("img",{staticStyle:{zoom:"80%"},attrs:{src:"C:/Users/28788/AppData/Roaming/Typora/typora-user-images/image-20231116161521051.png",alt:"image-20231116161521051"}}),v._v(" "),_("p",[v._v("2.事前预防")]),v._v(" "),_("blockquote",[_("p",[v._v("构建集群，避免一个失效影响整个业务，很常用")])]),v._v(" "),_("p",[_("strong",[v._v("通过主从节点的方式构建Redis缓存高可靠集群")]),v._v("。如果Redis缓存的主节点故障宕机了，从节点还可以切换成为主节点，继续提供缓存服务，避免了由于缓存实例宕机而导致的缓存雪崩问题。")]),v._v(" "),_("h2",{attrs:{id:"缓存击穿"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#缓存击穿"}},[v._v("#")]),v._v(" 缓存击穿")]),v._v(" "),_("blockquote",[_("p",[v._v("热点key缓存失效")])]),v._v(" "),_("p",[v._v("缓存击穿是指，"),_("strong",[v._v("针对某个访问非常频繁的热点数据的请求，无法在缓存中进行处理，紧接着，访问该数据的大量请求，一下子都发送到了后端数据库，导致了数据库压力激增，会影响数据库处理其他请求")]),v._v("。缓存击穿的情况，经常发生在热点数据过期失效时，如下图所示：")]),v._v(" "),_("img",{staticStyle:{zoom:"80%"},attrs:{src:"https://typora-1309665611.cos.ap-nanjing.myqcloud.com/typora/image-20231116154900490.png",alt:"image-20231116154900490"}}),v._v(" "),_("p",[v._v("为了避免缓存击穿给数据库带来的激增压力**，我们的解决方法也比较直接，对于访问特别频繁的热点数据，我们就不设置过期时间了**。这样一来，对热点数据的访问请求，都可以在缓存中进行处理，而Redis数万级别的高吞吐量可以很好地应对大量的并发请求访问。")]),v._v(" "),_("h2",{attrs:{id:"缓存穿透"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#缓存穿透"}},[v._v("#")]),v._v(" 缓存穿透")]),v._v(" "),_("blockquote",[_("p",[v._v("这个影响一般更大，所以可以仔细里了解一下")])]),v._v(" "),_("p",[_("strong",[v._v("缓存穿透是指要访问的数据既不在Redis缓存中，也不在数据库中，导致请求在访问缓存时，发生缓存缺失，再去访问数据库时")]),v._v("，发现数据库中也没有要访问的数据。如果应用持续有大量请求访问数据，就会同时给缓存和数据库带来巨大压力，")]),v._v(" "),_("img",{staticStyle:{zoom:"80%"},attrs:{src:"https://typora-1309665611.cos.ap-nanjing.myqcloud.com/typora/image-20231116155036979.png",alt:"image-20231116155036979"}}),v._v(" "),_("p",[v._v("缓存穿透一般两种情况：")]),v._v(" "),_("ul",[_("li",[v._v("业务层误操作：缓存中的数据和数据库中的数据被误删除了，所以缓存和数据库中都没有数据；")]),v._v(" "),_("li",[v._v("恶意攻击：专门访问数据库中没有的数据。")])]),v._v(" "),_("p",[v._v("1.缓存空值或缺省值。")]),v._v(" "),_("blockquote",[_("p",[v._v("黑马Redis案例也用了这个方法")])]),v._v(" "),_("p",[v._v("一旦发生缓存穿透，我们就可以针对查询的数据，在Redis中缓存一个空值或是和业务层协商确定的缺省值（例如，库存的缺省值可以设为0）。紧接着，应用发送的后续请求再进行查询时，就可以直接从Redis中读取空值或缺省值，返回给业务应用了")]),v._v(" "),_("p",[v._v("2.使用布隆过滤器快速判断数据是否存在，避免从数据库中查询数据是否存在，减轻数据库压力。")]),v._v(" "),_("p",[v._v("布隆过滤器由一个初值都为0的bit数组和N个哈希函数组成，可以用来快速判断某个数据是否存在。当我们想标记某个数据存在时（例如，数据已被写入数据库），布隆过滤器会通过三个操作完成标记：")]),v._v(" "),_("ul",[_("li",[v._v("首先，使用N个哈希函数，分别计算这个数据的哈希值，得到N个哈希值。")]),v._v(" "),_("li",[v._v("然后，我们把这N个哈希值对bit数组的长度取模，得到每个哈希值在数组中的对应位置。")]),v._v(" "),_("li",[v._v("最后，我们把对应位置的bit位设置为1，这就完成了在布隆过滤器中标记数据的操作。")])]),v._v(" "),_("p",[v._v("如果数据不存在（例如，数据库里没有写入数据），我们也就没有用布隆过滤器标记过数据，那么，bit数组对应bit位的值仍然为0。")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://typora-1309665611.cos.ap-nanjing.myqcloud.com/typora/image-20231116160348190.png",alt:"image-20231116160348190"}})]),v._v(" "),_("p",[v._v("图中布隆过滤器是一个包含10个bit位的数组，使用了3个哈希函数，当在布隆过滤器中标记数据X时，X会被计算3次哈希值，并对10取模，取模结果分别是1、3、7。所以，bit数组的第1、3、7位被设置为1。当应用想要查询X时，只要查看数组的第1、3、7位是否为1，只要有一个为0，那么，X就肯定不在数据库中。")]),v._v(" "),_("p",[v._v("正是基于布隆过滤器的快速检测特性**，我们可以在把数据写入数据库时，使用布隆过滤器做个标记。当缓存缺失后，应用查询数据库时，可以通过查询布隆过滤器快速判断数据是否存在。如果不存在，就不用再去数据库中查询了**。这样一来，即使发生缓存穿透了，大量请求只会查询Redis和布隆过滤器，而不会积压到数据库，也就不会影响数据库的正常运行。布隆过滤器可以使用Redis实现，本身就能承担较大的并发访问压力。")]),v._v(" "),_("p",[v._v("3.在请求入口的"),_("strong",[v._v("前端进行请求检测")])]),v._v(" "),_("p",[v._v("主要针对的是恶意请求，缓存穿透的一个原因是有大量的恶意请求访问不存在的数据，所以，一个有效的应对方案是在请求入口前端，对业务系统接收到的请求进行合法性检测，把恶意的请求（例如请求参数不合理、请求参数是非法值、请求字段不存在）直接过滤掉，不让它们访问后端缓存和数据库。这样一来，也就不会出现缓存穿透问题了。")]),v._v(" "),_("h3",{attrs:{id:"小结-2"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#小结-2"}},[v._v("#")]),v._v(" 小结")]),v._v(" "),_("p",[v._v("缓存雪崩、击穿和穿透这三类异常问题。从问题成因来看，缓存雪崩和击穿主要是因为数据不在缓存中了，而缓存穿透则是因为数据既不在缓存中，也不在数据库中。总结一下：")]),v._v(" "),_("img",{staticStyle:{zoom:"80%"},attrs:{src:"https://typora-1309665611.cos.ap-nanjing.myqcloud.com/typora/image-20231116160812013.png",alt:"image-20231116160812013"}}),v._v(" "),_("p",[v._v("其中服务熔断、服务降级、请求限流这些方法都是属于“有损”方案，在保证数据库和整体系统稳定的同时，会对业务应用带来负面影响")]),v._v(" "),_("p",[v._v("所以尽量使用预防式方案：")]),v._v(" "),_("ul",[_("li",[v._v("针对缓存雪崩，合理地设置数据过期时间，以及搭建高可靠缓存集群；")]),v._v(" "),_("li",[v._v("针对缓存击穿，在缓存访问非常频繁的热点数据时，不要设置过期时间；")]),v._v(" "),_("li",[v._v("针对缓存穿透，提前在入口前端实现恶意请求检测，或者规范数据库的数据删除操作，避免误删除。")])]),v._v(" "),_("h2",{attrs:{id:"q-a"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#q-a"}},[v._v("#")]),v._v(" Q&A")]),v._v(" "),_("p",[v._v("2.缓存雪崩可以采用服务熔断、服务降级、请求限流的方法来应对。请你思考下，这三个机制可以用来应对缓存穿透问题吗？")])])}),[],!1,null,null,null);_.default=s.exports}}]);