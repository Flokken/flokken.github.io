(window.webpackJsonp=window.webpackJsonp||[]).push([[217],{547:function(t,a,s){"use strict";s.r(a);var e=s(4),v=Object(e.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"引言"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#引言"}},[t._v("#")]),t._v(" 引言")]),t._v(" "),a("blockquote",[a("p",[t._v("这节课通过四种场景，分析和选择该用那种redis集合来进行统计")])]),t._v(" "),a("p",[t._v("四种引用场景")]),t._v(" "),a("ul",[a("li",[t._v("在移动应用中，需要统计每天的新增用户数和第二天的留存用户数；")]),t._v(" "),a("li",[t._v("在电商网站的商品评论中，需要统计评论列表中的最新评论；")]),t._v(" "),a("li",[t._v("在签到打卡中，需要统计一个月内连续打卡的用户数；")]),t._v(" "),a("li",[t._v("在网页访问记录中，需要统计独立访客（Unique Visitor，UV）量。")])]),t._v(" "),a("h2",{attrs:{id:"聚合统计"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#聚合统计"}},[t._v("#")]),t._v(" 聚合统计")]),t._v(" "),a("p",[t._v("所谓的聚合统计，就是指统计多个集合元素的聚合结果，包括：统计多个集合的共有元素（交集统计）；把两个集合相比，统计其中一个集合独有的元素（差集统计）；统计多个集合的所有元素（并集统计）。")]),t._v(" "),a("p",[t._v("在刚才提到的场景中，统计手机App每天的新增用户数和第二天的留存用户数，正好对应了聚合统计。")]),t._v(" "),a("p",[t._v("要完成这个统计任务，我们可以用一个集合记录所有登录过App的用户ID，同时，用另一个集合记录每一天登录过App的用户ID。然后，再对这两个集合做聚合统计。我们来看下具体的操作。")]),t._v(" "),a("p",[t._v("记录所有登录过App的用户ID还是比较简单的，我们可以直接使用Set类型，把key设置为user280680，表示记录的是用户ID，value就是一个Set集合，里面是所有登录过App的用户ID，我们可以把这个Set叫作累计用户Set，如下图所示：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://typora-1309665611.cos.ap-nanjing.myqcloud.com/typora/image-20231026211443876.png",alt:"image-20231026211443876"}})]),t._v(" "),a("p",[t._v("在统计每天的新增用户时，"),a("strong",[t._v("我们只用计算每日用户Set和累计用户Set的差集就行。")])]),t._v(" "),a("h2",{attrs:{id:"排序统计"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#排序统计"}},[t._v("#")]),t._v(" 排序统计")]),t._v(" "),a("p",[t._v("接下来，我们再来聊一聊应对集合元素排序需求的方法。我以在电商网站上提供最新评论列表的场景为例，进行讲解。")]),t._v(" "),a("p",[t._v("最新评论列表包含了所有评论中的最新留言，"),a("strong",[t._v("这就要求集合类型能对元素保序")]),t._v("，也就是说，集合中的元素可以按序排列，这种对元素保序的集合类型叫作有序集合。")]),t._v(" "),a("p",[t._v("在Redis常用的4个集合类型中（List、Hash、Set、Sorted Set），List和Sorted Set就属于有序集合。")]),t._v(" "),a("p",[a("strong",[t._v("List是按照元素进入List的顺序进行排序的，而Sorted Set可以根据元素的权重来排序")]),t._v("，我们可以自己来决定每个元素的权重值。比如说，我们可以根据元素插入Sorted Set的时间确定权重值，先插入的元素权重小，后插入的元素权重大。")]),t._v(" "),a("p",[a("strong",[t._v("最新评论功能")])]),t._v(" "),a("p",[a("strong",[t._v("为什么不用List？")])]),t._v(" "),a("p",[t._v("List是通过元素在List中的位置来排序的，"),a("strong",[t._v("当有一个新元素插入时，原先的元素在List中的位置都后移了一位，比如说原来在第1位的元素现在排在了第2位。所以，对比新元素插入前后，List相同位置上的元素就会发生变化，用LRANGE读取时，就会读到旧元素。")])]),t._v(" "),a("p",[t._v("如果评论比较多，涉及到分页，List中的元素顺序变了，就可能出错。")]),t._v(" "),a("p",[a("strong",[t._v("用Sorted set")])]),t._v(" "),a("p",[t._v("我们可以按评论时间的先后给每条评论设置一个权重值，然后再把评论保存到Sorted Set中。Sorted Set的ZRANGEBYSCORE命令就可以按权重排序后返回元素。这样的话，即使集合中的元素频繁更新，Sorted Set也能通过ZRANGEBYSCORE命令准确地获取到按序排列的数据。")]),t._v(" "),a("p",[t._v("假设越新的评论权重越大，目前最新评论的权重是N，我们执行下面的命令时，就可以获得最新的10条评论：")]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("ZRANGEBYSCORE comments N-9 N\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[a("strong",[t._v("所以，在面对需要展示最新列表、排行榜等场景时，如果数据更新频繁或者需要分页显示，建议你优先考虑使用Sorted Set。")])]),t._v(" "),a("h2",{attrs:{id:"二值状态统计"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二值状态统计"}},[t._v("#")]),t._v(" 二值状态统计")]),t._v(" "),a("p",[t._v("现在，我们再来分析下第三个场景：二值状态统计。这里的二值状态就是指集合元素的取值就只有0和1两种。在签到打卡的场景中，我们只用记录签到（1）或未签到（0），所以它就是非常典型的二值状态，")]),t._v(" "),a("p",[t._v("在签到统计时，每个用户一天的签到用1个bit位就能表示，一个月（假设是31天）的签到情况用31个bit位就可以，而一年的签到也只需要用365个bit位，根本不用太复杂的集合类型。这个时候，我们就可以选择Bitmap。这是Redis提供的扩展数据类型。我来给你解释一下它的实现原理。")]),t._v(" "),a("p",[t._v("Bitmap本身是用String类型作为底层数据结构实现的一种统计二值状态的数据类型。String类型是会保存为二进制的字节数组，所以，Redis就把字节数组的每个bit位利用起来，用来表示一个元素的二值状态。你可以把Bitmap看作是一个bit数组。")]),t._v(" "),a("p",[t._v("Bitmap提供了GETBIT/SETBIT操作，使用一个偏移值offset对bit数组的某一个bit位进行读和写。不过，需要注意的是，Bitmap的偏移量是从0开始算的，也就是说offset的最小值是0。当使用SETBIT对一个bit位进行写操作时，这个bit位会被设置为1。Bitmap还提供了BITCOUNT操作，用来统计这个bit数组中所有“1”的个数。")]),t._v(" "),a("p",[t._v("那么，具体该怎么用Bitmap进行签到统计呢？我还是借助一个具体的例子来说明。")]),t._v(" "),a("p",[t._v("假设我们要统计ID 3000的用户在2020年8月份的签到情况，就可以按照下面的步骤进行操作。")]),t._v(" "),a("p",[t._v("第一步，执行下面的命令，记录该用户8月3号已签到。")]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("SETBIT uid:sign:3000:202008 2 1 \n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("第二步，检查该用户8月3日是否签到。")]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("GETBIT uid:sign:3000:202008 2 \n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("第三步，统计该用户在8月份的签到次数。")]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("BITCOUNT uid:sign:3000:202008\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("这样，我们就知道该用户在8月份的签到情况了，是不是很简单呢？接下来，你可以再思考一个问题：如果记录了1亿个用户10天的签到情况，你有办法统计出这10天连续签到的用户总数吗？")]),t._v(" "),a("p",[t._v("在介绍具体的方法之前，我们要先知道，Bitmap支持用BITOP命令对多个Bitmap按位做“与”“或”“异或”的操作，操作的结果会保存到一个新的Bitmap中。")]),t._v(" "),a("p",[t._v("我以按位“与”操作为例来具体解释一下。从下图中，可以看到，三个Bitmap bm1、bm2和bm3，对应bit位做“与”操作，结果保存到了一个新的Bitmap中（示例中，这个结果Bitmap的key被设为“resmap”）。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://typora-1309665611.cos.ap-nanjing.myqcloud.com/typora/4151af42513cf5f7996fe86c6064f97a.jpg",alt:"img"}})]),t._v(" "),a("p",[t._v("回到刚刚的问题，在统计1亿个用户连续10天的签到情况时，你可以把每天的日期作为key，每个key对应一个1亿位的Bitmap，每一个bit对应一个用户当天的签到情况。")]),t._v(" "),a("p",[t._v("接下来，我们对10个Bitmap做“与”操作，得到的结果也是一个Bitmap。在这个Bitmap中，只有10天都签到的用户对应的bit位上的值才会是1。最后，我们可以用BITCOUNT统计下Bitmap中的1的个数，这就是连续签到10天的用户总数了。")]),t._v(" "),a("p",[t._v("现在，我们可以计算一下记录了10天签到情况后的内存开销。每天使用1个1亿位的Bitmap，大约占12MB的内存（10^8/8/1024/1024），10天的Bitmap的内存开销约为120MB，内存压力不算太大。不过，在实际应用时，最好对Bitmap设置过期时间，让Redis自动删除不再需要的签到记录，以节省内存开销。")]),t._v(" "),a("p",[t._v("所以，如果只需要统计数据的二值状态，例如商品有没有、用户在不在等，就可以使用Bitmap，因为它只用一个bit位就能表示0或1。在记录海量数据时，Bitmap能够有效地节省内存空间。")]),t._v(" "),a("h2",{attrs:{id:"基数统计"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基数统计"}},[t._v("#")]),t._v(" 基数统计")]),t._v(" "),a("p",[t._v("最后，我们再来看一个统计场景：基数统计。基数统计就是指统计一个集合中不重复的元素个数。对应到我们刚才介绍的场景中，就是统计网页的UV。")]),t._v(" "),a("p",[t._v("网页UV的统计有个独特的地方，就是需要去重，一个用户一天内的多次访问只能算作一次。在Redis的集合类型中，Set类型默认支持去重，所以看到有去重需求时，我们可能第一时间就会想到用Set类型。")]),t._v(" "),a("p",[t._v("我们来结合一个例子看一看用Set的情况。")]),t._v(" "),a("p",[t._v("有一个用户user1访问page1时，你把这个信息加到Set中：")]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("SADD page1:uv user1\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("用户1再来访问时，Set的去重功能就保证了不会重复记录用户1的访问次数，这样，用户1就算是一个独立访客。当你需要统计UV时，可以直接用SCARD命令，这个命令会返回一个集合中的元素个数。")]),t._v(" "),a("p",[t._v("但是，如果page1非常火爆，UV达到了千万，这个时候，一个Set就要记录千万个用户ID。对于一个搞大促的电商网站而言，这样的页面可能有成千上万个，如果每个页面都用这样的一个Set，就会消耗很大的内存空间。")]),t._v(" "),a("p",[t._v("当然，你也可以用Hash类型记录UV。")]),t._v(" "),a("p",[t._v("例如，你可以把用户ID作为Hash集合的key，当用户访问页面时，就用HSET命令（用于设置Hash集合元素的值），对这个用户ID记录一个值“1”，表示一个独立访客，用户1访问page1后，我们就记录为1个独立访客，如下所示：")]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("HSET page1:uv user1 1\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("即使用户1多次访问页面，重复执行这个HSET命令，也只会把user1的值设置为1，仍然只记为1个独立访客。当要统计UV时，我们可以用HLEN命令统计Hash集合中的所有元素个数。")]),t._v(" "),a("p",[t._v("但是，和Set类型相似，当页面很多时，Hash类型也会消耗很大的内存空间。那么，有什么办法既能完成统计，还能节省内存吗？")]),t._v(" "),a("p",[t._v("这时候，就要用到Redis提供的HyperLogLog了。")]),t._v(" "),a("p",[t._v("HyperLogLog是一种用于统计基数的数据集合类型，它的最大优势就在于，当集合元素数量非常多时，它计算基数所需的空间总是固定的，而且还很小。")]),t._v(" "),a("h2",{attrs:{id:"小结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#小结"}},[t._v("#")]),t._v(" 小结")]),t._v(" "),a("p",[t._v("这节课，我们结合统计新增用户数和留存用户数、最新评论列表、用户签到数以及网页独立访客量这4种典型场景，学习了集合类型的4种统计模式，分别是聚合统计、排序统计、二值状态统计和基数统计。为了方便你掌握，我把Set、Sorted Set、Hash、List、Bitmap、HyperLogLog的支持情况和优缺点汇总在了下面的表格里，希望你把这张表格保存下来，时不时地复习一下。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://typora-1309665611.cos.ap-nanjing.myqcloud.com/typora/c0bb35d0d91a62ef4ca1bd939a9b136e.jpg",alt:"img"}})]),t._v(" "),a("p",[t._v("可以看到，Set和Sorted Set都支持多种聚合统计，不过，对于差集计算来说，只有Set支持。Bitmap也能做多个Bitmap间的聚合计算，包括与、或和异或操作。")]),t._v(" "),a("p",[t._v("当需要进行排序统计时，List中的元素虽然有序，但是一旦有新元素插入，原来的元素在List中的位置就会移动，那么，按位置读取的排序结果可能就不准确了。而Sorted Set本身是按照集合元素的权重排序，可以准确地按序获取结果，所以建议你优先使用它。")]),t._v(" "),a("p",[t._v("如果我们记录的数据只有0和1两个值的状态，Bitmap会是一个很好的选择，这主要归功于Bitmap对于一个数据只用1个bit记录，可以节省内存。")]),t._v(" "),a("p",[t._v("对于基数统计来说，如果集合元素量达到亿级别而且不需要精确统计时，我建议你使用HyperLogLog。")]),t._v(" "),a("blockquote",[a("p",[t._v("当然，Redis的应用场景非常多，这张表中的总结不一定能覆盖到所有场景。我建议你也试着自己画一张表，把你遇到的其他场景添加进去。长久积累下来，你一定能够更加灵活地把集合类型应用到合适的实践项目中。")])]),t._v(" "),a("h2",{attrs:{id:"q-a"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#q-a"}},[t._v("#")]),t._v(" Q&A")]),t._v(" "),a("p",[t._v("1.我想请你聊一聊，你还遇到过其他的统计场景吗？用的是怎样的集合类型呢")])])}),[],!1,null,null,null);a.default=v.exports}}]);