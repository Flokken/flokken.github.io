(window.webpackJsonp=window.webpackJsonp||[]).push([[245],{573:function(e,n,s){"use strict";s.r(n);var t=s(4),a=Object(t.a)({},(function(){var e=this,n=e._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("p",[e._v("这一节主要是测试我们的C++背景够不够，")]),e._v(" "),n("p",[e._v("环境配置")]),e._v(" "),n("p",[n("a",{attrs:{href:"https://blog.csdn.net/J__M__C/article/details/129858032",target:"_blank",rel:"noopener noreferrer"}},[e._v("CMU15445（2023 Spring） lab - 环境配置"),n("OutboundLink")],1)]),e._v(" "),n("h2",{attrs:{id:"task-1-copy-on-write-trie"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#task-1-copy-on-write-trie"}},[e._v("#")]),e._v(" Task 1 copy-on-write Trie")]),e._v(" "),n("blockquote",[n("p",[n("a",{attrs:{href:"https://www.cnblogs.com/st0rmKR/p/17591533.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("参考:"),n("OutboundLink")],1)])]),e._v(" "),n("p",[e._v("首先要了解Trie树是啥，这里不介绍。说一下写时复制trie/可持久化Trie。根据代码我们可以知道，其有两种节点"),n("code",[e._v("TrieNode")]),e._v("和"),n("code",[e._v("TrieNodeWithValue")]),e._v("。")]),e._v(" "),n("ul",[n("li",[n("p",[e._v("其中叶子节点显然一定是一个"),n("code",[e._v("TrieNodeWithValue")]),e._v("，因为在该字符串的末尾字符存储其"),n("code",[e._v("value")])])]),e._v(" "),n("li",[n("p",[e._v("而部分中间节点也可能是"),n("code",[e._v("TrieNodeWithValue")]),e._v(",比如")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('初始 Trie 树为空：\n        root\n插入 ("an", 1)：\n        root\n         |\n         a\n         |\n         n (value: 1)\n插入 ("a", 1)：\n        root\n         |\n         a (value: 1)\n         |\n         n (value: 1)\n')])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br")])])])]),e._v(" "),n("p",[e._v("**写时复制（Copy-on-Write，简称COW）**是一种内存管理技术，在该技术中，当多个引用共享同一个数据时，只有在某个引用试图修改数据时，才会进行实际的复制操作，以确保每个引用都具有独立的副本。")]),e._v(" "),n("blockquote",[n("p",[e._v("对应到这里，就是get()时直接查找，而put和remove涉及到修改元素，就需要对节点创建新副本，而不是修改元素本身")])]),e._v(" "),n("p",[e._v("课程里分别介绍了其三个操作"),n("code",[e._v("get(),put(),delete()")])]),e._v(" "),n("h3",{attrs:{id:"get"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#get"}},[e._v("#")]),e._v(" Get()")]),e._v(" "),n("p",[e._v("这个和普通的trie没什么区别，就是查找对应key，返回对应value。")]),e._v(" "),n("p",[e._v("具体来说，直接用迭代的方式，从"),n("code",[e._v("root_")]),e._v("往下查找"),n("code",[e._v("children")]),e._v(",有以下情况:")]),e._v(" "),n("ul",[n("li",[e._v("对应的key在Trie树中不存在，那么应该提前退出，返回nullptr。")]),e._v(" "),n("li",[e._v("对应的key在Trie树中存在，但是其并非一个带值的节点，返回nullptr。")]),e._v(" "),n("li",[e._v("对应的key在Trie树中存在，且其是一个带值的节点，那么将该节点的值返回。")])]),e._v(" "),n("div",{staticClass:"language-C++ line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('auto Trie::Get(std::string_view key) const -> const T * {\n  throw NotImplementedException("Trie::Get is not implemented.");\n  //throw NotImplementedException("Trie::Get is not implemented.");\n\n  // You should walk through the trie to find the node corresponding to the key. If the node doesn\'t exist, return\n  // nullptr. After you find the node, you should use `dynamic_cast` to cast it to `const TrieNodeWithValue<T> *`. If\n  // dynamic_cast returns `nullptr`, it means the type of the value is mismatched, and you should return nullptr.\n  // Otherwise, return the value.\n  std::shared_ptr<const TrieNode>cur = root_;\n//这里感觉可能有问题，因为普通节点和叶子节点类型不一样，但是这里用同一个类型的指针接收他们\n  //注意叶子类型节点继承自普通节点类型\n  for(char c:key){\n    auto it = cur->children_.find(c);\n    if(it==cur->children_.end()){\n      return nullptr;  // Node doesn\'t exist for the given key\n      //比如树里有abc，但是查acc，那么到c时，就会进入这个地方，因为ch的find(c)会没有找到元素，会返回end()\n    }\n    //operator[] 并不适用于常量对象，因为它可能会改变对象的内容。可以使用 at() 成员函数来代替 operator[]，因为 at() 支持常量对象的访问。\n    cur = cur->children_.at(c);\n  }\n  //auto的类型就是dynamic_cast转换后的类型\n  //trie树只有叶子节点存储值,到这里时肯定是叶子节点\n  //转换基类指针为子类指针，才可以访问子类的value_属性\n  auto * node_with_value = dynamic_cast<const TrieNodeWithValue<T>*>(cur.get());\n  if (node_with_value == nullptr) {\n    return nullptr;  // Type mismatch, return nullptr\n  }\n  return node_with_value->value_.get();\n}\n\n\n')])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br"),n("span",{staticClass:"line-number"},[e._v("17")]),n("br"),n("span",{staticClass:"line-number"},[e._v("18")]),n("br"),n("span",{staticClass:"line-number"},[e._v("19")]),n("br"),n("span",{staticClass:"line-number"},[e._v("20")]),n("br"),n("span",{staticClass:"line-number"},[e._v("21")]),n("br"),n("span",{staticClass:"line-number"},[e._v("22")]),n("br"),n("span",{staticClass:"line-number"},[e._v("23")]),n("br"),n("span",{staticClass:"line-number"},[e._v("24")]),n("br"),n("span",{staticClass:"line-number"},[e._v("25")]),n("br"),n("span",{staticClass:"line-number"},[e._v("26")]),n("br"),n("span",{staticClass:"line-number"},[e._v("27")]),n("br"),n("span",{staticClass:"line-number"},[e._v("28")]),n("br"),n("span",{staticClass:"line-number"},[e._v("29")]),n("br"),n("span",{staticClass:"line-number"},[e._v("30")]),n("br"),n("span",{staticClass:"line-number"},[e._v("31")]),n("br")])]),n("h3",{attrs:{id:"put"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#put"}},[e._v("#")]),e._v(" Put()")]),e._v(" "),n("p",[e._v("给定一个key和value，在Trie树中存储。由于copy-on-write的Trie树的特性，"),n("strong",[e._v("这个key对应路径上的所有节点，都应该新建，其余的所有节点就复用以前版本的Trie树中节点。")])]),e._v(" "),n("p",[e._v('介绍一下课程介绍里的例子，假设一开始插入("ab",1)和("ac",val),那么这颗树本来就是虚线连起来的样子。')]),e._v(" "),n("p",[e._v('然后插入一个("ad",2),'),n("strong",[e._v("那么要返回一颗实线连起来的下面那颗树。")])]),e._v(" "),n("p",[e._v("这里我们新增的节点只有 a对应的节点和2对应的节点，也就是这个key对应路径上的节点（包括root），并且要把其余节点复用（连起来）。")]),e._v(" "),n("p",[n("img",{attrs:{src:"https://typora-1309665611.cos.ap-nanjing.myqcloud.com/typora/image-20231204163045235.png",alt:"image-20231204163045235"}})]),e._v(" "),n("p",[n("strong",[e._v("具体做法")])]),e._v(" "),n("p",[e._v("这里选择迭代的做法，首先用一个数组把key对应的"),n("code",[e._v("TrieNode")]),e._v("存起来，因为后面需要新建（实际上就是调Clone()，底层数据并不会也跟着复制）")]),e._v(" "),n("blockquote",[n("p",[e._v("问题：Clone复制节点时，其与下属节点的关系也会复制过来吗？答案是的确会。")]),e._v(" "),n("p",[e._v("比如上面的node2，"),n("code",[e._v("node2=Clone(node1)")]),e._v(",那么"),n("code",[e._v("node2")]),e._v("也会有相关的连接信息。")]),e._v(" "),n("p",[e._v("原因：对于一个node,与其他node相连的方式是直接存"),n("code",[e._v("map")]),e._v("里。所以感觉Clone其实就是起了个别名。")])]),e._v(" "),n("p",[e._v("我们遍历key, (for c :key )有以下情况:")]),e._v(" "),n("ul",[n("li",[e._v("这个c没有，那么就需要新建节点")]),e._v(" "),n("li",[e._v("这个c有，那么直接clone")])]),e._v(" "),n("p",[e._v("这里值得一提是"),n("strong",[e._v("叶子节点")]),e._v("，就是如果我们发现这次要新建的叶子节点trie中也有了（并且可能是中间节点），那么新建的这个叶子节点也需要应该是带"),n("code",[e._v("children")]),e._v("的，也需要把关系拷贝过来。")]),e._v(" "),n("p",[e._v("如果trie中没有，可以直接建没有"),n("code",[e._v("children")]),e._v("的节点")]),e._v(" "),n("blockquote",[n("p",[e._v("特殊情况，如果插入空串，那么相当于啥也没插入，此时应该只会新建"),n("code",[e._v("root_")]),e._v(",其他节点都复用")])]),e._v(" "),n("blockquote",[n("p",[e._v("以后再更新递归的做法")])]),e._v(" "),n("div",{staticClass:"language-C++ line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('template <class T>\nauto Trie::Put(std::string_view key, T value) const -> Trie {\n  // Note that `T` might be a non-copyable type. Always use `std::move` when creating `shared_ptr` on that value.\n  throw NotImplementedException("Trie::Put is not implemented.");\n  //hrow NotImplementedException("Trie::Put is not implemented.");\n\n  // You should walk through the trie and create new nodes if necessary. If the node corresponding to the key already\n  // exists, you should create a new `TrieNodeWithValue`.\n  //Clone()方法返回一个复制了数据的unique_ptr,这里我不太理解到底是什么复制。\n//  //从底层来说，shared_ptr的构造函接受一个unique_ptr,并用move的方法来构造一个shared_ptr对象，所以这里直接传入就行，不用加move\n  std::shared_ptr<const TrieNode> cur_node = root_;\n  std::vector<std::shared_ptr<const TrieNode>> node_stack;\n  //假设我们要查key，那么我先把当前trie中的已有的key的节点全部存一下,此时两种情况：\n  //1是已经tire里全部都有，那么cur最后肯定不是空\n  //2 trie里只有一部分key（也可能没有），那么cur_node跳出的时候一定是nullptr\n  unsigned index=0;\n  unsigned  key_size=key.size();\n  //1 store road\n  while(index<key_size&&cur_node ){\n    char ch = key[index++];\n    node_stack.push_back(cur_node);\n    if(cur_node->children_.find(ch)==cur_node->children_.end()){\n        cur_node=nullptr;//\n    }else{\n      cur_node = cur_node->children_.at(ch);\n    }\n  }\n  //2 leaf node\n  //TrieNodeWithValue<T>的构造函数要求传入的value是指针，所以这里得搞一下\n  std::shared_ptr<T> shared_value = std::make_shared<T>(std::move(value));\n  //2.1 创建叶子节点。\n  //分别对应上面的cur_node两种情况，\n  // 如果此时cur_node为空，说明之前trie里没有这个字符串，注意此时index可能没走完，所以直接建一个只有value的节点即可\n  //如果不为空，那么此时index肯定指向key的最后一个字符，并且cur_node肯定是一个已经存在的节点。可能带节点也可能不带，所以我们这里创建一个带children的节点，并把可能存在的关系复制过去\n  std::shared_ptr<const TrieNodeWithValue<T>> leaf_node =\n      cur_node ? std::make_shared<const TrieNodeWithValue<T>>(cur_node->children_, shared_value)\n               : std::make_shared<const TrieNodeWithValue<T>>(shared_value);\n  // 2.2  create diff inner node\n  //多态，可以把子类的指针赋给父类的\n  std::shared_ptr<const TrieNode> child_node = leaf_node;\n  //对于上面提到的第一种情况，key还没遍历完或者刚好到末尾，说明trie树中缺少这部分路径的节点，需要把index,key_size()这个区间内的节点创建\n  while ( key_size>index) {\n    char ch = key[--key_size];\n    std::map<char, std::shared_ptr<const TrieNode>> children{{ch, child_node}};\n    cur_node = std::make_shared<const TrieNode>(children);\n    child_node = cur_node;\n  }\n  //3 copy，对于路径中有的节点一路clone\n  //自底向上的copy，此时cur就是最后一个节点，所以这里这一步赋值是必须的\n  cur_node = child_node;\n  //无符号整数不会比0小，当为0时，再减一会导致变为无符号的上限，所以应该比node_stack.size()大，用这个方法来跳出\n  for( unsigned  i = node_stack.size()-1;i<node_stack.size();i--){\n    cur_node = std::shared_ptr<const TrieNode>(node_stack[i]->Clone());\n    //const_cast 可以用于将指向常量对象的指针或引用转换为指向非常量对象的指针或引用\n    const_cast<TrieNode *>(cur_node.get())->children_[key[i]] = child_node;\n    child_node = cur_node;\n  }\n  return Trie(cur_node);\n\n}\n')])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br"),n("span",{staticClass:"line-number"},[e._v("17")]),n("br"),n("span",{staticClass:"line-number"},[e._v("18")]),n("br"),n("span",{staticClass:"line-number"},[e._v("19")]),n("br"),n("span",{staticClass:"line-number"},[e._v("20")]),n("br"),n("span",{staticClass:"line-number"},[e._v("21")]),n("br"),n("span",{staticClass:"line-number"},[e._v("22")]),n("br"),n("span",{staticClass:"line-number"},[e._v("23")]),n("br"),n("span",{staticClass:"line-number"},[e._v("24")]),n("br"),n("span",{staticClass:"line-number"},[e._v("25")]),n("br"),n("span",{staticClass:"line-number"},[e._v("26")]),n("br"),n("span",{staticClass:"line-number"},[e._v("27")]),n("br"),n("span",{staticClass:"line-number"},[e._v("28")]),n("br"),n("span",{staticClass:"line-number"},[e._v("29")]),n("br"),n("span",{staticClass:"line-number"},[e._v("30")]),n("br"),n("span",{staticClass:"line-number"},[e._v("31")]),n("br"),n("span",{staticClass:"line-number"},[e._v("32")]),n("br"),n("span",{staticClass:"line-number"},[e._v("33")]),n("br"),n("span",{staticClass:"line-number"},[e._v("34")]),n("br"),n("span",{staticClass:"line-number"},[e._v("35")]),n("br"),n("span",{staticClass:"line-number"},[e._v("36")]),n("br"),n("span",{staticClass:"line-number"},[e._v("37")]),n("br"),n("span",{staticClass:"line-number"},[e._v("38")]),n("br"),n("span",{staticClass:"line-number"},[e._v("39")]),n("br"),n("span",{staticClass:"line-number"},[e._v("40")]),n("br"),n("span",{staticClass:"line-number"},[e._v("41")]),n("br"),n("span",{staticClass:"line-number"},[e._v("42")]),n("br"),n("span",{staticClass:"line-number"},[e._v("43")]),n("br"),n("span",{staticClass:"line-number"},[e._v("44")]),n("br"),n("span",{staticClass:"line-number"},[e._v("45")]),n("br"),n("span",{staticClass:"line-number"},[e._v("46")]),n("br"),n("span",{staticClass:"line-number"},[e._v("47")]),n("br"),n("span",{staticClass:"line-number"},[e._v("48")]),n("br"),n("span",{staticClass:"line-number"},[e._v("49")]),n("br"),n("span",{staticClass:"line-number"},[e._v("50")]),n("br"),n("span",{staticClass:"line-number"},[e._v("51")]),n("br"),n("span",{staticClass:"line-number"},[e._v("52")]),n("br"),n("span",{staticClass:"line-number"},[e._v("53")]),n("br"),n("span",{staticClass:"line-number"},[e._v("54")]),n("br"),n("span",{staticClass:"line-number"},[e._v("55")]),n("br"),n("span",{staticClass:"line-number"},[e._v("56")]),n("br"),n("span",{staticClass:"line-number"},[e._v("57")]),n("br"),n("span",{staticClass:"line-number"},[e._v("58")]),n("br"),n("span",{staticClass:"line-number"},[e._v("59")]),n("br"),n("span",{staticClass:"line-number"},[e._v("60")]),n("br")])]),n("h3",{attrs:{id:"remove"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#remove"}},[e._v("#")]),e._v(" Remove()")]),e._v(" "),n("p",[e._v("给定一个Key，在Trie树中删除掉这个key对应的value。\n同样在删除操作中，对应的key路径上的节点我们需要新建，其他的需要复用。")]),e._v(" "),n("blockquote",[n("p",[e._v("注意分析清楚再写，情况还是比较复杂的。")]),e._v(" "),n("p",[e._v("特别是cur_node和key[index]的关系")])]),e._v(" "),n("ol",[n("li",[e._v("对应的key在Trie树中不存在，那么此时我们不需要做任何操作，将原先的Trie树原封不动的返回出去即可。")]),e._v(" "),n("li",[e._v("对应的key在Trie树中存在路径，但是终端节点并不是一个带值节点。那么说明这个节点时其他节点的路径（中间节点），不能删去，此时我们不需要做任何操作，同样直接返回即可。")]),e._v(" "),n("li",[e._v("对应的key在Trie树中存在路径，且终端节点是一个带值节点。此时需要分两种情况讨论。\n"),n("ol",[n("li",[e._v("该终端节点是一个叶子节点。那么我们可以直接将该叶子节点删去，同时在父结点的children列表中删去该节点。\n"),n("ol",[n("li",[e._v("这里还有一个点需要注意，删除这个节点之后，我们还要自底向上的查看其父节点，"),n("strong",[e._v("如果父节点的"),n("code",[e._v("children_")]),e._v("里只有当前这个"),n("code",[e._v("cur_node")]),e._v(",并且也还没遇到过带值的节点，那么这个节点需要删掉（两个条件）")]),e._v("。")]),e._v(" "),n("li",[e._v("我感觉这里我虽然最终蒙过去了，但没有完全理解，一个remove花了两天！唉")])])]),e._v(" "),n("li",[e._v("该终端节点不是一个叶子节点，那么我们应该将该节点从带值节点转换成一个不带值节点，而链接关系之类的应该保持原封不动。")])])])]),e._v(" "),n("div",{staticClass:"language-C++ line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('auto Trie::Remove(std::string_view key) const -> Trie {\n  throw NotImplementedException("Trie::Remove is not implemented.");\n\n  //throw NotImplementedException("Trie::Remove is not implemented.");\n  // You should walk through the trie and remove nodes if necessary. If the node doesn\'t contain a value any more,\n  // you should convert it to `TrieNode`. If a node doesn\'t have children any more, you should remove it.\n  std::vector<std::shared_ptr<const TrieNode>> node_stack;  // store the same node\n  std::shared_ptr<const TrieNode> cur_node = root_;\n  std::shared_ptr<const TrieNode> pre_node = root_;\n  unsigned index=0;\n  unsigned  key_size=key.size();\n  //1 store road\n  while(index<key_size&&cur_node ){\n     char ch = key[index++];\n    pre_node = cur_node;\n    node_stack.push_back(cur_node);\n    if(cur_node->children_.find(ch)==cur_node->children_.end()){\n      cur_node=nullptr;//\n    }else{\n      cur_node = cur_node->children_.at(ch);\n    }\n  }\n \n  if (index != key_size || !cur_node || !cur_node->is_value_node_) {\n    return *this;\n  }\n  //到这里，说明得到cur_node因为最后迭代了一次，所以cur_node对应的就是最后一个key[index],并且带值\n  //也就是说node_stack[index]->childer_[key[index]] == cur_node\n  // 2.create end node\n\n\n  //如果是中间节点，把他从带值节点转换成不带值的（相当于删除了），children等不变\n  std::shared_ptr<const TrieNode> end_node =\n      cur_node->children_.empty() ? nullptr : std::make_shared<const TrieNode>(cur_node->children_);\n\n  ////如果这是叶子节点，可以直接删除，并且如果其父节点不是值节点并且只有这一个节点，也要删除\n  const_cast<TrieNode *>(pre_node->children_.erase(key[index-1]));\n  // 3.copy same node\n  std::shared_ptr<const TrieNode> child_node = end_node;\n  cur_node = end_node;\n  if(end_node!=nullptr) {\n    for (size_t i = node_stack.size() - 1; i < node_stack.size(); --i) {\n      cur_node = std::shared_ptr<const TrieNode>(node_stack[i]->Clone());\n      const_cast<TrieNode *>(cur_node.get())->children_[key[i]] = child_node;\n      child_node = cur_node;\n    }\n  }else{\n    bool is_t = false;\n    for (size_t i = node_stack.size() - 1; i < node_stack.size(); --i) {\n      cur_node = std::shared_ptr<const TrieNode>(node_stack[i]->Clone());\n      if((!is_t) && (cur_node->children_.size()==1)){//这里有两个条件！！！！！！！\n        //!is_t && cur_node如果这么写，就会出错，暂时没有完全考虑清楚，以后补充\n        //const_cast<TrieNode *>(cur_node.get())->children_[key[i]] = nullptr;\n        const_cast<TrieNode *>(cur_node.get())->children_.erase(key[i]);\n      }else {\n        const_cast<TrieNode *>(cur_node.get())->children_[key[i]] = child_node;\n        child_node = cur_node;\n      }\n      if(cur_node->is_value_node_){ is_t=true; child_node = cur_node;}\n    }\n  }\n  if(cur_node->children_.empty()){\n    cur_node=nullptr;\n  }\n  return Trie(cur_node);\n\n}\n\n')])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br"),n("span",{staticClass:"line-number"},[e._v("17")]),n("br"),n("span",{staticClass:"line-number"},[e._v("18")]),n("br"),n("span",{staticClass:"line-number"},[e._v("19")]),n("br"),n("span",{staticClass:"line-number"},[e._v("20")]),n("br"),n("span",{staticClass:"line-number"},[e._v("21")]),n("br"),n("span",{staticClass:"line-number"},[e._v("22")]),n("br"),n("span",{staticClass:"line-number"},[e._v("23")]),n("br"),n("span",{staticClass:"line-number"},[e._v("24")]),n("br"),n("span",{staticClass:"line-number"},[e._v("25")]),n("br"),n("span",{staticClass:"line-number"},[e._v("26")]),n("br"),n("span",{staticClass:"line-number"},[e._v("27")]),n("br"),n("span",{staticClass:"line-number"},[e._v("28")]),n("br"),n("span",{staticClass:"line-number"},[e._v("29")]),n("br"),n("span",{staticClass:"line-number"},[e._v("30")]),n("br"),n("span",{staticClass:"line-number"},[e._v("31")]),n("br"),n("span",{staticClass:"line-number"},[e._v("32")]),n("br"),n("span",{staticClass:"line-number"},[e._v("33")]),n("br"),n("span",{staticClass:"line-number"},[e._v("34")]),n("br"),n("span",{staticClass:"line-number"},[e._v("35")]),n("br"),n("span",{staticClass:"line-number"},[e._v("36")]),n("br"),n("span",{staticClass:"line-number"},[e._v("37")]),n("br"),n("span",{staticClass:"line-number"},[e._v("38")]),n("br"),n("span",{staticClass:"line-number"},[e._v("39")]),n("br"),n("span",{staticClass:"line-number"},[e._v("40")]),n("br"),n("span",{staticClass:"line-number"},[e._v("41")]),n("br"),n("span",{staticClass:"line-number"},[e._v("42")]),n("br"),n("span",{staticClass:"line-number"},[e._v("43")]),n("br"),n("span",{staticClass:"line-number"},[e._v("44")]),n("br"),n("span",{staticClass:"line-number"},[e._v("45")]),n("br"),n("span",{staticClass:"line-number"},[e._v("46")]),n("br"),n("span",{staticClass:"line-number"},[e._v("47")]),n("br"),n("span",{staticClass:"line-number"},[e._v("48")]),n("br"),n("span",{staticClass:"line-number"},[e._v("49")]),n("br"),n("span",{staticClass:"line-number"},[e._v("50")]),n("br"),n("span",{staticClass:"line-number"},[e._v("51")]),n("br"),n("span",{staticClass:"line-number"},[e._v("52")]),n("br"),n("span",{staticClass:"line-number"},[e._v("53")]),n("br"),n("span",{staticClass:"line-number"},[e._v("54")]),n("br"),n("span",{staticClass:"line-number"},[e._v("55")]),n("br"),n("span",{staticClass:"line-number"},[e._v("56")]),n("br"),n("span",{staticClass:"line-number"},[e._v("57")]),n("br"),n("span",{staticClass:"line-number"},[e._v("58")]),n("br"),n("span",{staticClass:"line-number"},[e._v("59")]),n("br"),n("span",{staticClass:"line-number"},[e._v("60")]),n("br"),n("span",{staticClass:"line-number"},[e._v("61")]),n("br"),n("span",{staticClass:"line-number"},[e._v("62")]),n("br"),n("span",{staticClass:"line-number"},[e._v("63")]),n("br"),n("span",{staticClass:"line-number"},[e._v("64")]),n("br"),n("span",{staticClass:"line-number"},[e._v("65")]),n("br"),n("span",{staticClass:"line-number"},[e._v("66")]),n("br"),n("span",{staticClass:"line-number"},[e._v("67")]),n("br"),n("span",{staticClass:"line-number"},[e._v("68")]),n("br")])]),n("h2",{attrs:{id:"task2-concurrent-key-values-stores"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#task2-concurrent-key-values-stores"}},[e._v("#")]),e._v(" Task2  Concurrent Key-Values Stores")]),e._v(" "),n("p",[e._v("这里要求对于每次对树进行修改时，都需要获取新的树根来访问新内容，并且由于PUT()和Remove()操作没有返回值，需要使用并发原语来控制他们")]),e._v(" "),n("p",[e._v("这里的操作有些特殊，要求同时为多个读进程和一个写进程服务，也就是说哪怕有进程在读，这个写进程也能修改trie，但是是在旧的root()之上。")]),e._v(" "),n("blockquote",[n("p",[e._v("这里介绍一下C++的锁，这个实验使用的是互斥锁"),n("code",[e._v("std:: mutex")]),e._v(",读锁和写锁都是这个类型。")])]),e._v(" "),n("p",[n("strong",[e._v("Get():")])]),e._v(" "),n("p",[e._v("**要求返回value，**注意由于我们返回的是指针。那么存在一个问题。因为要同时让读进程和写进程一起处理，因此会产生一个问题，就是Get返回的指针指向数据可能已经没了")]),e._v(" "),n("p",[e._v("所以返回一个 "),n("code",[e._v("ValueGuard")]),e._v("，"),n("strong",[e._v("它存储对值的引用")]),e._v("和与 trie 结构的根相对应的 TrieNode，以便在我们存储 ValueGuard 时可以访问该值。")]),e._v(" "),n("blockquote",[n("p",[e._v("这个"),n("code",[e._v("ValueGuard")]),e._v("还存了树根，在这个实验的test里好像也没啥用？对比value时都是直接返回存的value。")])]),e._v(" "),n("p",[n("strong",[e._v("Put():")])]),e._v(" "),n("p",[e._v("显然，对于读锁，我们要保证可以多个进程可以同时读取，所以读完树根马上就释放。")]),e._v(" "),n("p",[e._v("对于写锁，我们进行完这个写进程所有操作后才应该释放，保证只有一个写进程。")]),e._v(" "),n("p",[n("strong",[e._v("要求不返回")]),e._v("。首先获取写锁，然后再获取树根锁，从而得到树根，释放树根锁（让其他读者可以获取树根进行读入）。然后调用Trie::Put，完成后需要更新树根，因此又需要获取树根锁，更新完再释放。最后释放写锁。（保证永远最多只有一个写者）")]),e._v(" "),n("p",[n("strong",[e._v("Remove():")])]),e._v(" "),n("p",[n("strong",[e._v("要求不返回")]),e._v("。加速逻辑和put一样")]),e._v(" "),n("h2",{attrs:{id:"task3-debug"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#task3-debug"}},[e._v("#")]),e._v(" Task3 Debug")]),e._v(" "),n("p",[e._v("就是打断点，调试看值，但是本地的测试数据和gradescope平台上的测试数据不一样。需要把TrieDebugger改成以下数据")]),e._v(" "),n("div",{staticClass:"language-C++ line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v(' auto trie = Trie();\n  trie = trie.Put<uint32_t>("65", 25);\n  trie = trie.Put<uint32_t>("61", 65);\n  trie = trie.Put<uint32_t>("82", 84);\n  trie = trie.Put<uint32_t>("2", 42);\n  trie = trie.Put<uint32_t>("16", 67);\n  trie = trie.Put<uint32_t>("94", 53);\n  trie = trie.Put<uint32_t>("20", 35);\n  trie = trie.Put<uint32_t>("3", 57);\n  trie = trie.Put<uint32_t>("93", 30);\n  trie = trie.Put<uint32_t>("75", 29);\n')])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br")])]),n("blockquote",[n("p",[e._v("而且最后一个问题969的value是30，如果改成这样插入数据，根本就没有969？不过这里能过就不用管了也没啥用")])]),e._v(" "),n("h2",{attrs:{id:"task4-sql-string-functions"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#task4-sql-string-functions"}},[e._v("#")]),e._v(" Task4:SQL String Functions")]),e._v(" "),n("p",[e._v("实现Lower和Upper函数，这个很好做。这两个函数在"),n("code",[e._v("string_expression.h")]),e._v("里")]),e._v(" "),n("blockquote",[n("p",[e._v("clion可以用"),n("code",[e._v("ctrl+shift+N")]),e._v("查找某个文件")])]),e._v(" "),n("p",[e._v("**这个的主要难点在于在BusTub中注册函数。**找到plan_func_call.cpp这个文件，实现里面的函数Planner::GetFuncCallFromFactory即可。")])])}),[],!1,null,null,null);n.default=a.exports}}]);