(window.webpackJsonp=window.webpackJsonp||[]).push([[258],{587:function(t,r,a){"use strict";a.r(r);var e=a(4),v=Object(e.a)({},(function(){var t=this,r=t._self._c;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("blockquote",[r("p",[t._v("推荐阅读")]),t._v(" "),r("p",[r("a",{attrs:{href:"https://www.jianshu.com/p/c9024d05887f",target:"_blank",rel:"noopener noreferrer"}},[t._v("Raft 协议 - 简书 (jianshu.com)"),r("OutboundLink")],1)]),t._v(" "),r("p",[r("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/488916891",target:"_blank",rel:"noopener noreferrer"}},[t._v("Raft 协议原理详解，10 分钟带你掌握！ - 知乎 (zhihu.com)"),r("OutboundLink")],1)]),t._v(" "),r("p",[t._v("<<深入理解分布式系统>>")]),t._v(" "),r("p",[r("a",{attrs:{href:"https://ashiamd.github.io/docsify-notes/#/study/%E5%88%86%E5%B8%83%E5%BC%8F%E7%AD%96%E7%95%A5/MIT6.824%E7%BD%91%E8%AF%BE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-01?id=lecture5-%e5%ae%b9%e9%94%99-raftfault-tolerance-raft-1",target:"_blank",rel:"noopener noreferrer"}},[t._v("mit6.824 lecture5  raft笔记"),r("OutboundLink")],1)])]),t._v(" "),r("blockquote",[r("p",[t._v("这里记录只是为了方便自己学习和记录，可能有诸多不足")])]),t._v(" "),r("h2",{attrs:{id:"raft"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#raft"}},[t._v("#")]),t._v(" Raft")]),t._v(" "),r("h3",{attrs:{id:"引入"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#引入"}},[t._v("#")]),t._v(" 引入")]),t._v(" "),r("h4",{attrs:{id:"什么是raft"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#什么是raft"}},[t._v("#")]),t._v(" 什么是Raft？")]),t._v(" "),r("p",[t._v("Raft 是工程上使用较为广泛的强一致性、去中心化、高可用的分布式协议，"),r("strong",[t._v("用于管理副本复制（Log Replication）。")])]),t._v(" "),r("blockquote",[r("p",[t._v("所有分布式共识算法的目标是一样的："),r("font",{attrs:{color:"red",size:"3"}},[t._v("就是保证日志完全相同的复制到多台服务器上（为了实现状态机复制）")])],1)]),t._v(" "),r("p",[t._v("Raft 是一种共识算法（Consensus Algorithm），"),r("strong",[t._v("所谓共识，就是多个节点对某个事情达成一致的看法，即使是在部分节点故障、网络延时、网络分割的情况下")]),t._v("。比较有名的共识算法还有 Paxos ，但是出了名的难懂。于是在 2014 年斯坦福大学发表了新的分布式协议 Raft，与 Paxos 相比，Raft 有着基本相同运行效率，但是更容易理解，也更容易被用在系统 开发上。")]),t._v(" "),r("h4",{attrs:{id:"应用场景"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#应用场景"}},[t._v("#")]),t._v(" 应用场景")]),t._v(" "),r("p",[t._v("这里先复习一下分布式系统里一些大麻烦")]),t._v(" "),r("p",[r("strong",[t._v("单点故障")])]),t._v(" "),r("p",[t._v("在前面的复制系统中，都存在单点故障问题(single point of failure)。")]),t._v(" "),r("ul",[r("li",[t._v("mapreduce中的cordinator")]),t._v(" "),r("li",[t._v("GFS的master")]),t._v(" "),r("li",[t._v("VM-FT的test-and-set存储服务器storage")])]),t._v(" "),r("p",[t._v("而上诉的方案中，采用单机管理而不是采用多实例/多机器的原因，是为了避免**脑裂(split-brain)**问题。")]),t._v(" "),r("blockquote",[r("p",[t._v("大多数情况下，单点故障是可以接受的，因为单机故障率显著比多机出现一台故障的概率低，并且重启单机以恢复工作的成本也相对较低，只需要容忍一小段时间的重启恢复工作。")])]),t._v(" "),r("p",[r("strong",[t._v("脑裂")])]),t._v(" "),r("p",[t._v("脑裂问题其实就是分布式集群中，由于有网络故障，产生了"),r("strong",[t._v("网络分区")]),t._v("，这时候原来的master和分区的服务器不能通信。于是其他服务器自己选了一个master出来，之后网络恢复了，但是有两个master，"),r("strong",[t._v("这就叫脑裂（split-brain）")])]),t._v(" "),r("blockquote",[r("p",[t._v("通常情况下，网络分区指的是在分布式集群中，节点之间由于网络不通，导致集群中节点形成不同的子区，子区中节点间的网络相通，而子区和区集间网络不通。网络分区是子区与子区之间在网络上相互隔离了。")])]),t._v(" "),r("p",[t._v("以redis在哨兵架构举例，redis的集群脑裂是某个master所在机器突然脱离了正常的网络，导致redis master节点跟redis slave节点和sentinel集群处于不同的网络分区，此时因为sentinel集群无法感知到master的存在，哨兵可能就会认为master宕机了，然后开启选举，将其他slave切换成了master，这个时候集群里就会有两个master，也就是所谓的脑裂。")]),t._v(" "),r("blockquote",[r("p",[t._v("两个master会导致这个集群没办法正常运行")])]),t._v(" "),r("p",[r("img",{attrs:{src:"https://typora-1309665611.cos.ap-nanjing.myqcloud.com/typora/image-20231007214814732.png",alt:"image-20231007214814732"}})]),t._v(" "),r("p",[r("strong",[t._v("Raft可以解决脑裂（网络分区）")])]),t._v(" "),r("p",[t._v("Raft一类的协议用于解决"),r("strong",[t._v("单点故障")]),t._v("问题，同时也用于解决"),r("strong",[t._v("网络分区")]),t._v("问题。这类解决方案的基本思想即："),r("strong",[t._v("大多数原则(majority rule)")]),t._v("，简单理解就是少数服从多数。")]),t._v(" "),r("blockquote",[r("p",[t._v("拓展：根据大多数原则，"),r("strong",[t._v("容忍f台服务器宕机，至少要"),r("code",[t._v("2f+1")]),t._v("台机子")])]),t._v(" "),r("p",[t._v("注意是至少，2f+2也行的，但是要同意数多于宕机数")])]),t._v(" "),r("p",[t._v("因此raft的应用场景是：")]),t._v(" "),r("ul",[r("li",[t._v("服务器可能宕机或者停止运行，过段时间才会恢复")]),t._v(" "),r("li",[t._v("可能有网络分区，并且一段时间后会恢复；节点之间的消息可能会丢失，延迟或者乱序")])]),t._v(" "),r("h3",{attrs:{id:"算法介绍"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#算法介绍"}},[t._v("#")]),t._v(" 算法介绍")]),t._v(" "),r("h4",{attrs:{id:"基本概念"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#基本概念"}},[t._v("#")]),t._v(" 基本概念")]),t._v(" "),r("p",[r("strong",[t._v("服务器状态")])]),t._v(" "),r("p",[t._v("Raft的服务器只能在以下三种状态中：")]),t._v(" "),r("ul",[r("li",[t._v("leader（领导者）。领导者负责处理所有的客户端请求以及日志复制。同一时刻只能有一个领导者")]),t._v(" "),r("li",[t._v("follower(跟随者)。跟随者完全被动的处理请求，跟随者不主动发送RPC请求，只响应收到的RPC请求，服务器大多数时候都处于这个状态")]),t._v(" "),r("li",[t._v("Candidate(候选者)。候选者用来选出新的领导者，候选者是处于leader和follower之间的状态。")])]),t._v(" "),r("p",[r("strong",[t._v("任期（Term）")])]),t._v(" "),r("p",[t._v("raft协议选出一个新的领导者意味着进入一个新任期，是一种逻辑时间。")]),t._v(" "),r("ul",[r("li",[r("strong",[t._v("任期号初始为0，单调递增永不重复")])]),t._v(" "),r("li",[t._v("每个server都要持久化存储一个currentTerm变量记录任期，并且必须持久化存储，这样宕机后才能知道最新任期")])]),t._v(" "),r("p",[r("strong",[t._v("通信")])]),t._v(" "),r("p",[t._v("raft服务器之间的通信有两种RPC方式")]),t._v(" "),r("ul",[r("li",[t._v("RequestVote,用于领导者选举")]),t._v(" "),r("li",[t._v("AppendEntries ,领导者用来复制日志和发送心跳")])]),t._v(" "),r("blockquote",[r("p",[t._v("真实时间可能在不同的机子上由于网络的问题是很难完全同步的")])]),t._v(" "),r("h4",{attrs:{id:"领导者选举"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#领导者选举"}},[t._v("#")]),t._v(" 领导者选举")]),t._v(" "),r("h5",{attrs:{id:"分裂选举"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#分裂选举"}},[t._v("#")]),t._v(" 分裂选举")]),t._v(" "),r("p",[t._v("日志分歧问题")]),t._v(" "),r("img",{staticStyle:{zoom:"80%"},attrs:{src:"https://typora-1309665611.cos.ap-nanjing.myqcloud.com/typora/image-20231008214938733.png",alt:"image-20231008214938733"}})])}),[],!1,null,null,null);r.default=v.exports}}]);