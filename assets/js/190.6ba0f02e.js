(window.webpackJsonp=window.webpackJsonp||[]).push([[190],{520:function(t,v,a){"use strict";a.r(v);var s=a(4),_=Object(s.a)({},(function(){var t=this,v=t._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h3",{attrs:{id:"概述"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[t._v("#")]),t._v(" 概述")]),t._v(" "),v("p",[t._v("如果我们把字节码看作程序语言的一种中间表示形式（Intermediate Representation，IR）的话（把javac干的事，也就是java代码转成字节码，可以称为"),v("strong",[t._v("前端")]),t._v("（解释））")]),t._v(" "),v("p",[t._v("那编译器无论在何时、在何种状态下把Class文件转换成与本地基础设施（硬件指令集、操作系统）相 关的二进制机器码，它都可以视为"),v("strong",[t._v("整个编译过程的后端（即时）")])]),t._v(" "),v("p",[v("strong",[t._v('"即时编译"')]),t._v("（Just-In-Time Compilation，JIT Compilation）通常指的是在程序运行时将字节码（或中间代码）转换为本机机器代码的编译过程，从而实现程序的执行。JIT 编译是一种后端编译技术，与程序的前端编译阶段（例如 Java 源代码编译为字节码）相对应。")]),t._v(" "),v("blockquote",[v("p",[t._v("总结一下")]),t._v(" "),v("p",[t._v("java代码->字节码  前端编译（解释执行）")]),t._v(" "),v("p",[t._v("字节码->二进制机器码 后端编译（即时编译）")])]),t._v(" "),v("p",[t._v("JVM 将执行状态分成了 5 个层次：")]),t._v(" "),v("ul",[v("li",[t._v("0 层，解释执行（Interpreter）")]),t._v(" "),v("li",[t._v("1 层，使用 C1 即时编译器编译执行（不带 profiling）")]),t._v(" "),v("li",[t._v("2 层，使用 C1 即时编译器编译执行（带基本的 profiling）")]),t._v(" "),v("li",[t._v("3 层，使用 C1 即时编译器编译执行（带完全的 profiling）")]),t._v(" "),v("li",[t._v("4 层，使用 C2 即时编译器编译执行")])]),t._v(" "),v("blockquote",[v("p",[t._v("profiling 是指在运行过程中收集一些程序执行状态的数据，例如【方法的调用次数】，【循环的\n回边次数】等")])]),t._v(" "),v("h3",{attrs:{id:"热点代码"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#热点代码"}},[t._v("#")]),t._v(" 热点代码")]),t._v(" "),v("p",[t._v("主流的两款商用Java虚拟机（HotSpot、OpenJ9）里，Java程序最初都是通过**解释器 （Interpreter）**进行解释执行的")]),t._v(" "),v("p",[t._v("当虚拟机发现某个方法或代码块的运行特别频繁，"),v("strong",[t._v("就会把这些代码认 定为“热点代码”（Hot Spot Code）")]),t._v("，为了提高热点代码的执行效率，在运行时，虚拟机将会把这些代码编译成本地机器码，并以各种手段尽可能地进行代码优化，"),v("strong",[t._v("运行时完成这个任务的后端编译器被称为即时编译器")])]),t._v(" "),v("blockquote",[v("p",[t._v("总结，即时编译器：把热点代码在运行时编译成本地机器码来提高热点代码的执行效率的")])]),t._v(" "),v("p",[t._v("热点代码主要是")]),t._v(" "),v("ul",[v("li",[t._v("被多次调用的方法")]),t._v(" "),v("li",[t._v("被多次执行的循环体")])]),t._v(" "),v("h3",{attrs:{id:"解释器与编译器"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#解释器与编译器"}},[t._v("#")]),t._v(" 解释器与编译器")]),t._v(" "),v("p",[t._v("如HotSpot、OpenJ9等，"),v("strong",[t._v("内部都同时包含解释器与编译器。")])]),t._v(" "),v("p",[t._v("当程序需要迅速启动和执行的时候，"),v("strong",[t._v("解释器可以首先发挥作用，省去编译的时间，立即运行。")])]),t._v(" "),v("p",[t._v("当程序启动后，随着时间的推移，"),v("strong",[t._v("编译器逐渐发挥作用，把越来越多的代码编译成本地代码")]),t._v("，这样可以减少解释器的中间损耗，获得更高的执行效率。")]),t._v(" "),v("p",[t._v("Hotspot虚拟机即时编译器")]),t._v(" "),v("ul",[v("li",[t._v("C1编译器，C2编译器，Graal编译器（JDK10出现）")])]),t._v(" "),v("h3",{attrs:{id:"编译对象和触发条件"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#编译对象和触发条件"}},[t._v("#")]),t._v(" 编译对象和触发条件")]),t._v(" "),v("p",[t._v("**热点探测：**就是探测那些代码时热点代码的过程")]),t._v(" "),v("p",[t._v("方法：")]),t._v(" "),v("ul",[v("li",[t._v("基于采样的热点探测：采用这种方法的虚拟机会周期性 地检查各个线程的调用栈顶，如果发现某个（或某些）方法经常出现在栈顶，那这个方法就是“热点方 法”\n"),v("ul",[v("li",[t._v("优：实现简单高效，还可以很容易地获取方法调用关系")]),t._v(" "),v("li",[t._v("缺：是很难精确地确认一个方法的热度，容易因为受到线程阻塞或别的外界因素的影响而 扰乱热点探测。")])])]),t._v(" "),v("li",[t._v("基于计数器的热点探测：采用这种方法的虚拟机会为 每个方法（甚至是代码块）建立计数器，"),v("strong",[t._v("统计方法的执行次数，如果执行次数超过一定的阈值就认为 它是“热点方法”")]),t._v(" "),v("ul",[v("li",[t._v("优点是精确一点，缺点是实现麻烦")])])])]),t._v(" "),v("blockquote",[v("p",[t._v("Hotspot用的基于计数器的方法，为了实现热点计数，HotSpot为每个方法准备了 两类计数器："),v("strong",[t._v("方法调用计数器（Invocation Counter）和回边计数器")]),t._v("（Back Edge Count")])]),t._v(" "),v("h3",{attrs:{id:"提前编译"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#提前编译"}},[t._v("#")]),t._v(" 提前编译")]),t._v(" "),v("p",[t._v("提前编译可能会影响java的某些特性，但是也可以获得性能上的提升？")]),t._v(" "),v("p",[t._v("提前编译有两条路径：")]),t._v(" "),v("ul",[v("li",[t._v("一条分支是做与传统C、C++编译器类似 的，在程序运行之前把程序代码编译成机器码的静态翻译工作；")]),t._v(" "),v("li",[t._v("另外一条分支是把原本即时编译器在 运行时要做的编译工作提前做好并保存下来，下次运行到这些代码（譬如公共库代码在被同一台机器 其他Java进程使用）时直接把它加载进来使用。")])]),t._v(" "),v("h3",{attrs:{id:"方法内联"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#方法内联"}},[t._v("#")]),t._v(" 方法内联")]),t._v(" "),v("p",[v("strong",[t._v("是编译器最重要的优化手段")])]),t._v(" "),v("p",[t._v("方法内联的优化行为理解起来是没有任何困难的，"),v("strong",[t._v("不过就是把目标方法的代码原封不动地“复 制”到发起调用的方法之中，避免发生真实的方法调用而已。")])]),t._v(" "),v("p",[t._v("但是方法内联实施起来很有难度：**Java语言中默认的实例方法是虚方法，**对于一个虚方法，"),v("strong",[t._v("编译器静态地去做内联的时候很难确定应该使用哪个方法版本")])]),t._v(" "),v("blockquote",[v("p",[t._v("只有使用 invokespecial指令调用的私有方法、实例构造器、父类方法和使用invokestatic指令调用的静态方法才会 在编译期进行解析")]),t._v(" "),v("p",[t._v("也就是说其他方法编译时都不能确定方法，都是多态的，")])]),t._v(" "),v("p",[t._v("补充：")]),t._v(" "),v("p",[t._v("假 如有ParentB和SubB是两个具有继承关系的父子类型，并且子类重写了父类的get()方法，那么b.get()是 执行父类的get()方法还是子类的get()方法，"),v("strong",[t._v("这应该是根据实际类型动态分派的，而实际类型必须在实 际运行到这一行代码时才能确定，编译器很难在编译时得出绝对准确的结论。")])]),t._v(" "),v("blockquote",[v("p",[t._v("内联与 虚方法之间会产生“矛盾”，那是不是为了提高执行性能，就应该默认给每个方法都使用final关键字去 修饰呢？C和C++语言的确是这样做的，默认的方法是非虚方法，如果需要用到多态，就用virtual关键 字来修饰，但Java选择了在虚拟机中解决这个问题。")])]),t._v(" "),v("p",[t._v("为了解决虚方法的内联问题，Java虚拟机首先引入了一种名"),v("strong",[t._v("为类型继承关系分析（Class Hierarchy Analysis，CHA）的技术")]),t._v(".，这是整个应用程序范围内的类型分析技术，用于确定在目前已加载的类 中，某个接口是否有多于一种的实现、某个类是否存在子类、某个子类是否覆盖了父类的某个虚方法 等信息。")]),t._v(" "),v("h4",{attrs:{id:"举例"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#举例"}},[t._v("#")]),t._v(" 举例")]),t._v(" "),v("p",[t._v("假设代码")]),t._v(" "),v("div",{staticClass:"language-java line-numbers-mode"},[v("pre",{pre:!0,attrs:{class:"language-java"}},[v("code",[v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("square")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" i "),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" i"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),v("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("square")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n")])]),t._v(" "),v("div",{staticClass:"line-numbers-wrapper"},[v("span",{staticClass:"line-number"},[t._v("1")]),v("br"),v("span",{staticClass:"line-number"},[t._v("2")]),v("br"),v("span",{staticClass:"line-number"},[t._v("3")]),v("br"),v("span",{staticClass:"line-number"},[t._v("4")]),v("br"),v("span",{staticClass:"line-number"},[t._v("5")]),v("br")])]),v("p",[t._v("如果发现 square 是"),v("strong",[t._v("热点方法")]),t._v("，"),v("strong",[t._v("并且长度不太长时，会进行内联")]),t._v("，所谓的内联就是把方法内代码拷贝、 粘贴到调用者的位置：")]),t._v(" "),v("p",[v("code",[t._v("System.out.println(9 * 9);")])]),t._v(" "),v("p",[t._v("还能进行"),v("strong",[t._v("常量折叠优化")])]),t._v(" "),v("p",[v("code",[t._v("System.out.println(81);")])]),t._v(" "),v("h3",{attrs:{id:"逃逸分析"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#逃逸分析"}},[t._v("#")]),t._v(" 逃逸分析")]),t._v(" "),v("p",[t._v("逃逸分析（Escape Analysis）是目前Java虚拟机中比较前沿的优化技术，它与类型继承关系分析一 样，并不是直接优化代码的手段，"),v("strong",[t._v("而是为其他优化措施提供依据的分析技术")])]),t._v(" "),v("p",[v("strong",[t._v("逃逸分析的基本原理是")]),t._v("：分析对象动态作用域，当一个对象在方法里面被定义后，它可能被外部 方法所引用，例如作为调用参数传递到其他方法中，"),v("strong",[t._v("这种称为方法逃逸；")])]),t._v(" "),v("ul",[v("li",[v("p",[t._v("甚至还有可能被外部线程访 问到，"),v("strong",[t._v("譬如赋值给可以在其他线程中访问的实例变量，这种称为线程逃逸；")])])]),t._v(" "),v("li",[v("p",[t._v("从不逃逸、方法逃逸到线程逃逸，称为对象由低到高的不同逃逸程度")])])]),t._v(" "),v("p",[t._v("如果能"),v("strong",[t._v("证明一个对象不会逃逸到方法或线程之外")]),t._v("（换句话说是别的方法或线程无法通过任何途径 访问到这个对象），或者"),v("strong",[t._v("逃逸程度比较低")]),t._v("（只逃逸出方法而不会逃逸出线程），就能对他进行一些优化")]),t._v(" "),v("ul",[v("li",[t._v("栈上分配")]),t._v(" "),v("li",[t._v("标量替换")]),t._v(" "),v("li",[t._v("同步消除")])]),t._v(" "),v("h3",{attrs:{id:"公共子表达式消除"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#公共子表达式消除"}},[t._v("#")]),t._v(" 公共子表达式消除")]),t._v(" "),v("p",[t._v("公共子表达式：如果一 个表达式E之前已经被计算过了，并且从先前的计算到现在E中所有变量的值都没有发生变化，那么E 的这次出现就称为公共子表达式。")]),t._v(" "),v("p",[t._v("对于这种表达式，没有必要花时间再对它重新进行计算，"),v("strong",[t._v("只需要直 接用前面计算过的表达式结果代替E")]),t._v("。")]),t._v(" "),v("ul",[v("li",[t._v("局部：如果这种优化仅限于程序基本块内，便可称为局部公共子表达 式消除（Local Common Subexpression Elimination）")]),t._v(" "),v("li",[t._v("全局：如果这种优化的范围涵盖了多个基本块，那就称 为全局公共子表达式消除（Global Common Subexpression Elimination）。")])]),t._v(" "),v("h3",{attrs:{id:"数组边界检查消除"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#数组边界检查消除"}},[t._v("#")]),t._v(" 数组边界检查消除")]),t._v(" "),v("p",[t._v("数组边界检查消除（Array Bounds Checking Elimination）是"),v("strong",[t._v("即时编译器中的一项语言相关的经典优 化技术")])]),t._v(" "),v("p",[t._v("Java语言是一门动态安全的语言，对数组的读写访问也不像C、C++那样实质上就是 裸指针操作。"),v("strong",[t._v("如果有一个数组foo[]，在Java语言中访问数组元素foo[i]的时候系统将会自动进行上下界 的范围检查，")])]),t._v(" "),v("p",[t._v("但是，频繁的并且可能不必要的检查也会带来开销。")]),t._v(" "),v("p",[t._v("举例")]),t._v(" "),v("ul",[v("li",[t._v("数组下标是一个常量，如foo[3]，只要 在编译期根据数据流分析来确定foo.length的值，并判断下标“3”没有越界，执行的时候就无须判断了。")]),t._v(" "),v("li",[t._v("更加常见的情况是，数组访问发生在循环之中，并且使用循环变量来进行数组的访问。如果编译器只 要通过数据流分析就可以判定循环变量的取值范围永远在区间[0，foo.length)之内，"),v("strong",[t._v("那么在循环中就可 以把整个数组的上下界检查消除掉，这可以节省很多次的条件判断操作。")])])])])}),[],!1,null,null,null);v.default=_.exports}}]);