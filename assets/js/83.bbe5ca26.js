(window.webpackJsonp=window.webpackJsonp||[]).push([[83],{413:function(v,_,t){"use strict";t.r(_);var s=t(4),a=Object(s.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h3",{attrs:{id:"基础概念"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#基础概念"}},[v._v("#")]),v._v(" 基础概念")]),v._v(" "),_("h4",{attrs:{id:"进程"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#进程"}},[v._v("#")]),v._v(" "),_("strong",[v._v("进程")])]),v._v(" "),_("p",[v._v("我们编写的代码只是一个存储在硬盘的静态文件，通过编译后就会生成二进制可执行文件，当我们运行这个可执行文件后，它会被装载到内存中，接着 CPU 会执行程序中的每一条指令，那么这个"),_("strong",[v._v("运行中的程序，就被称为「进程」（Process）")]),v._v("。")]),v._v(" "),_("p",[_("strong",[v._v("中断")])]),v._v(" "),_("p",[v._v("一种解决阻塞的机制。"),_("strong",[v._v("阻塞")]),v._v("指的是CPU因为需要等待资源而空闲的状态。")]),v._v(" "),_("p",[v._v("比如，进程从硬盘读数据，CPU本来应该"),_("strong",[v._v("阻塞")]),v._v("等待数据返回。有了中断机制，CPU可以去处理其他进程。当数据传输完后，收到"),_("strong",[v._v("中断")]),v._v("，")]),v._v(" "),_("p",[v._v("CPU继续运行这个进程。")]),v._v(" "),_("img",{staticStyle:{zoom:"67%"},attrs:{src:"https://typora-1309665611.cos.ap-nanjing.myqcloud.com/typora/image-20240323071931341.png",alt:"image-20240323071931341"}}),v._v(" "),_("blockquote",[_("p",[v._v("中断时必须保存当前状态信息，以便之后回来继续处理")])]),v._v(" "),_("p",[_("strong",[v._v("并发")])]),v._v(" "),_("p",[v._v("中断就已经有了这种"),_("strong",[v._v("多个程序、交替执行")]),v._v("的思想。")]),v._v(" "),_("blockquote",[_("p",[v._v("对于一个支持多进程的系统，CPU 会从一个进程快速切换至另一个进程，其间每个进程各运行几十或几百个毫秒。")])]),v._v(" "),_("p",[v._v("虽然"),_("strong",[v._v("单核")]),v._v("的 CPU 在某一个瞬间，只能运行一个进程。但在 1 秒钟期间，它可能会运行多个进程，这样就产生"),_("strong",[v._v("并行的错觉")]),v._v("，实际上这是"),_("strong",[v._v("并发")]),v._v("。")]),v._v(" "),_("blockquote",[_("p",[v._v("进程有着「"),_("strong",[v._v("运行 - 暂停 - 运行")]),v._v("」的活动规律")])]),v._v(" "),_("p",[v._v("还有个并行的概念容易混淆，"),_("strong",[v._v("并行")]),v._v("是对于"),_("strong",[v._v("多核")]),v._v("CPU执行多个任务，"),_("strong",[v._v("并发")]),v._v("是"),_("strong",[v._v("单个")]),v._v("CPU执行多个任务（微观上交替执行）")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://typora-1309665611.cos.ap-nanjing.myqcloud.com/typora/image-20240323072922871.png",alt:"image-20240323072922871"}})]),v._v(" "),_("h5",{attrs:{id:"进程的状态"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#进程的状态"}},[v._v("#")]),v._v(" "),_("strong",[v._v("进程的状态")])]),v._v(" "),_("p",[v._v("在上面，我们知道了进程有着「运行 - 暂停 - 运行」的活动规律。一般说来，一个进程并不是自始至终连续不停地运行的，它与并发执行中的其他进程的执行是相互制约的。")]),v._v(" "),_("p",[v._v("所以，"),_("strong",[v._v("在一个进程的活动期间至少具备三种基本状态，即运行状态、就绪状态、阻塞状态。")])]),v._v(" "),_("img",{staticStyle:{zoom:"80%"},attrs:{src:"https://typora-1309665611.cos.ap-nanjing.myqcloud.com/typora/image-20240323075815886.png",alt:"image-20240323075815886"}}),v._v(" "),_("ul",[_("li",[v._v("运行状态（"),_("em",[v._v("Running")]),v._v("）：该时刻进程占用 CPU；")]),v._v(" "),_("li",[v._v("就绪状态（"),_("em",[v._v("Ready")]),v._v("）：可运行，由于其他进程处于运行状态而暂时停止运行；")]),v._v(" "),_("li",[v._v("阻塞状态（"),_("em",[v._v("Blocked")]),v._v("）：该进程正在等待某一事件发生（如等待输入/输出操作的完成）而暂时停止运行，这时，即使给它CPU控制权，它也无法运行；")])]),v._v(" "),_("p",[v._v("当然，进程还有另外两个基本状态：")]),v._v(" "),_("ul",[_("li",[v._v("创建状态（"),_("em",[v._v("new")]),v._v("）：进程正在被创建时的状态；")]),v._v(" "),_("li",[v._v("结束状态（"),_("em",[v._v("Exit")]),v._v("）：进程正在从系统中消失时的状态；")])]),v._v(" "),_("img",{staticStyle:{zoom:"80%"},attrs:{src:"https://typora-1309665611.cos.ap-nanjing.myqcloud.com/typora/image-20240323075846213.png",alt:"image-20240323075846213"}}),v._v(" "),_("p",[v._v("再来详细说明一下进程的状态变迁：")]),v._v(" "),_("ul",[_("li",[_("em",[v._v("NULL -> 创建状态")]),v._v("：一个新进程被创建时的第一个状态；")]),v._v(" "),_("li",[_("em",[v._v("创建状态 -> 就绪状态")]),v._v("：当进程被创建完成并初始化后，一切就绪准备运行时，变为就绪状态，这个过程是很快的；")]),v._v(" "),_("li",[_("em",[v._v("就绪态 -> 运行状态")]),v._v("：处于就绪状态的进程被操作系统的进程调度器选中后，就分配给 CPU 正式运行该进程；")]),v._v(" "),_("li",[_("em",[v._v("运行状态 -> 结束状态")]),v._v("：当进程已经运行完成或出错时，会被操作系统作结束状态处理；")]),v._v(" "),_("li",[_("em",[v._v("运行状态 -> 就绪状态")]),v._v("：处于运行状态的进程在运行过程中，由于分配给它的运行时间片用完，操作系统会把该进程变为就绪态，接着从就绪态选中另外一个进程运行；")]),v._v(" "),_("li",[_("em",[v._v("运行状态 -> 阻塞状态")]),v._v("：当进程请求某个事件且必须等待时，例如请求 I/O 事件；")]),v._v(" "),_("li",[_("em",[v._v("阻塞状态 -> 就绪状态")]),v._v("：当进程要等待的事件完成时，它从阻塞状态变到就绪状态；")])]),v._v(" "),_("h5",{attrs:{id:"进程的控制结构"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#进程的控制结构"}},[v._v("#")]),v._v(" "),_("strong",[v._v("进程的控制结构")])]),v._v(" "),_("p",[v._v("在操作系统中，是用"),_("strong",[v._v("进程控制块")]),v._v("（"),_("em",[v._v("process control block，PCB")]),v._v("）数据结构来描述进程的。")]),v._v(" "),_("p",[_("strong",[v._v("PCB 是进程存在的唯一标识")]),v._v("，这意味着一个进程的存在，必然会有一个 PCB，如果进程消失了，那么 PCB 也会随之消失。")]),v._v(" "),_("p",[_("strong",[v._v("PCB具体包含的信息")])]),v._v(" "),_("ul",[_("li",[_("p",[v._v("进程描述信息：")]),v._v(" "),_("ul",[_("li",[v._v("进程标识符：标识各个进程，每个进程都有一个并且唯一的标识符；")]),v._v(" "),_("li",[v._v("用户标识符：进程归属的用户，用户标识符主要为共享和保护服务；")])])]),v._v(" "),_("li",[_("p",[v._v("进程控制和管理信息：")]),v._v(" "),_("ul",[_("li",[v._v("进程当前状态，如 new、ready、running、waiting 或 blocked 等；")]),v._v(" "),_("li",[v._v("进程优先级：进程抢占 CPU 时的优先级；")])])]),v._v(" "),_("li",[_("p",[v._v("资源分配清单：")]),v._v(" "),_("ul",[_("li",[v._v("有关内存地址空间或虚拟地址空间的信息，所打开文件的列表和所使用的 I/O 设备信息。")])])]),v._v(" "),_("li",[_("p",[v._v("CPU 相关信息：")]),v._v(" "),_("ul",[_("li",[v._v("CPU 中各个寄存器的值，当进程被切换时，CPU 的状态信息都会被保存在相应的 PCB 中，以便进程重新执行时，能从断点处继续执行。")])])])]),v._v(" "),_("p",[_("strong",[v._v("PCB组织方式")])]),v._v(" "),_("p",[v._v("通常是通过"),_("strong",[v._v("链表")]),v._v("的方式进行组织，把具有"),_("strong",[v._v("相同状态的进程链在一起，组成各种队列")]),v._v("。比如：")]),v._v(" "),_("ul",[_("li",[v._v("将所有处于就绪状态的进程链在一起，称为"),_("strong",[v._v("就绪队列")]),v._v("；")]),v._v(" "),_("li",[v._v("把所有因等待某事件而处于等待状态的进程链在一起就组成各种"),_("strong",[v._v("阻塞队列")]),v._v("；")]),v._v(" "),_("li",[v._v("另外，对于运行队列在单核 CPU 系统中则只有一个运行指针了，因为单核 CPU 在某个时间，只能运行一个程序。")])]),v._v(" "),_("h5",{attrs:{id:"进程控制"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#进程控制"}},[v._v("#")]),v._v(" 进程控制")]),v._v(" "),_("p",[v._v("进程的"),_("strong",[v._v("创建、终止、阻塞、唤醒")]),v._v("的过程，也就是进程的控制。")]),v._v(" "),_("p",[_("strong",[v._v("01创建进程")])]),v._v(" "),_("p",[v._v("操作系统允许一个进程创建另一个进程，而且允许子进程继承父进程所拥有的资源。")]),v._v(" "),_("p",[v._v("创建进程的过程如下：")]),v._v(" "),_("ul",[_("li",[v._v("申请一个空白的 PCB，并向 PCB 中填写一些控制和管理进程的信息，比如进程的唯一标识等；")]),v._v(" "),_("li",[v._v("为该进程分配运行时所必需的资源，比如内存资源；")]),v._v(" "),_("li",[v._v("将 PCB 插入到就绪队列，等待被调度运行；")])]),v._v(" "),_("p",[_("strong",[v._v("02终止进程")])]),v._v(" "),_("p",[v._v("进程可以有 3 种终止方式：正常结束、异常结束以及外界干预（信号 "),_("code",[v._v("kill")]),v._v(" 掉）。")]),v._v(" "),_("p",[_("strong",[v._v("03阻塞进程")])]),v._v(" "),_("p",[v._v("当进程需要等待某一事件完成时，它可以调用阻塞语句把自己阻塞等待。而一旦被阻塞等待，它只能由另一个进程唤醒。")]),v._v(" "),_("p",[_("strong",[v._v("04唤醒进程")])]),v._v(" "),_("p",[v._v("进程由「运行」转变为「阻塞」状态是由于进程必须等待某一事件的完成，所以处于阻塞状态的进程是绝对不可能叫醒自己的。")]),v._v(" "),_("h5",{attrs:{id:"进程上下文切换"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#进程上下文切换"}},[v._v("#")]),v._v(" 进程上下文切换")]),v._v(" "),_("p",[v._v("各个进程之间是共享 CPU 资源的，在不同的时候进程之间需要切换，让不同的进程可以在 CPU 执行，那么这个一个进程切换到另一个进程运行，称为进程的上下文切换。")]),v._v(" "),_("h4",{attrs:{id:"线程"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#线程"}},[v._v("#")]),v._v(" 线程")]),v._v(" "),_("p",[v._v("在早期的操作系统中都是以进程作为独立运行的基本单位，直到后面，计算机科学家们又提出了"),_("strong",[v._v("更小")]),v._v("的能独立运行的基本单位，也就是"),_("strong",[v._v("线程。")])]),v._v(" "),_("p",[v._v("Question：进程可以运行程序，为什么还需要线程？")]),v._v(" "),_("p",[v._v("Answer：")]),v._v(" "),_("p",[v._v("维护进程的系统开销较大，如创建进程时，分配资源、建立 PCB；终止进程时，回收资源、撤销 PCB；进程切换时，保存当前进程的状态信息；")]),v._v(" "),_("blockquote",[_("p",[v._v("更具体的说")]),v._v(" "),_("ul",[_("li",[v._v("线程的创建时间比进程快，因为进程在创建的过程中，还需要资源管理信息，比如内存管理信息、文件管理信息，而线程在创建的过程中，不会涉及这些资源管理信息，而是共享它们；")]),v._v(" "),_("li",[v._v("线程的终止时间比进程快，因为线程释放的资源相比进程少很多；")]),v._v(" "),_("li",[v._v("同一个进程内的线程切换比进程切换快，因为线程具有相同的地址空间（虚拟内存共享），这意味着同一个进程的线程都具有同一个页表，那么在切换的时候不需要切换页表。而对于进程之间的切换，切换的时候要把页表给切换掉，而页表的切换过程开销是比较大的；")]),v._v(" "),_("li",[v._v("由于同一进程的各线程间共享内存和文件资源，那么在线程之间数据传递的时候，就不需要经过内核了，这就使得线程之间的数据交互效率更高了；")])])]),v._v(" "),_("p",[v._v("所以引入一种新的实体叫"),_("strong",[v._v("线程")]),v._v("。")]),v._v(" "),_("p",[_("strong",[v._v("线程是进程当中的一条执行流程。")])]),v._v(" "),_("p",[v._v("同一个"),_("strong",[v._v("进程内多个线程之间可以共享代码段、数据段、打开的文件等资源")]),v._v("，但每个线程各自都有一套独立的寄存器和栈，这样可以确保线程的控制流是相对独立的。")]),v._v(" "),_("p",[v._v("线程的优点：")]),v._v(" "),_("ul",[_("li",[v._v("一个进程中可以同时存在多个线程；")]),v._v(" "),_("li",[v._v("各个线程之间可以并发执行；")]),v._v(" "),_("li",[v._v("各个线程之间可以共享地址空间和文件等资源（因为都属于一个进程）；")])]),v._v(" "),_("h5",{attrs:{id:"线程上下文切换"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#线程上下文切换"}},[v._v("#")]),v._v(" 线程上下文切换")]),v._v(" "),_("p",[v._v("线程与进程最大的区别在于："),_("strong",[v._v("线程是调度的基本单位，而进程则是资源拥有的基本单位")]),v._v("。")]),v._v(" "),_("p",[v._v("所谓"),_("strong",[v._v("操作系统的任务调度")]),v._v("，实际上的调度对象是线程，而进程只是给线程提供了虚拟内存、全局变量等资源。")]),v._v(" "),_("ul",[_("li",[v._v("当进程只有一个线程时，可以认为进程就等于线程；")]),v._v(" "),_("li",[v._v("当进程拥有多个线程时，这些线程会共享相同的虚拟内存和全局变量等资源，这些资源在上下文切换时是不需要修改的；")])]),v._v(" "),_("p",[v._v("线程也有自己的私有数据，比如栈和寄存器等，这些在"),_("strong",[v._v("上下文切换时也是需要保存")]),v._v("的")]),v._v(" "),_("ul",[_("li",[v._v("当两个线程不是属于同一个进程，则切换的过程就跟进程上下文切换一样；")]),v._v(" "),_("li",[_("strong",[v._v("当两个线程是属于同一个进程，因为虚拟内存是共享的，所以在切换时，虚拟内存这些资源就保持不动，只需要切换线程的私有数据、寄存器等不共享的数据")]),v._v("；")])]),v._v(" "),_("h5",{attrs:{id:"线程实现"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#线程实现"}},[v._v("#")]),v._v(" 线程实现")]),v._v(" "),_("ul",[_("li",[_("strong",[v._v("用户线程（User Thread）")]),v._v("：在用户空间实现的线程，不是由内核管理的线程，是由用户态的线程库来完成线程的管理；")]),v._v(" "),_("li",[_("strong",[v._v("内核线程（Kernel Thread）")]),v._v("：在内核中实现的线程，是由内核管理的线程；\n"),_("ul",[_("li",[_("strong",[v._v("内核线程是由操作系统管理的，线程对应的 TCB 自然是放在操作系统里的，这样线程的创建、终止和管理都是由操作系统负责。")])])])]),v._v(" "),_("li",[_("strong",[v._v("轻量级进程（LightWeight Process）")]),v._v("：在内核中来支持用户线程；")])]),v._v(" "),_("p",[v._v("用户线程实现在用户空间如何理解？")]),v._v(" "),_("p",[v._v("用户线程本质需要映射到内核线程，然后操作系统调用内核来执行对应任务")]),v._v(" "),_("p",[_("strong",[v._v("用户线程的整个线程管理和调度，操作系统是不直接参与的，而是由用户级线程库函数来完成线程的管理，包括线程的创建、终止、同步和调度等。")])]),v._v(" "),_("h4",{attrs:{id:"调度"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#调度"}},[v._v("#")]),v._v(" 调度")]),v._v(" "),_("p",[v._v("进程都希望自己能够占用 CPU 进行工作，那么这涉及到前面说过的进程上下文切换。")]),v._v(" "),_("p",[v._v("一旦操作系统把进程切换到运行状态，也就意味着该进程占用着 CPU 在执行，但是当操作系统把进程切换到其他状态时，那就不能在 CPU 中执行了，于是操作系统会选择下一个要运行的进程。")]),v._v(" "),_("blockquote",[_("p",[v._v("Question：线程不是操作系统的调度单位吗？为什么这里参与调度的是进程？")]),v._v(" "),_("p",[v._v("先提前说明，这里的进程指只有主线程的进程，所以调度主线程就等于调度了整个进程。")]),v._v(" "),_("p",[v._v("那为什么干脆不直接取名线程调度？主要是操作系统相关书籍，都是用进程调度这个名字，所以我也沿用了这个名字。")])]),v._v(" "),_("p",[v._v("Question：调度发生的时机？")]),v._v(" "),_("p",[v._v("在进程的生命周期中，当进程从一个运行状态到另外一状态变化的时候，其实会触发一次调度。")]),v._v(" "),_("ul",[_("li",[_("em",[v._v("从就绪态 -> 运行态")]),v._v("：当进程被创建时，会进入到就绪队列，操作系统会从就绪队列选择一个进程运行；")]),v._v(" "),_("li",[_("em",[v._v("从运行态 -> 阻塞态")]),v._v("：当进程发生 I/O 事件而阻塞时，操作系统必须选择另外一个进程运行；")]),v._v(" "),_("li",[_("em",[v._v("从运行态 -> 结束态")]),v._v("：当进程退出结束后，操作系统得从就绪队列选择另外一个进程运行；")])]),v._v(" "),_("p",[v._v("所以CPU需要考虑怎么切换进程，这里涉及调度算法。")]),v._v(" "),_("ul",[_("li",[_("strong",[v._v("非抢占式调度算法")]),v._v("挑选一个进程，然后让该进程运行直到被阻塞，或者直到该进程退出，才会调用另外一个进程，也就是说不会理时钟中断这个事情。")]),v._v(" "),_("li",[_("strong",[v._v("抢占式调度算法")]),v._v("挑选一个进程，然后让该进程只运行某段时间，如果在该时段结束时，该进程仍然在运行时，则会把它挂起，接着调度程序从就绪队列挑选另外一个进程。这种抢占式调度处理，需要在时间间隔的末端发生"),_("strong",[v._v("时钟中断")]),v._v("，以便把 CPU 控制返回给调度程序进行调度，也就是常说的"),_("strong",[v._v("时间片机制")]),v._v("。")])]),v._v(" "),_("p",[v._v("调度算法设计概念")]),v._v(" "),_("ul",[_("li",[_("strong",[v._v("CPU 利用率")]),v._v("：调度程序应确保 CPU 是始终匆忙的状态，这可提高 CPU 的利用率；")]),v._v(" "),_("li",[_("strong",[v._v("系统吞吐量")]),v._v("：吞吐量表示的是单位时间内 CPU 完成进程的数量，长作业的进程会占用较长的 CPU 资源，因此会降低吞吐量，相反，短作业的进程会提升系统吞吐量；")]),v._v(" "),_("li",[_("strong",[v._v("周转时间")]),v._v("：周转时间是进程运行+阻塞时间+等待时间的总和，一个进程的周转时间越小越好；")]),v._v(" "),_("li",[_("strong",[v._v("等待时间")]),v._v("：这个等待时间不是阻塞状态的时间，而是进程处于就绪队列的时间，等待的时间越长，用户越不满意；")]),v._v(" "),_("li",[_("strong",[v._v("响应时间")]),v._v("：用户提交请求到系统第一次产生响应所花费的时间，在交互式系统中，响应时间是衡量调度算法好坏的主要标准。")])]),v._v(" "),_("h5",{attrs:{id:"调度算法"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#调度算法"}},[v._v("#")]),v._v(" 调度算法")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("先来先服务调度算法")]),v._v(" "),_("ul",[_("li",[_("strong",[v._v("每次从就绪队列选择最先进入队列的进程，然后一直运行，直到进程退出或被阻塞，才会继续从队列中选择第一个进程接着运行。")])])])]),v._v(" "),_("li",[_("p",[v._v("最短作业优先调度算法")]),v._v(" "),_("ul",[_("li",[_("strong",[v._v("优先选择运行时间最短的进程来运行")]),v._v("，这有助于提高系统的吞吐量。")])])]),v._v(" "),_("li",[_("p",[v._v("时间片轮转调度算法")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("这是一种公平调度算法（抢占式），")])]),v._v(" "),_("li",[_("p",[v._v("每个进程被分配一个时间段，称为** **（Quantum），即允许该进程在该时间段中运行。")])])])])]),v._v(" "),_("h3",{attrs:{id:"进程间通信方式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#进程间通信方式"}},[v._v("#")]),v._v(" 进程间通信方式")]),v._v(" "),_("p",[v._v("为什么进程之间需要通信？")]),v._v(" "),_("p",[v._v("每个进程的用户地址空间都是独立的，一般而言是不能互相访问的，但内核空间是每个进程都共享的，所以进程之间要通信必须通过内核。")]),v._v(" "),_("img",{staticStyle:{zoom:"80%"},attrs:{src:"https://typora-1309665611.cos.ap-nanjing.myqcloud.com/typora/image-20240325204457676.png",alt:"image-20240325204457676"}}),v._v(" "),_("h4",{attrs:{id:"管道"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#管道"}},[v._v("#")]),v._v(" 管道")]),v._v(" "),_("p",[v._v("如果你学过 Linux 命令，那你肯定很熟悉「"),_("code",[v._v("|")]),v._v("」这个竖线。")]),v._v(" "),_("div",{staticClass:"language-bash line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-bash"}},[_("code",[v._v("$ "),_("span",{pre:!0,attrs:{class:"token function"}},[v._v("ps")]),v._v(" auxf "),_("span",{pre:!0,attrs:{class:"token operator"}},[v._v("|")]),v._v(" "),_("span",{pre:!0,attrs:{class:"token function"}},[v._v("grep")]),v._v(" mysql\n")])]),v._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[v._v("1")]),_("br")])]),_("p",[v._v("上面命令行里的「"),_("code",[v._v("|")]),v._v("」竖线就是一个"),_("strong",[v._v("管道")]),v._v("，它的功能是将前一个命令（"),_("code",[v._v("ps auxf")]),v._v("）的输出，作为后一个命令（"),_("code",[v._v("grep mysql")]),v._v("）的输入，从这功能描述，可以看出"),_("strong",[v._v("管道传输数据是单向的")]),v._v("，如果想相互通信，我们需要创建两个管道才行。")]),v._v(" "),_("p",[v._v("其实，"),_("strong",[v._v("所谓的管道，就是内核里面的一串缓存")]),v._v("。")]),v._v(" "),_("img",{staticStyle:{zoom:"80%"},attrs:{src:"https://typora-1309665611.cos.ap-nanjing.myqcloud.com/typora/image-20240325204541012.png",alt:"image-20240325204541012"}}),v._v(" "),_("h4",{attrs:{id:"消息队列"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#消息队列"}},[v._v("#")]),v._v(" 消息队列")]),v._v(" "),_("p",[_("strong",[v._v("消息队列")]),v._v("的通信模式就可以解决。比如，A 进程要给 B 进程发送消息，A 进程把数据放在对应的消息队列后就可以正常返回了，B 进程需要的时候再去读取数据就可以了。同理，B 进程要给 A 进程发送消息也是如此。")]),v._v(" "),_("p",[_("strong",[v._v("消息队列是保存在内核中的消息链表")]),v._v("，在发送数据时，会分成一个一个独立的数据单元，也就是消息体（数据块），消息体是用户自定义的数据类型，消息的发送方和接收方要约定好消息体的数据类型，所以每个消息体都是固定大小的存储块，不像管道是无格式的字节流数据。如果进程从消息队列中读取了消息体，内核就会把这个消息体删除")]),v._v(" "),_("h4",{attrs:{id:"共享内存"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#共享内存"}},[v._v("#")]),v._v(" 共享内存")]),v._v(" "),_("p",[v._v("消息队列的读取和写入的过程，都会有发生用户态与内核态之间的消息拷贝过程。那"),_("strong",[v._v("共享内存")]),v._v("的方式，就很好的解决了这一问题。")]),v._v(" "),_("p",[v._v("现代操作系统，对于内存管理，采用的是虚拟内存技术，也就是每个进程都有自己独立的虚拟内存空间，不同进程的虚拟内存映射到不同的物理内存中。所以，即使进程 A 和 进程 B 的虚拟地址是一样的，其实访问的是不同的物理内存地址，对于数据的增删查改互不影响。")]),v._v(" "),_("p",[_("strong",[v._v("共享内存的机制，就是拿出一块虚拟地址空间来，映射到相同的物理内存中")])]),v._v(" "),_("img",{staticStyle:{zoom:"80%"},attrs:{src:"https://typora-1309665611.cos.ap-nanjing.myqcloud.com/typora/image-20240325204758006.png",alt:"image-20240325204758006"}}),v._v(" "),_("h4",{attrs:{id:"信号量"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#信号量"}},[v._v("#")]),v._v(" 信号量")]),v._v(" "),_("p",[v._v("用了共享内存通信方式，带来新的问题，那就是如果多个进程同时修改同一个共享内存，很有可能就冲突了。例如两个进程都同时写一个地址，那先写的那个进程会发现内容被别人覆盖了。")]),v._v(" "),_("p",[v._v("为了防止多进程竞争共享资源，而造成的数据错乱，所以需要保护机制，使得共享的资源，在任意时刻只能被一个进程访问。正好，"),_("strong",[v._v("信号量")]),v._v("就实现了这一保护机制。")]),v._v(" "),_("p",[_("strong",[v._v("信号量其实是一个整型的计数器，主要用于实现进程间的互斥与同步，而不是用于缓存进程间通信的数据")]),v._v("。")]),v._v(" "),_("p",[v._v("信号量表示资源的数量，控制信号量的方式有两种原子操作：")]),v._v(" "),_("ul",[_("li",[v._v("一个是 "),_("strong",[v._v("P 操作")]),v._v("，这个操作会把信号量减去 1，"),_("strong",[v._v("相减后如果信号量 < 0，则表明资源已被占用，进程需阻塞等待")]),v._v("；相减后如果信号量 >= 0，则表明还有资源可使用，进程可正常继续执行。")]),v._v(" "),_("li",[v._v("另一个是 "),_("strong",[v._v("V 操作")]),v._v("，这个操作会把信号量加上 1，"),_("strong",[v._v("相加后如果信号量 <= 0，则表明当前有阻塞中的进程")]),v._v("，于是会将该进程唤醒运行；相加后如果信号量 > 0，则表明当前没有阻塞中的进程；")])]),v._v(" "),_("p",[v._v("P 操作是用在进入共享资源之前，V 操作是用在离开共享资源之后，这两个操作是必须成对出现的。")]),v._v(" "),_("h4",{attrs:{id:"socket"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#socket"}},[v._v("#")]),v._v(" Socket")]),v._v(" "),_("p",[v._v("前面提到的管道、消息队列、共享内存、信号量和信号都是在同一台主机上进行进程间通信，那要想"),_("strong",[v._v("跨网络与不同主机上的进程之间通信，就需要 Socket 通信了。")])]),v._v(" "),_("p",[v._v("实际上，Socket 通信不仅可以跨网络与不同主机的进程间通信，还可以在同主机上进程间通信。")]),v._v(" "),_("p",[v._v("我们来看看创建 socket 的系统调用：")]),v._v(" "),_("div",{staticClass:"language-c line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-c"}},[_("code",[_("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("int")]),v._v(" "),_("span",{pre:!0,attrs:{class:"token function"}},[v._v("socket")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),_("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("int")]),v._v(" domain"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(",")]),v._v(" "),_("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("int")]),v._v(" type"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(",")]),v._v(" "),_("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("int")]),v._v(" protocal"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),v._v("\n")])]),v._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[v._v("1")]),_("br")])]),_("h3",{attrs:{id:"多线程"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#多线程"}},[v._v("#")]),v._v(" 多线程")]),v._v(" "),_("h3",{attrs:{id:"死锁"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#死锁"}},[v._v("#")]),v._v(" 死锁")]),v._v(" "),_("p",[v._v("在多线程编程中，我们为了防止多线程竞争共享资源而导致数据错乱，都会在操作共享资源之前加上互斥锁，只有成功获得到锁的线程，才能操作共享资源，获取不到锁的线程就只能等待，直到锁被释放。")]),v._v(" "),_("p",[v._v("那么，当两个线程为了保护两个不同的共享资源而使用了两个互斥锁，那么这两个互斥锁应用不当的时候，可能会造成"),_("strong",[v._v("两个线程都在等待对方释放锁")]),v._v("，在没有外力的作用下，这些线程会一直相互等待，就没办法继续运行，这种情况就是发生了"),_("strong",[v._v("死锁")]),v._v("。")]),v._v(" "),_("p",[v._v("举个例子，小林拿了小美房间的钥匙，而小林在自己的房间里，小美拿了小林房间的钥匙，而小美也在自己的房间里。如果小林要从自己的房间里出去，必须拿到小美手中的钥匙，但是小美要出去，又必须拿到小林手中的钥匙，这就形成了死锁。")]),v._v(" "),_("p",[v._v("死锁只有"),_("strong",[v._v("同时满足")]),v._v("以下四个条件才会发生：")]),v._v(" "),_("ul",[_("li",[v._v("互斥条件；")]),v._v(" "),_("li",[v._v("持有并等待条件；")]),v._v(" "),_("li",[v._v("不可剥夺条件；")]),v._v(" "),_("li",[v._v("环路等待条件；")])]),v._v(" "),_("h3",{attrs:{id:"悲观锁-乐观锁"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#悲观锁-乐观锁"}},[v._v("#")]),v._v(" 悲观锁，乐观锁")]),v._v(" "),_("p",[_("strong",[v._v("悲观锁")])]),v._v(" "),_("ul",[_("li",[_("strong",[v._v("互斥锁")]),v._v("加锁失败后，线程会"),_("strong",[v._v("释放 CPU")]),v._v(" ，给其他线程；")]),v._v(" "),_("li",[_("strong",[v._v("自旋锁")]),v._v("加锁失败后，线程会"),_("strong",[v._v("忙等待")]),v._v("，直到它拿到锁；")]),v._v(" "),_("li",[v._v("读写锁从字面意思我们也可以知道，它由「读锁」和「写锁」两部分构成，如果只读取共享资源用「读锁」加锁，如果要修改共享资源则用「写锁」加锁。所以，"),_("strong",[v._v("读写锁适用于能明确区分读操作和写操作的场景")]),v._v("。")])]),v._v(" "),_("blockquote",[_("p",[v._v("悲观锁做事比较悲观，它认为"),_("strong",[v._v("多线程同时修改共享资源的概率比较高，于是很容易出现冲突，所以访问共享资源前，先要上锁")]),v._v("。")])]),v._v(" "),_("p",[_("strong",[v._v("乐观锁")])]),v._v(" "),_("p",[v._v("乐观锁做事比较乐观，它假定冲突的概率很低，它的工作方式是："),_("strong",[v._v("先修改完共享资源，再验证这段时间内有没有发生冲突，如果没有其他线程在修改资源，那么操作完成，如果发现有其他线程已经修改过这个资源，就放弃本次操作")]),v._v("。")]),v._v(" "),_("p",[v._v("放弃后如何重试，这跟业务场景息息相关，虽然重试的成本很高，但是冲突的概率足够低的话，还是可以接受的。")]),v._v(" "),_("p",[v._v("可见，乐观锁的心态是，不管三七二十一，先改了资源再说。另外，你会发现"),_("strong",[v._v("乐观锁全程并没有加锁，所以它也叫无锁编程")]),v._v("。")])])}),[],!1,null,null,null);_.default=a.exports}}]);