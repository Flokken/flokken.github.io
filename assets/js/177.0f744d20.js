(window.webpackJsonp=window.webpackJsonp||[]).push([[177],{505:function(e,v,_){"use strict";_.r(v);var t=_(4),r=Object(t.a)({},(function(){var e=this,v=e._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[v("blockquote",[v("p",[e._v("参考")]),e._v(" "),v("p",[e._v("https://gitee.com/yooome/golang/blob/main/21-k8s%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B/Kubernetes%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B.md")]),e._v(" "),v("p",[e._v("https://www.yuque.com/fairy-era/yg511q/xyqxge")])]),e._v(" "),v("p",[e._v("这里直接贴一下黑马的课程大纲，方便抓住主要内容")]),e._v(" "),v("p",[v("img",{attrs:{src:"https://typora-1309665611.cos.ap-nanjing.myqcloud.com/typora/image-20230805113243801.png",alt:"image-20230805113243801"}})]),e._v(" "),v("h2",{attrs:{id:"应用部署方式"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#应用部署方式"}},[e._v("#")]),e._v(" 应用部署方式")]),e._v(" "),v("p",[e._v("在部署应用程序的方式上，主要经历了三个时代：")]),e._v(" "),v("ul",[v("li",[v("p",[v("strong",[e._v("传统部署")]),e._v("：互联网早期，会直接将应用程序部署在物理机上")])]),e._v(" "),v("li",[v("p",[v("strong",[e._v("虚拟化部署")]),e._v("：可以在一台物理机上运行多个虚拟机，每个虚拟机都是独立的一个环境")]),e._v(" "),v("blockquote",[v("p",[e._v("优点：程序环境不会相互产生影响，提供了一定程度的安全性")]),e._v(" "),v("p",[e._v("缺点：增加了操作系统，浪费了部分资源")])])]),e._v(" "),v("li",[v("p",[v("strong",[e._v("容器化部署")]),e._v("：与虚拟化类似，但是共享了操作系统")]),e._v(" "),v("blockquote",[v("p",[e._v("优点：")]),e._v(" "),v("p",[e._v("可以保证每个容器拥有自己的文件系统、CPU、内存、进程空间等")]),e._v(" "),v("p",[e._v("运行应用程序所需要的资源都被容器包装，并和底层基础架构解耦")]),e._v(" "),v("p",[e._v("容器化的应用程序可以跨云服务商、跨Linux操作系统发行版进行部署")])]),e._v(" "),v("p",[e._v("主要关注容器部署，他与虚拟机不同的是容器只是一个进程，容器们共享一个操作系统，而虚拟机是每个虚拟机都是一个系统")])])]),e._v(" "),v("p",[v("img",{attrs:{src:"https://typora-1309665611.cos.ap-nanjing.myqcloud.com/typora/image-20230805214839191.png",alt:"image-20230805214839191"}})]),e._v(" "),v("h3",{attrs:{id:"容器编排"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#容器编排"}},[e._v("#")]),e._v(" 容器编排")]),e._v(" "),v("p",[e._v("容器化部署方式给带来很多的便利，但是也会出现一些问题，比如说：")]),e._v(" "),v("ul",[v("li",[e._v("一个容器故障停机了，怎么样让另外一个容器立刻启动去替补停机的容器")]),e._v(" "),v("li",[e._v("当并发访问量变大的时候，怎么样做到横向扩展容器数量")])]),e._v(" "),v("p",[e._v("这些容器管理的问题称为"),v("strong",[e._v("容器编排问题")]),e._v("，")]),e._v(" "),v("ul",[v("li",[v("strong",[e._v("Swarm")]),e._v("：Docker自己的容器编排工具")]),e._v(" "),v("li",[v("strong",[e._v("Kubernetes")]),e._v("：Google开源的的容器编排工具")])]),e._v(" "),v("h2",{attrs:{id:"kubernetes-简介"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#kubernetes-简介"}},[e._v("#")]),e._v(" kubernetes 简介")]),e._v(" "),v("p",[e._v("kubernetes，是一个基于容器技术的分布式架构领先方案，前身是谷歌的Borg系统，不过开源了就叫kubernetes")]),e._v(" "),v("p",[e._v("kubernetes的本质是"),v("strong",[e._v("一组服务器集群")]),e._v("，它可以在集群的每个节点上运行特定的程序，来对节点中的容器进行管理。目的是实现资源管理的自动化，主要提供了如下的主要功能：")]),e._v(" "),v("ul",[v("li",[v("strong",[e._v("自我修复")]),e._v("：一旦某一个容器崩溃，能够在1秒中左右迅速启动新的容器")]),e._v(" "),v("li",[v("strong",[e._v("弹性伸缩")]),e._v("：可以根据需要，自动对集群中正在运行的容器数量进行调整")]),e._v(" "),v("li",[v("strong",[e._v("服务发现")]),e._v("：服务可以通过自动发现的形式找到它所依赖的服务")]),e._v(" "),v("li",[v("strong",[e._v("负载均衡")]),e._v("：如果一个服务起动了多个容器，能够自动实现请求的负载均衡")]),e._v(" "),v("li",[v("strong",[e._v("版本回退")]),e._v("：如果发现新发布的程序版本有问题，可以立即回退到原来的版本")]),e._v(" "),v("li",[v("strong",[e._v("存储编排")]),e._v("：可以根据容器自身的需求自动创建存储卷")])]),e._v(" "),v("h2",{attrs:{id:"kubernetes-组件"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#kubernetes-组件"}},[e._v("#")]),e._v(" kubernetes 组件")]),e._v(" "),v("p",[e._v("一个kubernetes集群主要是由"),v("strong",[e._v("控制节点(master)")]),e._v("、**工作节点(node)**构成，每个节点上都会安装不同的组件。")]),e._v(" "),v("p",[v("strong",[e._v("master：集群的控制平面，负责集群的决策 ( 管理 )")])]),e._v(" "),v("ul",[v("li",[v("strong",[e._v("ApiServer")]),e._v(" : 资源操作的唯一入口，接收用户输入的命令，提供认证、授权、API注册和发现等机制")]),e._v(" "),v("li",[v("strong",[e._v("Scheduler")]),e._v(" : 负责集群资源调度，按照预定的调度策略将Pod调度到相应的node节点上")]),e._v(" "),v("li",[v("strong",[e._v("ControllerManager")]),e._v(" : 负责维护集群的状态，比如程序部署安排、故障检测、自动扩展、滚动更新等"),v("strong",[e._v("Etcd")]),e._v(" ：负责存储集群中各种资源对象的信息")])]),e._v(" "),v("p",[v("strong",[e._v("node：集群的数据平面，负责为容器提供运行环境 ( 干活 )")])]),e._v(" "),v("ul",[v("li",[v("strong",[e._v("Kubelet")]),e._v(" : 负责维护容器的生命周期，即通过控制docker，来创建、更新、销毁容器")]),e._v(" "),v("li",[v("strong",[e._v("KubeProxy")]),e._v(" : 负责提供集群内部的服务发现和负载均衡")]),e._v(" "),v("li",[v("strong",[e._v("Docker")]),e._v(" : 负责节点上容器的各种操作")])]),e._v(" "),v("p",[v("img",{attrs:{src:"https://typora-1309665611.cos.ap-nanjing.myqcloud.com/typora/image-20230805222432124.png",alt:"image-20230805222432124"}})]),e._v(" "),v("h3",{attrs:{id:"示例"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#示例"}},[e._v("#")]),e._v(" 示例")]),e._v(" "),v("p",[e._v("以部署一个nginx服务来说明kubernetes系统各个组件调用关系：")]),e._v(" "),v("ol",[v("li",[v("p",[e._v("首先要明确，一旦kubernetes环境启动之后，master和node都会将自身的信息存储到etcd数据库中")])]),e._v(" "),v("li",[v("p",[e._v("一个nginx服务的安装请求会首先被发送到master节点的apiServer组件")])]),e._v(" "),v("li",[v("p",[e._v("apiServer组件会调用scheduler组件来决定到底应该把这个服务安装到哪个node节点上")]),e._v(" "),v("p",[e._v("在此时，它会从etcd中读取各个node节点的信息，然后按照一定的算法进行选择，并将结果告知apiServer")])]),e._v(" "),v("li",[v("p",[e._v("apiServer调用controller-manager去调度Node节点安装nginx服务")])]),e._v(" "),v("li",[v("p",[e._v("kubelet接收到指令后，会通知docker，然后由docker来启动一个nginx的pod")]),e._v(" "),v("p",[e._v("pod是kubernetes的最小操作单元，容器必须跑在pod中至此，")])]),e._v(" "),v("li",[v("p",[e._v("一个nginx服务就运行了，如果需要访问nginx，就需要通过kube-proxy来对pod产生访问的代理")])])]),e._v(" "),v("p",[e._v("这样，外界用户就可以访问集群中的nginx服务了")]),e._v(" "),v("h2",{attrs:{id:"kubernetes-概念"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#kubernetes-概念"}},[e._v("#")]),e._v(" kubernetes 概念")]),e._v(" "),v("ul",[v("li",[v("p",[e._v("Master：集群控制节点，每个集群要求至少有一个 Master 节点来负责集群的管控。")])]),e._v(" "),v("li",[v("p",[e._v("Node：工作负载节点，由 Master 分配容器到这些 Node 工作节点上，然后 Node 节点上的 Docker 负责容器的运行。")])]),e._v(" "),v("li",[v("p",[e._v("Pod：Kubernetes 的最小控制单元，容器都是运行在 Pod 中的，一个 Pod 中可以有一个或多个容器。")])]),e._v(" "),v("li",[v("p",[e._v("Controller：控制器，通过它来实现对 Pod 的管理，比如启动 Pod 、停止 Pod 、伸缩 Pod 的数量等等。")])]),e._v(" "),v("li",[v("p",[e._v("Service：Pod 对外服务的统一入口，其下面可以维护同一类的多个 Pod 。")])]),e._v(" "),v("li",[v("p",[e._v("Label：标签，用于对 Pod 进行分类，同一类 Pod 会拥有相同的标签。")])]),e._v(" "),v("li",[v("p",[e._v("NameSpace：命名空间，用来隔离 Pod 的运行环境。")])])]),e._v(" "),v("h2",{attrs:{id:"安装部署"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#安装部署"}},[e._v("#")]),e._v(" 安装部署")]),e._v(" "),v("p",[v("a",{attrs:{href:"https://www.yuque.com/fairy-era/yg511q/hg3u04",target:"_blank",rel:"noopener noreferrer"}},[e._v("参考"),v("OutboundLink")],1)]),e._v(" "),v("blockquote",[v("p",[e._v("一主多从，多主多从等等")])])])}),[],!1,null,null,null);v.default=r.exports}}]);