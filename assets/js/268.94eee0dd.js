(window.webpackJsonp=window.webpackJsonp||[]).push([[268],{600:function(s,n,t){"use strict";t.r(n);var a=t(4),e=Object(a.a)({},(function(){var s=this,n=s._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h2",{attrs:{id:"review-c"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#review-c"}},[s._v("#")]),s._v(" Review（C++）")]),s._v(" "),n("h3",{attrs:{id:"输入输出"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#输入输出"}},[s._v("#")]),s._v(" 输入输出")]),s._v(" "),n("p",[s._v("1.cin读入时会忽略"),n("strong",[s._v("空格(\" \")，换行（'\\n'）和tab键")]),s._v("('\\t')，从第一个有效字符开始读取；然后碰到第一个空格，换行和tab键为一次读入")]),s._v(" "),n("blockquote",[n("p",[s._v("好像回车符('\\r')也不行？因为换行在windows里是(\\n\\r),linux是(\\n)")])]),s._v(" "),n("div",{staticClass:"language-C++ line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("//1 cin来当判断条件，当cin读到eof时返回false\n//如果输入时  I am a boy，这种，需要一个个单词来读入，就需要这样\nwhile(cin>>x){\n        word.push(x);\n   }\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("p",[n("strong",[s._v("2读取一行   "),n("code",[s._v("getline(cin,str);")]),s._v("读取一行输入，并把值赋给str")])]),s._v(" "),n("blockquote",[n("p",[s._v("其中换行符'\\n',eof，回车符都会终止getline")])]),s._v(" "),n("p",[n("strong",[s._v("3 字母大小写")])]),s._v(" "),n("p",[s._v("​\t大写字母的ascii码值是对应小写字母的ascii码的值加32  ；即 'A'-'a'=32")]),s._v(" "),n("p",[s._v("ascii码表，注意'A'是65，'a'是97")]),s._v(" "),n("p",[n("img",{attrs:{src:"https://typora-1309665611.cos.ap-nanjing.myqcloud.com/typora/image-20230829155219088.png",alt:"image-20230829155219088"}})]),s._v(" "),n("p",[n("strong",[s._v("4 取整")])]),s._v(" "),n("p",[s._v("C和C++中，把float强制转换为int型，是直接舍弃小数部分")]),s._v(" "),n("p",[s._v("比如x=int(0.8),那么x就是0")]),s._v(" "),n("p",[s._v("对于一个小数，向下向下，或者四舍五入取整如下")]),s._v(" "),n("div",{staticClass:"language-C++ line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("double x=0.5;\ncout<<int(x+0.5);//正小数四舍五入，注意负数这样是错的，应该是减0.5\ncout<<int(x);//小数向下取整\ncout<<int(x)+1//正小数向上取整，负数应该是减一\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("p",[n("strong",[s._v("不过使用cmath的函数更方便")]),s._v(",上面只是随便提一嘴")]),s._v(" "),n("ol",[n("li",[s._v("fix\n朝零方向取整，如fix(-1.3)=-1; fix(1.3)=1;")]),s._v(" "),n("li",[s._v("floor\n"),n("strong",[s._v("朝负无穷方向取整")]),s._v("，如floor(-1.3)=-2; floor(1.3)=1;")]),s._v(" "),n("li",[s._v("ceil\n"),n("strong",[s._v("朝正无穷方向取整")]),s._v("，如ceil(-1.3)=-1; ceil(1.3)=2;")])]),s._v(" "),n("p",[n("strong",[s._v("5 定义数组")])]),s._v(" "),n("div",{staticClass:"language-c++ line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("//注意数组长度必须是const\nonst int maxn=5005;\n//初始化\nint sort[maxn]={0};\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("p",[n("strong",[s._v("6元素访问")])]),s._v(" "),n("p",[s._v("对于不同的容器，支持的访问方式是不一样的，列举一些常用的")]),s._v(" "),n("p",[s._v("vecotr")]),s._v(" "),n("div",{staticClass:"language-C++ line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('//下标访问\n vector<int> values={1,2,3,4,5};\n cout << values[0] << endl;\n//首尾\nvalues.front() = 10;\nvalues.back() = 20;\n//迭代器访问，因为其指向的就是对应元素，所以解指针就有值\n  for (auto first = values.begin(); first < values.end(); ++first) {\n        cout << *first << " ";\n    }\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br")])]),n("p",[s._v("map")]),s._v(" "),n("div",{staticClass:"language-C++ line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v(" map<int,int>scard={{1,1},{2,2}}\n//1通过key访问\nscard[1]=3;\n//2迭代器访问\n map<int,int>::iterator tmp = scard.find(1);\n            scard[x] = tmp->second+100;//迭代器就可以看成是指针，因为这里迭代器指向一个pair，所以有->来访问第一和第二元素\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("h3",{attrs:{id:"string类"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#string类"}},[s._v("#")]),s._v(" String类")]),s._v(" "),n("blockquote",[n("p",[s._v("参考：http://m.biancheng.net/view/400.html")]),s._v(" "),n("p",[s._v("这里补充一点，C语言中，字符串看做字符的集合，因此会在字符串的末尾自动加一个'\\0'（不过不影响使用，Cstring里面的相关字符串处理函数都避开这一点了）")]),s._v(" "),n("p",[s._v("比如"),n("code",[s._v('char *x = "abc"')]),s._v('，实际上会存储为"abc\\0"')]),s._v(" "),n("p",[s._v('但是C++中有专门的String类，"abc"实际上就存的"abc",'),n("strong",[s._v("这是一个重要区别")])]),s._v(" "),n("p",[s._v("不过两者的字母和整数依然是ascii码表对应的，依然可以用类似'A'-'a'=32这个东西")])]),s._v(" "),n("p",[n("strong",[s._v("总结")])]),s._v(" "),n("p",[s._v("这里总结一下经常用的,假设"),n("code",[s._v('s="apple"')]),s._v(",注意这里有些方法是直接操作s（返回s的引用），有些是返回一个新string。")]),s._v(" "),n("p",[s._v("单独说一下子串，用到子串基本都是(n,m),"),n("strong",[s._v("意思是(下标)从n开始数m个")])]),s._v(" "),n("blockquote",[n("p",[n("strong",[s._v("注意n是下限，但是m是长度，不是上限")])])]),s._v(" "),n("p",[s._v("实际上就是[n,n+m-1],即左闭右开的[n,n+m)，假设下标最大值是index_max,特殊情况有")]),s._v(" "),n("ul",[n("li",[s._v("n>index_max，那么就是空串")]),s._v(" "),n("li",[s._v("如果n+m-1>=index,那么会直接取到字符串末尾，并不会报错")])]),s._v(" "),n("table",[n("thead",[n("tr",[n("th",[s._v("name")]),s._v(" "),n("th",[s._v("作用")]),s._v(" "),n("th",[s._v("示例")])])]),s._v(" "),n("tbody",[n("tr",[n("td",[s._v("s.append()")]),s._v(" "),n("td",[s._v("向字符串末尾添加字符串，会影响s")]),s._v(" "),n("td",[s._v("s.append(3,'K'),   s=\"appleKKK\"")])]),s._v(" "),n("tr",[n("td",[n("strong",[s._v("s.substr(n,m)")])]),s._v(" "),n("td",[s._v("取子串,从n开始（包括n），"),n("strong",[s._v("取m长个字符(不是右边界！)")]),s._v("，实际就是取(n,n+m-1)的子串")]),s._v(" "),n("td",[s._v("s.substr(2,2),返回'pl'，")])]),s._v(" "),n("tr",[n("td",[s._v("s.find('str')")]),s._v(" "),n("td",[s._v("查找字符串或者一个字符在字符串中出现位置，，返回第一次出现的下标，没查到，返回"),n("code",[s._v("string::npos")]),s._v(",这个可以当condition")]),s._v(" "),n("td",[s._v("s.find('a'),返回0，s.rfind('a'),也是0")])]),s._v(" "),n("tr",[n("td",[s._v('s.replace(n,m,"xx")')]),s._v(" "),n("td",[s._v("替换字符串的子串，这个有好几种用法，详见后面，会影响s")]),s._v(" "),n("td",[s._v('s.replace(2,2,"xx"), s="apxxe"')])]),s._v(" "),n("tr",[n("td",[s._v("s.erase(n,m)")]),s._v(" "),n("td",[s._v("删除字串，会影响s")]),s._v(" "),n("td",[s._v('s.erase(0,2),    s="ple"')])]),s._v(" "),n("tr",[n("td",[s._v('s.insert(n,"xxx")')]),s._v(" "),n("td",[s._v("在指定位置插入字符串,原有的后移，会影响s")]),s._v(" "),n("td",[s._v('s.insert(0,"K")，s="xapple"')])]),s._v(" "),n("tr",[n("td",[s._v("s.size()或s.length()")]),s._v(" "),n("td",[s._v("返回字符串长度长度")]),s._v(" "),n("td",[s._v("s.size(),返回5")])])])]),s._v(" "),n("p",[s._v("注意，在插入、append和replace的时候，字符串(双引号)和字符（单引号）有区别，字符串不用指定数量，但是字符需要")]),s._v(" "),n("div",{staticClass:"language-C++ line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("s=\"apple\";\ns.append(\"k\");//正确\ns.appned('k');//错误\ns.append(1,'k');//正确\n//同理\ns.insert(0,1,'k');//等同于s.insert(0,\"K\")\ns.replace(2,2,2,'x');//等同于s.replace(2,2,\"xx\"), \n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("p",[n("strong",[s._v("构造函数")])]),s._v(" "),n("p",[s._v("string 类有多个构造函数，用法示例如下：")]),s._v(" "),n("div",{staticClass:"language-C++ line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('string s1();  // si = ""\nstring s2("Hello");  // s2 = "Hello"\nstring s3(4, \'K\');  // s3 = "KKKK"\nstring s4("12345", 1, 3);  //s4 = "234"，即 "12345" 的从下标 1 开始，长度为 3 的子串\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("p",[n("strong",[s._v("后文将从字符串下标 n 开始、长度为 m 的字符串称为“子串(n, m)”。")])]),s._v(" "),n("p",[s._v("string 类没有接收一个整型参数或一个字符型参数的构造函数。下面的两种写法是错误的：")]),s._v(" "),n("div",{staticClass:"language-C++ line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("string s1('K');\nstring s2(123);\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[n("strong",[s._v("对 string 对象赋值")])]),s._v(" "),n("p",[s._v("可以用 "),n("em",[n("em",[s._v("char")]),s._v(" 类型的变量、常量，以及 char 类型的变量、常量对 string 对象进行赋值")]),s._v("*。例如：")]),s._v(" "),n("div",{staticClass:"language-C++ line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('string s1;s1 = "Hello";  \n// s1 = "Hello"\ns2 = \'K\';  \n// s2 = "K”\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("p",[s._v("string 类还有 assign 成员函数，可以用来对 string 对象赋值。assign 成员函数返回对象自身的引用。例如：")]),s._v(" "),n("div",{staticClass:"language-C++ line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('string s1("12345"), s2;\ns3.assign(s1);  // s3 = s1\ns2.assign(s1, 1, 2);  // s2 = "23"，即 s1 的子串(1, 2)\ns2.assign(4, \'K\');  // s2 = "KKKK"\ns2.assign("abcde", 2, 3);  // s2 = "cde"，即 "abcde" 的子串(2, 3)\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("p",[n("strong",[s._v("求字符串的长度")])]),s._v(" "),n("p",[s._v("length 成员函数返回字符串的长度。size 成员函数可以实现同样的功能。")]),s._v(" "),n("p",[n("strong",[s._v("string对象中字符串的连接")])]),s._v(" "),n("ol",[n("li",[s._v("可以使用"),n("code",[s._v("+")]),s._v("和"),n("code",[s._v("+=")]),s._v("运算符对 string 对象执行字符串的连接操作外，")]),s._v(" "),n("li",[s._v("string 类还有 append 成员函数，可以用来向字符串后面添加内容。")])]),s._v(" "),n("blockquote",[n("p",[s._v("append 成员函数返回对象自身的引用")])]),s._v(" "),n("div",{staticClass:"language-C++ line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('string s1("123"), s2("abc");\ns1.append(s2);  // s1 = "123abc"\ns1.append(s2, 1, 2);  // s1 = "123abcbc"\ns1.append(3, \'K\');  // s1 = "123abcbcKKK"\ns1.append("ABCDE", 2, 3);  // s1 = "123abcbcKKKCDE"，添加 "ABCDE" 的子串(2, 3)\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("p",[n("strong",[s._v("string对象的比较")])]),s._v(" "),n("p",[s._v("除了可以用 <、<=、==、!=、>=、> 运算符比较 string 对象外，string 类还有 compare 成员函数，可用于比较字符串。compare 成员函数有以下返回值：")]),s._v(" "),n("ul",[n("li",[s._v("小于 0 表示当前的字符串小；")]),s._v(" "),n("li",[s._v("等于 0 表示两个字符串相等；")]),s._v(" "),n("li",[s._v("大于 0 表示另一个字符串小。\n例如：")])]),s._v(" "),n("div",{staticClass:"language-C++ line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('string s1("hello"), s2("hello, world");\nint n = s1.compare(s2);\nn = s1.compare(1, 2, s2, 0, 3);  //比较s1的子串 (1,2) 和s2的子串 (0,3)\nn = s1.compare(0, 2, s2);  // 比较s1的子串 (0,2) 和 s2\nn = s1.compare("Hello");\nn = s1.compare(1, 2, "Hello");  //比较 s1 的子串(1,2)和"Hello”\nn = s1.compare(1, 2, "Hello", 1, 2);  //比较 s1 的子串(1,2)和 "Hello" 的子串(1,2)\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("p",[n("strong",[s._v("求 string 对象的子串")])]),s._v(" "),n("p",[n("strong",[s._v("substr 成员函数可以用于求子串 (n, m)，原型如下：")])]),s._v(" "),n("p",[n("code",[s._v("string substr(int n = 0, int m = string::npos) const;")])]),s._v(" "),n("p",[s._v("调用时，如果省略 m 或 m 超过了字符串的长度，"),n("strong",[s._v("则求出来的子串就是从下标 n 开始一直到字符串结束的部分")]),s._v("。例如：")]),s._v(" "),n("div",{staticClass:"language-C++ line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('string s1 = "this is ok";\nstring s2 = s1.substr(2, 4);  // s2 = "is i"\ns2 = s1.substr(2);  // s2 = "is is ok"\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[n("strong",[s._v("交换两个string对象的内容")])]),s._v(" "),n("p",[s._v("swap 成员函数可以交换两个 string 对象的内容。例如：")]),s._v(" "),n("div",{staticClass:"language-C++ line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('string s1("West”), s2("East");\ns1.swap(s2);  \n// s1 = "East"，s2 = "West"\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[n("strong",[s._v("查找子串和字符")])]),s._v(" "),n("p",[s._v("string 类有一些查找子串和字符的成员函数，它们的返回值都是子串或字符在 string 对象字符串中的位置（即下标）。如果查不到，则返回 string::npos。string: :npos 是在 string 类中定义的一个静态常量。这些函数如下：")]),s._v(" "),n("ul",[n("li",[s._v("find：从前往后查找子串或字符出现的位置。")]),s._v(" "),n("li",[s._v("rfind：从后往前查找子串或字符出现的位置。")]),s._v(" "),n("li",[s._v("find_first_of：从前往后查找何处出现另一个字符串中包含的字符。例如：")]),s._v(" "),n("li",[s._v('s1.find_first_of("abc"); //查找s1中第一次出现"abc"中任一字符的位置')]),s._v(" "),n("li",[s._v("find_last_of：从后往前查找何处出现另一个字符串中包含的字符。")]),s._v(" "),n("li",[s._v("find_first_not_of：从前往后查找何处出现另一个字符串中没有包含的字符。")]),s._v(" "),n("li",[s._v("find_last_not_of：从后往前查找何处出现另一个字符串中没有包含的字符。\n下面是 string 类的查找成员函数的示例程序。")])]),s._v(" "),n("div",{staticClass:"language-C++ line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('#include <iostream>\n#include <string>\nusing namespace std;\nint main()\n{\n    string s1("Source Code");\n    int n;\n    if ((n = s1.find(\'u\')) != string::npos) //查找 u 出现的位置\n        cout << "1) " << n << "," << s1.substr(n) << endl;\n    //输出 l)2,urce Code\n    if ((n = s1.find("Source", 3)) == string::npos)\n        //从下标3开始查找"Source"，找不到\n        cout << "2) " << "Not Found" << endl;  //输出 2) Not Found\n    if ((n = s1.find("Co")) != string::npos)\n        //查找子串"Co"。能找到，返回"Co"的位置\n        cout << "3) " << n << ", " << s1.substr(n) << endl;\n    //输出 3) 7, Code\n    if ((n = s1.find_first_of("ceo")) != string::npos)\n        //查找第一次出现或 \'c\'、\'e\'或\'o\'的位置\n        cout << "4) " << n << ", " << s1.substr(n) << endl;\n    //输出 4) l, ource Code\n    if ((n = s1.find_last_of(\'e\')) != string::npos)\n        //查找最后一个 \'e\' 的位置\n        cout << "5) " << n << ", " << s1.substr(n) << endl;  //输出 5) 10, e\n    if ((n = s1.find_first_not_of("eou", 1)) != string::npos)\n        //从下标1开始查找第一次出现非 \'e\'、\'o\' 或 \'u\' 字符的位置\n        cout << "6) " << n << ", " << s1.substr(n) << endl;\n    //输出 6) 3, rce Code\n    return 0;\n}\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br")])]),n("p",[n("strong",[s._v("替换子串")])]),s._v(" "),n("p",[s._v("replace 成员函数可以对 string 对象中的子串进行替换，返回值为对象自身的引用。例如：")]),s._v(" "),n("div",{staticClass:"language-C++ line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('string s1("Real Steel");\ns1.replace(1, 3, "123456", 2, 4);  //用 "123456" 的子串(2,4) 替换 s1 的子串(1,3)\ncout << s1 << endl;  //输出 R3456 Steel\nstring s2("Harry Potter");\ns2.replace(2, 3, 5, \'0\');  //用 5 个 \'0\' 替换子串(2,3)\ncout << s2 << endl;  //输出 HaOOOOO Potter\nint n = s2.find("OOOOO");  //查找子串 "00000" 的位置，n=2\ns2.replace(n, 5, "XXX");  //将子串(n,5)替换为"XXX"\ncout << s2 < < endl;  //输出 HaXXX Potter\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br")])]),n("p",[n("strong",[s._v("删除子串")])]),s._v(" "),n("p",[s._v("erase 成员函数可以删除 string 对象中的子串，返回值为对象自身的引用。例如：")]),s._v(" "),n("div",{staticClass:"language-C++ line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('string s1("Real Steel");\ns1.erase(1, 3);  //删除子串(1, 3)，此后 s1 = "R Steel"\ns1.erase(5);  //删除下标5及其后面的所有字符，此后 s1 = "R Ste"\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[n("strong",[s._v("插入字符串")])]),s._v(" "),n("p",[s._v("insert 成员函数可以在 string 对象中插入另一个字符串，返回值为对象自身的引用。例如：")]),s._v(" "),n("div",{staticClass:"language-C++ line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('string s1("Limitless"), s2("00");\ns1.insert(2, "123");  //在下标 2 处插入字符串"123"，s1 = "Li123mitless"\ns1.insert(3, s2);  //在下标 2 处插入 s2 , s1 = "Li10023mitless"\ns1.insert(3, 5, \'X\');  //在下标 3 处插入 5 个 \'X\'，s1 = "Li1XXXXX0023mitless"\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("p",[n("strong",[s._v("将 string 对象作为流处理")])]),s._v(" "),n("p",[s._v("使用流对象 istringstream 和 ostringstream，可以将 string 对象当作一个流进行输入输出。使用这两个类需要包含头文件 sstream。")]),s._v(" "),n("p",[s._v("示例程序如下：")]),s._v(" "),n("div",{staticClass:"language-C++ line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('#include <iostream>\n#include <sstream>\n#include <string>\nusing namespace std;\nint main()\n{\n    string src("Avatar 123 5.2 Titanic K");\n    istringstream istrStream(src); //建立src到istrStream的联系\n    string s1, s2;\n    int n;  double d;  char c;\n    istrStream >> s1 >> n >> d >> s2 >> c; //把src的内容当做输入流进行读取\n    ostringstream ostrStream;\n    ostrStream << s1 << endl << s2 << endl << n << endl << d << endl << c <<endl;\n    cout << ostrStream.str();\n    return 0;\n}\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br")])]),n("p",[s._v('第 11 行，从输入流 istrStream 进行读取，过程和从 cin 读取一样，只不过输入的来源由键盘变成了 string 对象 src。因此，"Avatar" 被读取到 s1，123 被读取到 n，5.2 被读取到 d，"Titanic" 被读取到s2，\'K\' 被读取到 c。')]),s._v(" "),n("p",[s._v("第 12 行，将变量的值输出到流 ostrStream。输出结果不会出现在屏幕上，而是被保存在 ostrStream 对象管理的某处。用 ostringstream 类的 str 成员函数能将输出到 ostringstream 对象中的内容提取出来。")]),s._v(" "),n("p",[n("strong",[s._v("用 STL 算法操作 string 对象")])]),s._v(" "),n("p",[n("strong",[s._v("string 对象也可以看作一个顺序容器，它支持随机访问迭代器")]),s._v("，也有 begin 和 end 等成员函数。STL 中的许多算法也适用于 string 对象。下面是用 STL 算法操作 string 对象的程序示例。")]),s._v(" "),n("div",{staticClass:"language-C++ line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("#include <iostream>\n#include <algorithm>\n#include <string>\nusing namespace std;\nint main()\n{\n    string s(\"afgcbed\");\n    string::iterator p = find(s.begin(), s.end(), 'c');\n    if (p!= s.end())\n        cout << p - s.begin() << endl;  //输出 3\n    sort(s.begin(), s.end());\n    cout << s << endl;  //输出 abcdefg\n    next_permutation(s.begin(), s.end());\n    cout << s << endl; //输出 abcdegf\n    return 0;\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br")])]),n("h4",{attrs:{id:"练习"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#练习"}},[s._v("#")]),s._v(" 练习")]),s._v(" "),n("p",[n("a",{attrs:{href:"https://www.nowcoder.com/share/jump/5246231061694335410999",target:"_blank",rel:"noopener noreferrer"}},[n("strong",[s._v("HJ18")]),s._v(" "),n("strong",[s._v("识别有效的IP地址和掩码并进行分类统计")]),n("OutboundLink")],1)]),s._v(" "),n("h3",{attrs:{id:"常用模板"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#常用模板"}},[s._v("#")]),s._v(" 常用模板")]),s._v(" "),n("h4",{attrs:{id:"快速幂"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#快速幂"}},[s._v("#")]),s._v(" 快速幂")]),s._v(" "),n("p",[s._v("常规快速幂")]),s._v(" "),n("p",[s._v("其实快速幂就是利用了")]),s._v(" "),n("ul",[n("li",[s._v("指数可以从括号里拿出来或者放进去")]),s._v(" "),n("li",[s._v("指数二进制分解")])]),s._v(" "),n("p",[n("mjx-container",{staticClass:"MathJax",attrs:{jax:"CHTML"}},[n("mjx-math",{staticClass:"MJX-TEX"},[n("mjx-msup",[n("mjx-mi",{staticClass:"mjx-i"},[n("mjx-c",{attrs:{c:"a"}})],1),n("mjx-script",{staticStyle:{"vertical-align":"0.363em"}},[n("mjx-mi",{staticClass:"mjx-i",attrs:{size:"s"}},[n("mjx-c",{attrs:{c:"b"}})],1)],1)],1),n("mjx-mo",{staticClass:"mjx-n",attrs:{space:"4"}},[n("mjx-c",{attrs:{c:"="}})],1),n("mjx-mo",{staticClass:"mjx-n",attrs:{space:"4"}},[n("mjx-c",{attrs:{c:"("}})],1),n("mjx-msup",[n("mjx-mi",{staticClass:"mjx-i"},[n("mjx-c",{attrs:{c:"a"}})],1),n("mjx-script",{staticStyle:{"vertical-align":"0.363em"}},[n("mjx-mn",{staticClass:"mjx-n",attrs:{size:"s"}},[n("mjx-c",{attrs:{c:"2"}})],1)],1)],1),n("mjx-msup",[n("mjx-mo",{staticClass:"mjx-n"},[n("mjx-c",{attrs:{c:")"}})],1),n("mjx-script",{staticStyle:{"vertical-align":"0.363em"}},[n("mjx-TeXAtom",{attrs:{size:"s"}},[n("mjx-mi",{staticClass:"mjx-i"},[n("mjx-c",{attrs:{c:"b"}})],1),n("mjx-TeXAtom",[n("mjx-mo",{staticClass:"mjx-n"},[n("mjx-c",{attrs:{c:"/"}})],1)],1),n("mjx-mn",{staticClass:"mjx-n"},[n("mjx-c",{attrs:{c:"2"}})],1)],1)],1)],1),n("mjx-mstyle",[n("mjx-mspace",{staticStyle:{width:"1em"}})],1),n("mjx-mi",{staticClass:"mjx-i"},[n("mjx-c",{attrs:{c:"m"}})],1),n("mjx-mi",{staticClass:"mjx-i"},[n("mjx-c",{attrs:{c:"o"}})],1),n("mjx-mi",{staticClass:"mjx-i"},[n("mjx-c",{attrs:{c:"d"}})],1),n("mjx-mstyle",[n("mjx-mspace",{staticStyle:{width:"1em"}})],1),n("mjx-mi",{staticClass:"mjx-i"},[n("mjx-c",{attrs:{c:"p"}})],1)],1)],1)],1),s._v(" "),n("p",[s._v("融合上面两点，举例：")]),s._v(" "),n("ul",[n("li",[s._v("偶数次幂，2^8,8=1000,当迭代到最后一个1时，对于res来说就是1*256")]),s._v(" "),n("li",[s._v("奇数次幂，2^11,11=1011，对于res来说就是"),n("mjx-container",{staticClass:"MathJax",attrs:{jax:"CHTML"}},[n("mjx-math",{staticClass:"MJX-TEX"},[n("mjx-mn",{staticClass:"mjx-n"},[n("mjx-c",{attrs:{c:"1"}})],1),n("mjx-mo",{staticClass:"mjx-n",attrs:{space:"3"}},[n("mjx-c",{attrs:{c:"2217"}})],1),n("mjx-mn",{staticClass:"mjx-n",attrs:{space:"3"}},[n("mjx-c",{attrs:{c:"2"}})],1),n("mjx-mo",{staticClass:"mjx-n",attrs:{space:"3"}},[n("mjx-c",{attrs:{c:"2217"}})],1),n("mjx-mn",{staticClass:"mjx-n",attrs:{space:"3"}},[n("mjx-c",{attrs:{c:"4"}})],1),n("mjx-mo",{staticClass:"mjx-n",attrs:{space:"3"}},[n("mjx-c",{attrs:{c:"2217"}})],1),n("mjx-mn",{staticClass:"mjx-n",attrs:{space:"3"}},[n("mjx-c",{attrs:{c:"2"}}),n("mjx-c",{attrs:{c:"5"}}),n("mjx-c",{attrs:{c:"6"}})],1),n("mjx-mo",{staticClass:"mjx-n",attrs:{space:"4"}},[n("mjx-c",{attrs:{c:"="}})],1),n("mjx-mn",{staticClass:"mjx-n",attrs:{space:"4"}},[n("mjx-c",{attrs:{c:"1"}})],1),n("mjx-mo",{staticClass:"mjx-n",attrs:{space:"3"}},[n("mjx-c",{attrs:{c:"2217"}})],1),n("mjx-msup",[n("mjx-mn",{staticClass:"mjx-n"},[n("mjx-c",{attrs:{c:"2"}})],1),n("mjx-script",{staticStyle:{"vertical-align":"0.363em"}},[n("mjx-mn",{staticClass:"mjx-n",attrs:{size:"s"}},[n("mjx-c",{attrs:{c:"1"}})],1)],1)],1),n("mjx-mo",{staticClass:"mjx-n"},[n("mjx-c",{attrs:{c:"2217"}})],1),n("mjx-msup",[n("mjx-mn",{staticClass:"mjx-n"},[n("mjx-c",{attrs:{c:"2"}})],1),n("mjx-script",{staticStyle:{"vertical-align":"0.363em"}},[n("mjx-mn",{staticClass:"mjx-n",attrs:{size:"s"}},[n("mjx-c",{attrs:{c:"2"}})],1)],1)],1),n("mjx-mo",{staticClass:"mjx-n"},[n("mjx-c",{attrs:{c:"2217"}})],1),n("mjx-msup",[n("mjx-mn",{staticClass:"mjx-n"},[n("mjx-c",{attrs:{c:"2"}})],1),n("mjx-script",{staticStyle:{"vertical-align":"0.363em"}},[n("mjx-mn",{staticClass:"mjx-n",attrs:{size:"s"}},[n("mjx-c",{attrs:{c:"8"}})],1)],1)],1)],1)],1),s._v("结果也是一样的")],1)]),s._v(" "),n("p",[s._v("主要就是进行二进制分解时，当迭代到对应的那位为1时，乘的a的幂次就是所需那个幂次，并且这样做最终a的幂是和一个个乘来一样的。这样可以证明二进制分解指数的正确性。")]),s._v(" "),n("div",{staticClass:"language-C++ line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("typedef long long LL;\nLL quick_pow(LL a, LL n){\n\tLL res = 1;\n\twhile(n){\n\t\tif(n & 1){//n&1，当n的最后一位是1，值为1，否则为0\n\t\t\tres *= a;\t//判断最后一位是不是1，如果是的话，就把 当前的a乘上来\n\t\t}\t\t\n\t\ta *= a;\t\t//每一步都要乘a ，相当于a的幂加1\n\t\tn >>= 1;\t\t//右移一位 \n\t}\n\treturn res;\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br")])]),n("p",[s._v("取模快速幂（防止取幂过程爆int或者long long）")]),s._v(" "),n("p",[s._v("主要是"),n("code",[s._v("(a * b) % p = (a % p * b % p) % p")])]),s._v(" "),n("div",{staticClass:"language-C++ line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("typedef long long LL;\nLL quick_pow(LL a, LL n, LL m){\n\tLL res = 1;\n\twhile(n){\n\t\tif(n & 1){\n\t\t\tres = res * a % m;\n\t\t}\t\t\n\t\ta = a * a % m;\t\t\n\t\tn >>= 1;\t\t \n\t}\n\treturn res;\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br")])]),n("h4",{attrs:{id:"求质因子"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#求质因子"}},[s._v("#")]),s._v(" 求质因子")]),s._v(" "),n("p",[s._v("预备知识：")]),s._v(" "),n("ul",[n("li",[s._v("1既不是质数也不是合数")]),s._v(" "),n("li",[s._v("所有的合数都是由质数相乘得到的，只要一个数把质因数全部除掉，它就不会有合因数了。")]),s._v(" "),n("li",[s._v("一个合数的质因数不会超过它的算术平方根")]),s._v(" "),n("li",[s._v("一个质数的质因数是他本身")])]),s._v(" "),n("h5",{attrs:{id:"枚举到平方根"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#枚举到平方根"}},[s._v("#")]),s._v(" 枚举到平方根")]),s._v(" "),n("div",{staticClass:"language-C++ line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("h5",{attrs:{id:"质数筛"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#质数筛"}},[s._v("#")]),s._v(" 质数筛")])])}),[],!1,null,null,null);n.default=e.exports}}]);