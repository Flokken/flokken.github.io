(window.webpackJsonp=window.webpackJsonp||[]).push([[201],{529:function(e,s,t){"use strict";t.r(s);var a=t(4),v=Object(a.a)({},(function(){var e=this,s=e._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h2",{attrs:{id:"一、总述"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一、总述"}},[e._v("#")]),e._v(" 一、总述")]),e._v(" "),s("p",[e._v("通过了解MySQL语句内部的执行过程，可以对MySQL有更深入的理解。")]),e._v(" "),s("p",[e._v("下面是MySQL的基础架构图。")]),e._v(" "),s("img",{staticStyle:{zoom:"80%"},attrs:{src:"https://typora-1309665611.cos.ap-nanjing.myqcloud.com/typora/0d2070e8f84c4801adbfa03bda1f98d9.png",alt:"img"}}),e._v(" "),s("p",[e._v("大体来说，MySQL 可以分为 "),s("strong",[e._v("Server 层和存储引擎层")]),e._v("两部分。")]),e._v(" "),s("ul",[s("li",[e._v("Server 层包括连接器、查询缓存、分析器、优化器、执行器等，涵盖 MySQL 的大多数核心服务功能，以及所有的内置函数（如日期、时间、数学和加密函数等），所有跨存储引擎的功能都在这一层实现，比如存储过程、触发器、视图等。")]),e._v(" "),s("li",[e._v("而存储引擎层负责数据的存储和提取。其架构模式是插件式的，支持 InnoDB、MyISAM、Memory 等多个存储引擎。现在最常用的存储引擎是 InnoDB，它从 MySQL 5.5.5 版本开始成为了默认存储引擎。也就是说，你执行 create table 建表的时候，如果不指定引擎类型，默认使用的就是 InnoDB。不过，你也可以通过指定存储引擎的类型来选择别的引擎，比如在 create table 语句中使用 engine=memory, 来指定使用内存引擎创建表。")])]),e._v(" "),s("p",[e._v("不同存储引擎的表数据存取方式不同，支持的功能也不同。")]),e._v(" "),s("p",[e._v("从图中不难看出，不同的存储引擎共用一个 Server 层，也就是从连接器到执行器的部分。")]),e._v(" "),s("p",[e._v("下面是一条基础的MySQL语句，通过这条语句看整个流程。")]),e._v(" "),s("div",{staticClass:"language-mysql line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("mysql> select * from T where ID=10；\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("h2",{attrs:{id:"二-一条sql执行过程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二-一条sql执行过程"}},[e._v("#")]),e._v(" 二 一条SQL执行过程")]),e._v(" "),s("p",[e._v("一条查询语句的执行过程一般是经过连接器、分析器、优化器、执行器等功能模块，最后到达存储引擎。")]),e._v(" "),s("h3",{attrs:{id:"连接器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#连接器"}},[e._v("#")]),e._v(" 连接器")]),e._v(" "),s("p",[e._v("第一步，你会先连接到这个数据库上，这时候接待你的就是连接器。连接器负责跟客户端建立连接、获取权限、维持和管理连接。连接命令一般是这么写的：")]),e._v(" "),s("div",{staticClass:"language-mysql line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("mysql -h$ip -P$port -u$user -p\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("输完命令之后，你就需要在交互对话里面输入密码。虽然密码也可以直接跟在 -p 后面写在命令行中，但这样可能会导致你的密码泄露。如果你连的是生产服务器，强烈建议你不要这么做。")]),e._v(" "),s("p",[e._v("连接命令中的 mysql 是客户端工具，用来跟服务端建立连接。在"),s("strong",[e._v("完成经典的 TCP 握手后")]),e._v("，连接器就要开始认证你的身份，这个时候用的就是你输入的用户名和密码。")]),e._v(" "),s("ul",[s("li",[e._v('如果用户名或密码不对，你就会收到一个"Access denied for user"的错误，然后客户端程序结束执行。')]),e._v(" "),s("li",[e._v("如果用户名密码认证通过，连接器会到权限表里面查出你拥有的权限。"),s("strong",[e._v("之后，这个连接里面的权限判断逻辑，都将依赖于此时读到的权限。")])])]),e._v(" "),s("p",[e._v("这就意味着，一个用户成功建立连接后，即使你用管理员账号对这个用户的权限做了修改，也不会影响已经存在连接的权限。"),s("strong",[e._v("修改完成后，只有再新建的连接才会使用新的权限设置")]),e._v("。")]),e._v(" "),s("p",[e._v("连接完成后，如果你没有后续的动作，这个连接就处于空闲状态，你可以在 show processlist 命令中看到它。文本中这个图是 show processlist 的结果，其中的 Command 列显示为“Sleep”的这一行，就表示现在系统里面有一个空闲连接。")]),e._v(" "),s("p",[s("img",{attrs:{src:"https://typora-1309665611.cos.ap-nanjing.myqcloud.com/typora/f2da4aa3a672d48ec05df97b9f992fed.png",alt:"img"}})]),e._v(" "),s("p",[e._v("客户端如果太长时间没动静，连接器就会自动将它断开。这个时间是由参数 wait_timeout 控制的，默认值是 8 小时。")]),e._v(" "),s("p",[e._v("如果在连接被断开之后，客户端再次发送请求的话，就会收到一个错误提醒： Lost connection to MySQL server during query。"),s("strong",[e._v("这时候如果你要继续，就需要重连，然后再执行请求了。")])]),e._v(" "),s("p",[e._v("数据库里面，"),s("strong",[e._v("长连接")]),e._v("是指连接成功后，如果客户端持续有请求，则一直使用同一个连接。"),s("strong",[e._v("短连接")]),e._v("则是指每次执行完很少的几次查询就断开连接，下次查询再重新建立一个。")]),e._v(" "),s("p",[s("strong",[e._v("注意：")])]),e._v(" "),s("p",[e._v("​\t建立连接的过程通常是比较复杂的，尽量减少建立连接的动作，也就是"),s("strong",[e._v("尽量使用长连接")]),e._v("。")]),e._v(" "),s("p",[e._v("但是全部使用长连接后，你可能会发现，有些时候 MySQL 占用内存涨得特别快，这是因为 MySQL 在执行过程中临时使用的内存是管理在连接对象里面的。这些资源会在连接断开的时候才释放。所以如果长连接累积下来，可能导致内存占用太大，被系统强行杀掉（OOM），从现象看就是 MySQL 异常重启了。")]),e._v(" "),s("p",[s("strong",[e._v("解决：")])]),e._v(" "),s("ol",[s("li",[e._v("定期断开长连接。使用一段时间，或者程序里面判断执行过一个占用内存的大查询后，断开连接，之后要查询再重连。")]),e._v(" "),s("li",[e._v("如果你用的是 MySQL 5.7 或更新版本，可以在每次执行一个比较大的操作后，通过执行 mysql_reset_connection 来重新初始化连接资源。这个过程不需要重连和重新做权限验证，但是会将连接恢复到刚刚创建完时的状态。")])]),e._v(" "),s("h2",{attrs:{id:"查询缓存"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#查询缓存"}},[e._v("#")]),e._v(" 查询缓存")]),e._v(" "),s("p",[e._v("连接建立完成后，就可以执行 select 语句了。执行逻辑就会来到第二步：查询缓存。")]),e._v(" "),s("p",[e._v("MySQL 拿到一个查询请求后，会先到查询缓存看看，之前是不是执行过这条语句。之前执行过的语句及其结果可能会以 key-value 对的形式，被直接缓存在内存中。key 是查询的语句，value 是查询的结果。如果你的查询能够直接在这个缓存中找到 key，那么这个 value 就会被直接返回给客户端。如果语句不在查询缓存中，就会继续后面的执行阶段。")]),e._v(" "),s("p",[e._v("执行完成后，执行结果会被存入查询缓存中。你可以看到，如果查询命中缓存，MySQL 不需要执行后面的复杂操作，就可以直接返回结果，这个效率会很高。但是大多数情况下我会建议你不要使用查询缓存，为什么呢？"),s("span",{staticStyle:{"border-bottom":"1px dashed green"}},[e._v("因为查询缓存往往弊大于利。查询缓存的失效非常频繁，只要有对一个表的更新，这个表上所有的查询缓存都会被清空。")])]),e._v(" "),s("p",[e._v("因此很可能你费劲地把结果存起来，还没使用呢，就被一个更新全清空了。"),s("strong",[e._v("对于更新压力大的数据库来说，查询缓存的命中率会非常低。"),s("strong",[e._v("除非你的业务就是有一张")]),e._v("静态表")]),e._v("，很长时间才会更新一次。比如，一个系统配置表，那这张表上的查询才适合使用查询缓存。好在 MySQL 也提供了这种“按需使用”的方式。你可以将参数 query_cache_type 设置成 DEMAND，这样对于默认的 SQL 语句都不使用查询缓存。而对于你确定要使用查询缓存的语句，可以用 SQL_CACHE 显式指定，像下面这个语句一样：")]),e._v(" "),s("div",{staticClass:"language-mysql line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("mysql> select SQL_CACHE * from T where ID=10；\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[s("strong",[e._v("注意")]),e._v("：")]),e._v(" "),s("p",[e._v("MySQL 8.0 版本直接将查询缓存的整块功能删掉了，也就是说 "),s("strong",[e._v("8.0 开始彻底没有这个功能了")])]),e._v(" "),s("h3",{attrs:{id:"分析器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#分析器"}},[e._v("#")]),e._v(" 分析器")]),e._v(" "),s("p",[e._v("如果没有命中查询缓存，就要开始真正执行语句了。首先，MySQL 需要知道你要做什么，因此需要对 SQL 语句做解析。")]),e._v(" "),s("p",[e._v("分析器先会做“词法分析”。你输入的是由多个字符串和空格组成的一条 SQL 语句，MySQL 需要识别出里面的字符串分别是什么，代表什么。")]),e._v(" "),s("p",[e._v('MySQL 从你输入的"select"这个关键字识别出来，这是一个查询语句。它也要把字符串'),s("span",{staticStyle:{"border-bottom":"1px dashed green"}},[e._v("“T”识别成“表名 T”，把字符串“ID”识别成“列 ID”。 ")])]),e._v(" "),s("p",[s("strong",[e._v("做完了这些识别以后，就要做“语法分析”")]),e._v("。根据词法分析的结果，语法分析器会根据语法规则，判断你输入的这个 SQL 语句是否满足 MySQL 语法。")]),e._v(" "),s("p",[s("strong",[e._v("如果你的语句不对")]),e._v("，就会收到“You have an error in your SQL syntax”的错误提醒，比如下面这个语句 select 少打了开头的字母“s”。")]),e._v(" "),s("div",{staticClass:"language-mysql line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("mysql> elect * from t where ID=1;\n\nERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'elect * from t where ID=1' at line 1\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br")])]),s("p",[s("strong",[e._v("一般语法错误会提示第一个出现错误的位置")]),e._v("，所以你要关注的是紧接“use near”的内容。")]),e._v(" "),s("h3",{attrs:{id:"优化器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#优化器"}},[e._v("#")]),e._v(" 优化器")]),e._v(" "),s("p",[e._v("经过了分析器，MySQL 就知道你要做什么了。在开始执行之前，还要先经过优化器的处理。")]),e._v(" "),s("p",[e._v("优化器是在表里面有多个索引的时候，决定使用哪个索引；或者在一个语句有多表关联（join）的时候，决定各个表的连接顺序。比如你执行下面这样的语句，这个语句是执行两个表的 join：")]),e._v(" "),s("div",{staticClass:"language-mysql line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("mysql> select * from t1 join t2 using(ID)  where t1.c=10 and t2.d=20;\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("ul",[s("li",[e._v("既可以先从表 t1 里面取出 c=10 的记录的 ID 值，再根据 ID 值关联到表 t2，再判断 t2 里面 d 的值是否等于 20。")]),e._v(" "),s("li",[e._v("也可以先从表 t2 里面取出 d=20 的记录的 ID 值，再根据 ID 值关联到 t1，再判断 t1 里面 c 的值是否等于 10。")])]),e._v(" "),s("p",[e._v("这两种执行方法的逻辑结果是一样的，但是执行的效率会有不同，而优化器的作用就是决定选择使用哪一个方案。")]),e._v(" "),s("p",[e._v("优化器阶段完成后，这个语句的执行方案就确定下来了，然后进入执行器阶段。")]),e._v(" "),s("h3",{attrs:{id:"执行器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#执行器"}},[e._v("#")]),e._v(" 执行器")]),e._v(" "),s("p",[e._v("MySQL 通过分析器知道了你要做什么，通过优化器知道了该怎么做，于是就进入了执行器阶段，开始执行语句。")]),e._v(" "),s("p",[e._v("开始执行的时候，要先判断一下你对这个表 T 有没有执行查询的权限，如果没有，就会返回没有权限的错误，如下所示 (在工程实现上，如果命中查询缓存，会在查询缓存返回结果的时候，做权限验证。查询也会在优化器之前调用 precheck 验证权限)。")]),e._v(" "),s("div",{staticClass:"language-mysql line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("mysql> select * from T where ID=10;\nERROR 1142 (42000): SELECT command denied to user 'b'@'localhost' for table 'T'\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br")])]),s("p",[e._v("如果有权限，就打开表继续执行。打开表的时候，执行器就会根据表的引擎定义，去使用这个引擎提供的接口。")]),e._v(" "),s("p",[e._v("比如我们这个例子中的表 T 中，ID 字段没有索引，那么执行器的执行流程是这样的：")]),e._v(" "),s("ol",[s("li",[e._v("调用 InnoDB 引擎接口取这个表的第一行，判断 ID 值是不是 10，如果不是则跳过，如果是则将这行存在结果集中；")]),e._v(" "),s("li",[e._v("调用引擎接口取“下一行”，重复相同的判断逻辑，直到取到这个表的最后一行。")]),e._v(" "),s("li",[e._v("执行器将上述遍历过程中所有满足条件的行组成的记录集作为结果集返回给客户端。")])]),e._v(" "),s("p",[e._v("对于有索引的表，执行的逻辑也差不多。第一次调用的是“取满足条件的第一行”这个接口，之后循环取“满足条件的下一行”这个接口，这些接口都是引擎中已经定义好的。")]),e._v(" "),s("p",[e._v("你数据库的慢查询日志中有一个 rows_examined 的字段，表示这个语句执行过程中扫描了多少行。")]),e._v(" "),s("p",[e._v("这个值就是在执行器每次调用引擎获取数据行的时候累加的。在有些场景下，执行器调用一次，在引擎内部则扫描了多行，因此引擎扫描行数跟 rows_examined 并不是完全相同的。")]),e._v(" "),s("h2",{attrs:{id:"qa"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#qa"}},[e._v("#")]),e._v(" QA")]),e._v(" "),s("hr"),e._v(" "),s("p",[e._v("1  问：如果表 T 中没有字段 k，而你执行了这个语句 select * from T where k=1, 那肯定是会报“不存在这个列”的错误： “Unknown column ‘k’in ‘where clause’”。你觉得这个错误是在我们上面提到的哪个阶段报出来的呢？")]),e._v(" "),s("p",[e._v("​\t答：分析器。Oracle会在分析阶段判断语句是否正确，表是否存在，列是否存在等。MySQL深受oracle影响，也这样。可以这么想，")]),e._v(" "),s("p",[e._v("分析器在词法分析阶段，需要知道SQL中的每个字段代表什么意思，所以在这个阶段就可以判断表中存不存在k这一列。")]),e._v(" "),s("p",[e._v("2 为什么对权限的检查不在优化器或者之前做？")]),e._v(" "),s("p",[e._v("​\t答：有些时候，SQL语句要操作的表不只是SQL字面上那些。比如如果有个触发器，得在执行器阶段（过程中）才能确定。优化器阶段前是无能为力的")])])}),[],!1,null,null,null);s.default=v.exports}}]);